// üöõ –¢–∏–ø—ã –¥–ª—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã NextGen
// –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–µ –ê–≤—Ç–æ–ì–û–°–¢

export interface TransportType {
  readonly id: string;
  readonly name: string;
  readonly maxWeight: number; // –∫–≥
  readonly maxVolume: number; // –º¬≥
  readonly density: number; // –∫–≥/–º¬≥
  readonly minPrice: {
    readonly moscow: number;
    readonly regions: number;
  };
  readonly coefficient: number; // –æ—Ç —Ü–µ–Ω—ã —Ñ—É—Ä—ã
  readonly icon: string;
}

export interface CityData {
  readonly name: string;
  readonly region: string;
  readonly coordinates: readonly [number, number];
  readonly isMarketplaceHub: boolean;
  readonly deliveryZone: 'moscow' | 'spb' | 'federal';
  readonly timezone: string;
}

export interface RouteData {
  readonly from: CityData;
  readonly to: CityData;
  readonly distance: number; // –∫–º
  readonly estimatedTime: number; // —á–∞—Å—ã
  readonly popularity: 'low' | 'medium' | 'high';
}

export type CargoType = 
  | 'general' 
  | 'fragile' 
  | 'valuable' 
  | 'dangerous' 
  | 'perishable' 
  | 'oversized';

export type UrgencyLevel = 
  | 'standard' 
  | 'urgent' 
  | 'emergency';

export type DeliveryMode = 
  | 'consolidated' // —Å–±–æ—Ä–Ω—ã–π
  | 'dedicated';   // –æ—Ç–¥–µ–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞

export interface CalculatorFormData {
  fromCity: string;
  toCity: string;
  weight: number;
  volume?: number | undefined;
  cargoType: CargoType;
  urgency: UrgencyLevel;
  deliveryMode?: DeliveryMode;
}

export interface PriceFactors {
  readonly basePrice: number;
  readonly loadFactor: number;    // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏
  readonly routeFactor: number;   // –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞
  readonly cargoFactor: number;   // —Ç–∏–ø –≥—Ä—É–∑–∞
  readonly urgencyFactor: number; // —Å—Ä–æ—á–Ω–æ—Å—Ç—å
  readonly seasonFactor: number;  // —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
  readonly demandFactor: number;  // —Å–ø—Ä–æ—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
}

export interface CalculationResult {
  readonly success: boolean;
  readonly price: number;
  readonly pricePerKm: number;
  readonly transport: TransportType;
  readonly route: RouteData;
  readonly deliveryTime: string;
  readonly factors: PriceFactors;
  readonly details: {
    readonly weight: number;
    readonly volume?: number | undefined;
    readonly density?: number | undefined;
    readonly loadPercent: number;
    readonly volumePercent?: number | undefined;
  };
  readonly restrictions?: string[];
  readonly recommendations?: string[];
}

export interface CalculationError {
  readonly success: false;
  readonly error: string;
  readonly code: 'SAME_REGION' | 'OVERWEIGHT' | 'INVALID_ROUTE' | 'API_ERROR';
  readonly alternativePrice?: number | undefined;
  readonly suggestions?: string[] | undefined;
}

// –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º –∏–ª–∏ —Å –æ—à–∏–±–∫–æ–π
export type CalculationResponse = CalculationResult | CalculationError;

export interface LeadData {
  readonly name: string;
  readonly phone: string;
  readonly email?: string;
  readonly company?: string;
  readonly message?: string;
  readonly calculationResult?: CalculationResult;
  readonly source: 'calculator' | 'form' | 'exit-intent' | 'chat';
  readonly timestamp: Date;
  readonly promoCode?: string;
  readonly privacyConsent: boolean;
}

export interface TelegramConfig {
  readonly botToken: string;
  readonly chatId: string;
  readonly webhook?: string;
}

export interface AnalyticsEvent {
  readonly event: string;
  readonly category: 'calculator' | 'form' | 'navigation' | 'engagement';
  readonly action: string;
  readonly label?: string;
  readonly value?: number;
  readonly customParameters?: Record<string, string | number>;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
export interface PromoCode {
  readonly code: string;
  readonly discount: number; // –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏
  readonly validUntil?: Date;
  readonly maxUses?: number;
  readonly currentUses: number;
  readonly source: 'exit-intent' | 'timer' | 'manual';
}

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π journey
export interface UserJourney {
  sessionId: string;
  landingPage: string;
  calculatorUsed: boolean;
  calculationResult?: CalculationResult;
  exitIntent: boolean;
  promoCodeShown?: PromoCode;
  leadSubmitted: boolean;
  conversionSource?: string;
  events: AnalyticsEvent[];
  timeOnSite: number;
}
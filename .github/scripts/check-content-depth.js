const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–ª–æ–≤ –≤ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–µ
function countWords(htmlContent) {
  // –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
  let content = htmlContent.replace(/<script[\s\S]*?<\/script>/gi, '');
  content = content.replace(/<style[\s\S]*?<\/style>/gi, '');
  
  // –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
  content = content.replace(/<[^>]*>/g, ' ');
  
  // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å—á–∏—Ç–∞–µ–º —Å–ª–æ–≤–∞
  content = content.replace(/\s+/g, ' ').trim();
  
  // –°—á–∏—Ç–∞–µ–º —Å–ª–æ–≤–∞ (—Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ)
  const words = content.match(/[\u0400-\u04FF]+|[a-zA-Z]+/g) || [];
  return words.length;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞
function analyzeFile(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  const wordCount = countWords(content);
  const filename = path.basename(filePath);
  
  return {
    filename,
    wordCount,
    needsImprovement: wordCount < 2000
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
function scanDirectory(dirPath, results = []) {
  const files = fs.readdirSync(dirPath);
  
  for (const file of files) {
    const fullPath = path.join(dirPath, file);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory() && !file.startsWith('.') && file !== 'node_modules' && file !== 'assets') {
      scanDirectory(fullPath, results);
    } else if (file.endsWith('.html') && !file.includes('404')) {
      results.push(analyzeFile(fullPath));
    }
  }
  
  return results;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üìä –ê–Ω–∞–ª–∏–∑ –≥–ª—É–±–∏–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö —Å–∞–π—Ç–∞\n');
  console.log('–¶–µ–ª–µ–≤–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: –º–∏–Ω–∏–º—É–º 2000 —Å–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É\n');
  console.log('=' .repeat(60) + '\n');
  
  const baseDir = path.join(__dirname, '..', '..');
  const results = scanDirectory(baseDir);
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ª–æ–≤ (–æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É)
  results.sort((a, b) => a.wordCount - b.wordCount);
  
  // –°—Ç—Ä–∞–Ω–∏—Ü—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
  const needsImprovement = results.filter(r => r.needsImprovement);
  const goodPages = results.filter(r => !r.needsImprovement);
  
  console.log('‚ùå –°—Ç—Ä–∞–Ω–∏—Ü—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è (< 2000 —Å–ª–æ–≤):\n');
  for (const page of needsImprovement) {
    console.log(`   ${page.filename.padEnd(40)} - ${page.wordCount} —Å–ª–æ–≤`);
  }
  
  console.log('\n‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü—ã —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º (>= 2000 —Å–ª–æ–≤):\n');
  for (const page of goodPages) {
    console.log(`   ${page.filename.padEnd(40)} - ${page.wordCount} —Å–ª–æ–≤`);
  }
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\n' + '=' .repeat(60));
  console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n');
  console.log(`   –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${results.length}`);
  console.log(`   –¢—Ä–µ–±—É—é—Ç —É–ª—É—á—à–µ–Ω–∏—è: ${needsImprovement.length} (${Math.round(needsImprovement.length / results.length * 100)}%)`);
  console.log(`   –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º: ${goodPages.length} (${Math.round(goodPages.length / results.length * 100)}%)`);
  
  // –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
  const avgWords = Math.round(results.reduce((sum, r) => sum + r.wordCount, 0) / results.length);
  console.log(`   –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: ${avgWords}`);
  
  // –¢–æ–ø-5 —Å—Ç—Ä–∞–Ω–∏—Ü —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
  console.log('\nüéØ –¢–æ–ø-5 —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è:\n');
  for (let i = 0; i < Math.min(5, needsImprovement.length); i++) {
    const page = needsImprovement[i];
    const deficit = 2000 - page.wordCount;
    console.log(`   ${i + 1}. ${page.filename} - –≤—Å–µ–≥–æ ${page.wordCount} —Å–ª–æ–≤ (–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å ${deficit} —Å–ª–æ–≤)`);
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
  const report = {
    date: new Date().toISOString(),
    totalPages: results.length,
    needsImprovement: needsImprovement.map(p => ({
      filename: p.filename,
      wordCount: p.wordCount,
      deficit: 2000 - p.wordCount
    })),
    statistics: {
      avgWords,
      percentNeedsImprovement: Math.round(needsImprovement.length / results.length * 100),
      totalPagesToImprove: needsImprovement.length
    }
  };
  
  fs.writeFileSync(
    path.join(__dirname, 'content-depth-report.json'),
    JSON.stringify(report, null, 2)
  );
  
  console.log('\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ .github/scripts/content-depth-report.json');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
main();
const fs = require('fs');
const path = require('path');

// –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –±–∞–∑–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
const REAL_DISTANCES = {
  'moskva-tula': 180,
  'moskva-kaluga': 165,
  'moskva-ryazan': 196,
  'moskva-vladimir': 184,
  'moskva-tver': 164,
  'moskva-yaroslavl': 264,
  'moskva-voronezh': 463,
  'moskva-belgorod': 695,
  'moskva-kursk': 512,
  'moskva-orel': 368,
  'moskva-bryansk': 379,
  'moskva-smolensk': 378,
  'moskva-spb': 635,
  'moskva-nizhniy-novgorod': 411,
  'moskva-kazan': 719,
  'moskva-penza': 630,
  'moskva-saransk': 641,
  'moskva-tambov': 460,
  'moskva-koledinovo': 25,
  'moskva-podolsk': 40,
  'moskva-belye-stolby': 50,
  'moskva-elektrostal': 58,
  'moskva-tver-ozon': 164
};

// –ù–û–í–´–ï –ì–û–†–û–î–ê –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò (—Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç)
const NEW_CITIES = {
  // –ù–æ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –ú–æ—Å–∫–≤—ã
  "moskva": {
    name: "–ú–æ—Å–∫–≤–∞",
    nameTo: "–ú–æ—Å–∫–≤—ã", 
    nameFrom: "–∏–∑ –ú–æ—Å–∫–≤—ã",
    region: "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
    newDestinations: [
      // –ù–æ–≤—ã–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      "ivanovo", "kostroma", "lipetsk", "tambov", "rybinsk", 
      "vladimir", "murom", "kovrov", "gusev", "aleksandrov"
    ]
  },
  
  // –ù–æ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
  "spb": {
    name: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
    nameTo: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞",
    nameFrom: "–∏–∑ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞", 
    region: "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
    newDestinations: [
      "novgorod", "pskov", "petrozavodsk", "vologda", "tver"
    ]
  },
  
  "kazan": {
    name: "–ö–∞–∑–∞–Ω—å",
    nameTo: "–ö–∞–∑–∞–Ω–∏",
    nameFrom: "–∏–∑ –ö–∞–∑–∞–Ω–∏",
    region: "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω", 
    newDestinations: [
      "naberezhnye-chelny", "nizhnekamsk", "almetyevsk", "bugulma", "zelenodolsk"
    ]
  }
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
function getRealDistance(fromCity, toCity) {
  const key = `${fromCity}-${toCity}`;
  const reverseKey = `${toCity}-${fromCity}`;
  
  if (REAL_DISTANCES[key]) {
    return REAL_DISTANCES[key];
  }
  if (REAL_DISTANCES[reverseKey]) {
    return REAL_DISTANCES[reverseKey];
  }
  
  // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
  return Math.floor(Math.random() * 500) + 200;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function ensureDir(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
function generateNewRouteContent(fromCity, toCity, distance, price) {
  const fromCityData = NEW_CITIES[fromCity];
  const toCityName = toCity.charAt(0).toUpperCase() + toCity.slice(1).replace('-', ' ');
  
  return {
    title: `–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏ ${fromCityData.name} ‚Äî ${toCityName} | –ê–≤—Ç–æ–ì–û–°–¢`,
    description: `–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏ –∏–∑ ${fromCityData.name} –≤ ${toCityName}. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ ${distance} –∫–º. –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞, —á–µ—Å—Ç–Ω—ã–µ —Ü–µ–Ω—ã, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ 24/7.`,
    content: `
      <h1>–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏ ${fromCityData.name} ‚Äî ${toCityName}</h1>
      
      <div class="route-info">
        <div class="route-details">
          <div class="detail-item">
            <span class="icon">üìè</span>
            <span>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ~${distance} –∫–º</span>
          </div>
          <div class="detail-item">
            <span class="icon">‚è±Ô∏è</span>
            <span>–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ${distance < 300 ? '6-12 —á–∞—Å–æ–≤' : distance < 600 ? '1-2 –¥–Ω—è' : '2-3 –¥–Ω—è'}</span>
          </div>
          <div class="detail-item">
            <span class="icon">üí∞</span>
            <span>–°—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç ${price.toLocaleString()} ‚ÇΩ</span>
          </div>
        </div>
      </div>
      
      <div class="route-description">
        <h2>–û –º–∞—Ä—à—Ä—É—Ç–µ ${fromCityData.name} ‚Äî ${toCityName}</h2>
        <p>–û—Ä–≥–∞–Ω–∏–∑—É–µ–º –Ω–∞–¥–µ–∂–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É –≥—Ä—É–∑–æ–≤ –∏–∑ ${fromCityData.name} (${fromCityData.region}) –≤ ${toCityName}. 
        –ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</p>
        
        <ul>
          <li>üöõ –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–ø–∞—Ä–∫</li>
          <li>üì¶ –õ—é–±—ã–µ —Ç–∏–ø—ã –≥—Ä—É–∑–æ–≤</li>
          <li>üõ°Ô∏è –ü–æ–ª–Ω–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ</li>
          <li>üì± –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ 24/7</li>
          <li>‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø–æ–¥–∞—á–∞</li>
        </ul>
      </div>
      
      <div class="services-section">
        <h2>–£—Å–ª—É–≥–∏ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ</h2>
        <div class="services-grid">
          <div class="service-card">
            <h3>üöõ –ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏</h3>
            <p>–î–æ—Å—Ç–∞–≤–∫–∞ –ª—é–±—ã—Ö –≥—Ä—É–∑–æ–≤ –æ—Ç 1 –∫–≥ –¥–æ 20 —Ç–æ–Ω–Ω</p>
          </div>
          <div class="service-card">
            <h3>üì¶ –£–ø–∞–∫–æ–≤–∫–∞</h3>
            <p>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞ –∏ –ø–∞–ª–ª–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</p>
          </div>
          <div class="service-card">
            <h3>üè™ –ü–æ–≥—Ä—É–∑–∫–∞/–≤—ã–≥—Ä—É–∑–∫–∞</h3>
            <p>–ü–æ–º–æ—â—å –≤ –ø–æ–≥—Ä—É–∑–∫–µ –∏ –≤—ã–≥—Ä—É–∑–∫–µ –≥—Ä—É–∑–æ–≤</p>
          </div>
        </div>
      </div>
    `
  };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
function generateNewRouteHTML(fromCity, toCity, distance, price, content) {
  const fromCityData = NEW_CITIES[fromCity];
  const toCityName = toCity.charAt(0).toUpperCase() + toCity.slice(1).replace('-', ' ');
  
  return `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${content.title}</title>
    <meta name="description" content="${content.description}">
    <meta name="keywords" content="–≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏, ${fromCityData.name}, ${toCityName}, –¥–æ—Å—Ç–∞–≤–∫–∞ –≥—Ä—É–∑–æ–≤, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è">
    <link rel="canonical" href="https://avtogost77.ru/routes/${fromCity}/${fromCity}-${toCity}/">
    <link rel="stylesheet" href="../../assets/css/styles-optimized.css">
    
    <!-- Open Graph -->
    <meta property="og:title" content="${content.title}">
    <meta property="og:description" content="${content.description}">
    <meta property="og:url" content="https://avtogost77.ru/routes/${fromCity}/${fromCity}-${toCity}/">
    <meta property="og:type" content="website">
    
    <!-- Schema.org -->
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Service",
      "name": "–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏ ${fromCityData.name} ‚Äî ${toCityName}",
      "description": "${content.description}",
      "provider": {
        "@type": "Organization",
        "name": "–ê–≤—Ç–æ–ì–û–°–¢",
        "url": "https://avtogost77.ru"
      },
      "areaServed": {
        "@type": "Place",
        "name": "${toCityName}"
      }
    }
    </script>
</head>
<body>
    <header class="header">
        <div class="container">
            <div class="header-content">
                <div class="logo">
                    <a href="../../index.html" class="logo-link">
                        üöõ <span class="logo-text">–ê–≤—Ç–æ–ì–û–°–¢</span>
                    </a>
                </div>
                <nav class="nav">
                    <a href="../../about.html" class="nav-link">–û –Ω–∞—Å</a>
                    <a href="../../services.html" class="nav-link">–£—Å–ª—É–≥–∏</a>
                    <a href="../../index.html#calculator" class="nav-link">–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</a>
                    <a href="../../contact.html" class="nav-link">–ö–æ–Ω—Ç–∞–∫—Ç—ã</a>
                </nav>
            </div>
        </div>
    </header>

    <main class="main">
        <div class="container">
            ${content.content}
            
            <div class="cta-section">
                <h2>–ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É</h2>
                <p>–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏</p>
                <a href="../../contact.html" class="btn btn-primary">–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</a>
            </div>
        </div>
    </main>

    <footer class="footer">
        <div class="container">
            <div class="footer-content">
                <div class="footer-section">
                    <h3>–ê–≤—Ç–æ–ì–û–°–¢</h3>
                    <p>–ù–∞–¥–µ–∂–Ω—ã–µ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏ –ø–æ –†–æ—Å—Å–∏–∏</p>
                </div>
                <div class="footer-section">
                    <h3>–ö–æ–Ω—Ç–∞–∫—Ç—ã</h3>
                    <p>üìû +7 (495) 123-45-67</p>
                    <p>üìß info@avtogost77.ru</p>
                </div>
            </div>
        </div>
    </footer>
</body>
</html>`;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
async function generateNewRoutes() {
  const pagesCount = parseInt(process.env.PAGES_COUNT) || 10;
  console.log(`üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ${pagesCount} –ù–û–í–´–• –º–∞—Ä—à—Ä—É—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü...`);
  
  let generatedCount = 0;
  let skippedCount = 0;
  
  for (const [fromCity, cityData] of Object.entries(NEW_CITIES)) {
    if (generatedCount >= pagesCount) break;
    
    ensureDir(`routes/${fromCity}`);
    
    for (const toCity of cityData.newDestinations) {
      if (generatedCount >= pagesCount) break;
      
      const filename = `routes/${fromCity}/${fromCity}-${toCity}.html`;
      
      // –ü–†–û–í–ï–†–Ø–ï–ú: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
      if (fs.existsSync(filename)) {
        console.log(`‚ö†Ô∏è –ü–†–û–ü–£–°–ö: ${filename} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        skippedCount++;
        continue;
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
      const distance = getRealDistance(fromCity, toCity);
      const basePrice = distance < 300 ? 15000 : distance < 800 ? 25000 : Math.round(distance * 45);
      
      const content = generateNewRouteContent(fromCity, toCity, distance, basePrice);
      const html = generateNewRouteHTML(fromCity, toCity, distance, basePrice, content);
      
      fs.writeFileSync(filename, html);
      
      generatedCount++;
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ù–û–í–ê–Ø —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${filename} (${distance}–∫–º, –æ—Ç ${basePrice.toLocaleString()}‚ÇΩ)`);
    }
  }
  
  console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò:`);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: ${generatedCount}`);
  console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: ${skippedCount}`);
  console.log(`üéØ –¶–µ–ª—å: ${pagesCount} —Å—Ç—Ä–∞–Ω–∏—Ü`);
  
  if (generatedCount === 0) {
    console.log(`\nüí° –í–°–ï –ú–ê–†–®–†–£–¢–´ –£–ñ–ï –°–£–©–ï–°–¢–í–£–Æ–¢!`);
    console.log(`–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –≥–æ—Ä–æ–¥–∞ –≤ NEW_CITIES –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.`);
  }
  
  return generatedCount;
}

// –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
if (require.main === module) {
  generateNewRoutes().catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { generateNewRoutes, NEW_CITIES };
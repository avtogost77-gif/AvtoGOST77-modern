const fs = require('fs');
const path = require('path');

// üîó –°–ö–†–ò–ü–¢ –í–ù–£–¢–†–ï–ù–ù–ï–ô –ü–ï–†–ï–õ–ò–ù–ö–û–í–ö–ò –î–õ–Ø SEO
// –î–æ–±–∞–≤–ª—è–µ—Ç –±–ª–æ–∫–∏ –ø–æ—Ö–æ–∂–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
const PAGES_DATABASE = {
  routes: [],
  calculators: [],
  industries: [],
  blog: [
    { url: '/blog-1-carrier-failed.html', title: '–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –ø–æ–¥–≤–µ–ª –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫', topic: '—Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä' },
    { url: '/blog-2-wildberries-delivery.html', title: '–î–æ—Å—Ç–∞–≤–∫–∞ –¥–ª—è Wildberries', topic: '–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã' },
    { url: '/blog-3-spot-orders.html', title: '–°–ø–æ—Ç-–∑–∞—è–≤–∫–∏ –≤ –ª–æ–≥–∏—Å—Ç–∏–∫–µ', topic: '—Å—Ä–æ—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞' },
    { url: '/blog-4-remote-logistics.html', title: '–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –æ—Ç–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤', topic: '–º–µ–∂–≥–æ—Ä–æ–¥' },
    { url: '/blog-5-logistics-optimization.html', title: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏', topic: '—ç–∫–æ–Ω–æ–º–∏—è' },
    { url: '/blog-6-marketplace-insider.html', title: '–ò–Ω—Å–∞–π–¥—ã –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤', topic: '–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã' }
  ]
};

// –°–∫–∞–Ω–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function scanPages() {
  // –°–∫–∞–Ω–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
  const routesDir = path.join(__dirname, '../../routes');
  if (fs.existsSync(routesDir)) {
    const cities = fs.readdirSync(routesDir).filter(f => fs.statSync(path.join(routesDir, f)).isDirectory());
    
    cities.forEach(city => {
      const cityDir = path.join(routesDir, city);
      const files = fs.readdirSync(cityDir).filter(f => f.endsWith('.html'));
      
      files.forEach(file => {
        if (file !== 'index.html') {
          const content = fs.readFileSync(path.join(cityDir, file), 'utf-8');
          const titleMatch = content.match(/<h1>([^<]+)<\/h1>/);
          const title = titleMatch ? titleMatch[1] : file.replace('.html', '');
          
          PAGES_DATABASE.routes.push({
            url: `/routes/${city}/${file}`,
            file: path.join(cityDir, file),
            city: city,
            title: title,
            fromCity: extractCity(file, 'from'),
            toCity: extractCity(file, 'to')
          });
        }
      });
    });
  }

  // –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã
  const calcDir = path.join(__dirname, '../../calculators');
  if (fs.existsSync(calcDir)) {
    const files = fs.readdirSync(calcDir).filter(f => f.endsWith('.html'));
    
    files.forEach(file => {
      if (file !== 'index.html') {
        const content = fs.readFileSync(path.join(calcDir, file), 'utf-8');
        const titleMatch = content.match(/<h1>([^<]+)<\/h1>/);
        const title = titleMatch ? titleMatch[1] : file.replace('.html', '');
        
        PAGES_DATABASE.calculators.push({
          url: `/calculators/${file}`,
          file: path.join(calcDir, file),
          title: title,
          type: extractCalcType(file)
        });
      }
    });
  }

  // –°–∫–∞–Ω–∏—Ä—É–µ–º –æ—Ç—Ä–∞—Å–ª–∏
  const indDir = path.join(__dirname, '../../industries');
  if (fs.existsSync(indDir)) {
    const files = fs.readdirSync(indDir).filter(f => f.endsWith('.html'));
    
    files.forEach(file => {
      if (file !== 'index.html') {
        const content = fs.readFileSync(path.join(indDir, file), 'utf-8');
        const titleMatch = content.match(/<h1>([^<]+)<\/h1>/);
        const title = titleMatch ? titleMatch[1] : file.replace('.html', '');
        
        PAGES_DATABASE.industries.push({
          url: `/industries/${file}`,
          file: path.join(indDir, file),
          title: title,
          industry: extractIndustry(file)
        });
      }
    });
  }
}

// –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
function extractCity(filename, type) {
  const parts = filename.replace('.html', '').split('-');
  if (type === 'from') return parts[0];
  if (type === 'to') return parts[parts.length - 1];
  return '';
}

// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
function extractCalcType(filename) {
  if (filename.includes('sbornye')) return '—Å–±–æ—Ä–Ω—ã–µ –≥—Ä—É–∑—ã';
  if (filename.includes('express')) return '—ç–∫—Å–ø—Ä–µ—Å—Å';
  if (filename.includes('oversized')) return '–Ω–µ–≥–∞–±–∞—Ä–∏—Ç';
  if (filename.includes('dangerous')) return '–æ–ø–∞—Å–Ω—ã–µ –≥—Ä—É–∑—ã';
  if (filename.includes('refrigerated')) return '—Ä–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä';
  if (filename.includes('furniture')) return '–º–µ–±–µ–ª—å';
  if (filename.includes('moving')) return '–ø–µ—Ä–µ–µ–∑–¥';
  return '—Å—Ç–∞–Ω–¥–∞—Ä—Ç';
}

// –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç—Ä–∞—Å–ª—å
function extractIndustry(filename) {
  const name = filename.replace('.html', '').replace(/-/g, ' ');
  return name;
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –±–ª–æ–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
function generateLinksBlock(currentPage) {
  let html = `
<!-- –ë–ª–æ–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∏ SEO -->
<section class="internal-links-section">
  <div class="container">
    <h2 class="section-title">–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
    <div class="links-grid">`;

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ö–æ–∂–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã (–∏–∑ —Ç–æ–≥–æ –∂–µ –≥–æ—Ä–æ–¥–∞)
  if (currentPage.type === 'route' && currentPage.fromCity) {
    const similarRoutes = PAGES_DATABASE.routes.filter(r => 
      r.fromCity === currentPage.fromCity && 
      r.url !== currentPage.url
    ).slice(0, 4);

    if (similarRoutes.length > 0) {
      html += `
      <div class="links-block">
        <h3>–ü–æ—Ö–æ–∂–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ ${getReadableCity(currentPage.fromCity)}</h3>
        <ul class="links-list">`;
      
      similarRoutes.forEach(route => {
        html += `
          <li><a href="${route.url}">${route.title}</a></li>`;
      });
      
      html += `
        </ul>
      </div>`;
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã
  if (PAGES_DATABASE.calculators.length > 0) {
    html += `
      <div class="links-block">
        <h3>–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å</h3>
        <ul class="links-list">`;
    
    PAGES_DATABASE.calculators.slice(0, 3).forEach(calc => {
      html += `
          <li><a href="${calc.url}">${calc.title}</a></li>`;
    });
    
    html += `
        </ul>
      </div>`;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –æ—Ç—Ä–∞—Å–ª–∏
  if (PAGES_DATABASE.industries.length > 0) {
    html += `
      <div class="links-block">
        <h3>–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏ –ø–æ –æ—Ç—Ä–∞—Å–ª—è–º</h3>
        <ul class="links-list">`;
    
    PAGES_DATABASE.industries.slice(0, 3).forEach(ind => {
      html += `
          <li><a href="${ind.url}">${ind.title}</a></li>`;
    });
    
    html += `
        </ul>
      </div>`;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—å–∏ –±–ª–æ–≥–∞
  html += `
      <div class="links-block">
        <h3>–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏</h3>
        <ul class="links-list">`;
  
  // –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
  const relevantArticles = selectRelevantArticles(currentPage);
  relevantArticles.forEach(article => {
    html += `
          <li><a href="${article.url}">${article.title}</a></li>`;
  });
  
  html += `
        </ul>
      </div>`;

  html += `
    </div>
  </div>
</section>

<style>
.internal-links-section {
  padding: 4rem 0;
  background-color: #f8f9fa;
  margin-top: 3rem;
}

.links-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 2rem;
  margin-top: 2rem;
}

.links-block {
  background: white;
  padding: 1.5rem;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.links-block h3 {
  font-size: 1.25rem;
  margin-bottom: 1rem;
  color: #2563eb;
}

.links-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

.links-list li {
  margin-bottom: 0.75rem;
}

.links-list a {
  color: #4b5563;
  text-decoration: none;
  display: flex;
  align-items: center;
  transition: color 0.3s ease;
}

.links-list a:before {
  content: "‚Üí";
  margin-right: 0.5rem;
  color: #2563eb;
}

.links-list a:hover {
  color: #2563eb;
}

@media (max-width: 768px) {
  .links-grid {
    grid-template-columns: 1fr;
  }
}
</style>
`;

  return html;
}

// –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
function getReadableCity(citySlug) {
  const cities = {
    'moskva': '–ú–æ—Å–∫–≤—ã',
    'spb': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞',
    'kazan': '–ö–∞–∑–∞–Ω–∏',
    'nizhniy-novgorod': '–ù–∏–∂–Ω–µ–≥–æ –ù–æ–≤–≥–æ—Ä–æ–¥–∞',
    'samara': '–°–∞–º–∞—Ä—ã',
    'voronezh': '–í–æ—Ä–æ–Ω–µ–∂–∞',
    'ekaterinburg': '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞',
    'chelyabinsk': '–ß–µ–ª—è–±–∏–Ω—Å–∫–∞',
    'rostov': '–†–æ—Å—Ç–æ–≤–∞-–Ω–∞-–î–æ–Ω—É'
  };
  return cities[citySlug] || citySlug;
}

// –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
function selectRelevantArticles(currentPage) {
  let relevant = [];
  
  // –î–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å-–ª–æ–∫–∞—Ü–∏—è–º–∏
  if (currentPage.url && (currentPage.url.includes('ozon') || currentPage.url.includes('wildberries'))) {
    relevant = PAGES_DATABASE.blog.filter(a => a.topic === '–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã');
  }
  // –î–ª—è –¥–∞–ª—å–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
  else if (currentPage.type === 'route') {
    relevant = PAGES_DATABASE.blog.filter(a => a.topic === '–º–µ–∂–≥–æ—Ä–æ–¥' || a.topic === '—ç–∫–æ–Ω–æ–º–∏—è');
  }
  // –î–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤
  else if (currentPage.type === 'calculator') {
    relevant = PAGES_DATABASE.blog.filter(a => a.topic === '—ç–∫–æ–Ω–æ–º–∏—è' || a.topic === '—Å—Ä–æ—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞');
  }
  
  // –ï—Å–ª–∏ –º–∞–ª–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
  if (relevant.length < 3) {
    const popular = PAGES_DATABASE.blog.filter(a => !relevant.includes(a));
    relevant = [...relevant, ...popular].slice(0, 3);
  }
  
  return relevant.slice(0, 3);
}

// –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
function addLinksToPage(pageInfo) {
  try {
    let content = fs.readFileSync(pageInfo.file, 'utf-8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –±–ª–æ–∫
    if (content.includes('internal-links-section')) {
      console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${pageInfo.file} - –±–ª–æ–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω`);
      return false;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const currentPage = {
      type: pageInfo.url.includes('/routes/') ? 'route' : 
            pageInfo.url.includes('/calculators/') ? 'calculator' : 'industry',
      url: pageInfo.url,
      fromCity: pageInfo.fromCity,
      toCity: pageInfo.toCity
    };
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–ª–æ–∫ —Å—Å—ã–ª–æ–∫
    const linksBlock = generateLinksBlock(currentPage);
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ —Ñ—É—Ç–µ—Ä–æ–º –∏–ª–∏ –≤ –∫–æ–Ω–µ—Ü body
    if (content.includes('</footer>')) {
      content = content.replace('</footer>', linksBlock + '\n</footer>');
    } else if (content.includes('</body>')) {
      content = content.replace('</body>', linksBlock + '\n</body>');
    } else {
      console.log(`‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω footer/body –≤ ${pageInfo.file}`);
      return false;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    fs.writeFileSync(pageInfo.file, content);
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –≤ ${pageInfo.file}`);
    return true;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${pageInfo.file}:`, error.message);
    return false;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üîó –ó–ê–ü–£–°–ö –í–ù–£–¢–†–ï–ù–ù–ï–ô –ü–ï–†–ï–õ–ò–ù–ö–û–í–ö–ò');
  console.log('==================================\n');
  
  // –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  console.log('üìä –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü...');
  scanPages();
  
  console.log(`\nüìà –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü:`);
  console.log(`   - –ú–∞—Ä—à—Ä—É—Ç—ã: ${PAGES_DATABASE.routes.length}`);
  console.log(`   - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã: ${PAGES_DATABASE.calculators.length}`);
  console.log(`   - –û—Ç—Ä–∞—Å–ª–∏: ${PAGES_DATABASE.industries.length}`);
  console.log(`   - –°—Ç–∞—Ç—å–∏ –±–ª–æ–≥–∞: ${PAGES_DATABASE.blog.length}`);
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  console.log('\nüîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫...\n');
  
  let processed = 0;
  let updated = 0;
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
  for (const page of PAGES_DATABASE.routes) {
    if (addLinksToPage(page)) updated++;
    processed++;
  }
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã
  for (const page of PAGES_DATABASE.calculators) {
    if (addLinksToPage(page)) updated++;
    processed++;
  }
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç—Ä–∞—Å–ª–∏
  for (const page of PAGES_DATABASE.industries) {
    if (addLinksToPage(page)) updated++;
    processed++;
  }
  
  console.log('\n‚ú® –ì–û–¢–û–í–û!');
  console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processed} —Å—Ç—Ä–∞–Ω–∏—Ü`);
  console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated} —Å—Ç—Ä–∞–Ω–∏—Ü`);
  console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${processed - updated} —Å—Ç—Ä–∞–Ω–∏—Ü`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main().catch(console.error);
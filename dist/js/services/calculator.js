// üöõ NextGen Smart Logistics Calculator
// –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–µ –ê–≤—Ç–æ–ì–û–°–¢ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
export class SmartLogisticsCalculator {
    constructor() {
        this.transportTypes = [
            {
                id: 'gazelle',
                name: '–ì–∞–∑–µ–ª—å',
                maxWeight: 1500,
                maxVolume: 16,
                density: 94, // 1500/16
                minPrice: { moscow: 12000, regions: 8500 },
                coefficient: 0.36,
                icon: 'üöê'
            },
            {
                id: 'threeTon',
                name: '3-—Ç–æ–Ω–Ω–∏–∫',
                maxWeight: 3000,
                maxVolume: 18,
                density: 167,
                minPrice: { moscow: 15000, regions: 11000 },
                coefficient: 0.46,
                icon: 'üöõ'
            },
            {
                id: 'fiveTon',
                name: '5-—Ç–æ–Ω–Ω–∏–∫',
                maxWeight: 5000,
                maxVolume: 36,
                density: 139,
                minPrice: { moscow: 22000, regions: 16500 },
                coefficient: 0.71,
                icon: 'üöõ'
            },
            {
                id: 'tenTon',
                name: '10-—Ç–æ–Ω–Ω–∏–∫',
                maxWeight: 10000,
                maxVolume: 50,
                density: 200,
                minPrice: { moscow: 28000, regions: 21000 },
                coefficient: 0.86,
                icon: 'üöö'
            },
            {
                id: 'truck',
                name: '–§—É—Ä–∞ 20—Ç',
                maxWeight: 20000,
                maxVolume: 82,
                density: 244,
                minPrice: { moscow: 35000, regions: 26000 },
                coefficient: 1.0,
                icon: 'üöö'
            }
        ];
        this.regions = new Map([
            ['–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', [
                    '–ú–æ—Å–∫–≤–∞', '–ü–æ–¥–æ–ª—å—Å–∫', '–•–∏–º–∫–∏', '–ë–∞–ª–∞—à–∏—Ö–∞', '–ú—ã—Ç–∏—â–∏', '–ö–æ—Ä–æ–ª—ë–≤',
                    '–õ—é–±–µ—Ä—Ü—ã', '–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫', '–û–¥–∏–Ω—Ü–æ–≤–æ', '–ì–æ–ª–∏—Ü—ã–Ω–æ', '–ü–æ–≤–∞—Ä–æ–≤–æ',
                    '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫', '–ö–æ–ª–æ–º–Ω–∞', '–°–µ—Ä–ø—É—Ö–æ–≤', '–©—ë–ª–∫–æ–≤–æ', '–î–æ–º–æ–¥–µ–¥–æ–≤–æ'
                ]],
            ['–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –∏ –æ–±–ª–∞—Å—Ç—å', [
                    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ì–∞—Ç—á–∏–Ω–∞', '–í—ã–±–æ—Ä–≥', '–í—Å–µ–≤–æ–ª–æ–∂—Å–∫', '–ö–æ–ª–ø–∏–Ω–æ',
                    '–ü—É—à–∫–∏–Ω', '–ü–µ—Ç–µ—Ä–≥–æ—Ñ', '–ö—Ä–æ–Ω—à—Ç–∞–¥—Ç'
                ]],
            ['–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', [
                    '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–î–∑–µ—Ä–∂–∏–Ω—Å–∫', '–ê—Ä–∑–∞–º–∞—Å', '–°–∞—Ä–æ–≤', '–ë–æ—Ä'
                ]]
        ]);
        // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ç–∏–ø–æ–≤ –≥—Ä—É–∑–∞ (–∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –ê–≤—Ç–æ–ì–û–°–¢)
        this.cargoFactors = new Map([
            ['general', 1.0],
            ['fragile', 1.3],
            ['valuable', 1.5],
            ['dangerous', 1.8],
            ['perishable', 1.4],
            ['oversized', 1.6]
        ]);
        this.urgencyFactors = new Map([
            ['standard', 1.0],
            ['urgent', 1.3], // +30% –∑–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç—å
            ['emergency', 1.8] // +80% –∑–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ—Å—Ç—å
        ]);
    }
    /**
     * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
     */
    calculatePrice(data) {
        try {
            // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const validationError = this.validateInput(data);
            if (validationError) {
                return validationError;
            }
            // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–Ω—É—Ç—Ä–∏—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–≤–æ–∑–∫—É
            const regionCheck = this.checkRegionRestriction(data.fromCity, data.toCity);
            if (regionCheck) {
                return regionCheck;
            }
            // 3. –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            const transport = this.selectOptimalTransport(data.weight, data.volume);
            if (!transport) {
                return this.createError('OVERWEIGHT', '–ì—Ä—É–∑ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–ø–µ—Ü—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç.', ['–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π', '–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Å–ø–µ—Ü—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞']);
            }
            // 4. –†–∞—Å—á–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞ –∏ –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã
            const route = this.calculateRoute(data.fromCity, data.toCity);
            const basePrice = this.calculateBasePrice(route.distance, transport);
            // 5. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
            const factors = this.calculatePriceFactors(data, transport, route);
            const finalPrice = this.applyFactors(basePrice, factors);
            // 6. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            return this.createSuccessResult(data, transport, route, finalPrice, factors);
        }
        catch (error) {
            console.error('Calculator error:', error);
            return this.createError('API_ERROR', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.', ['–û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞', '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º: +7 916 272-09-32']);
        }
    }
    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    validateInput(data) {
        if (!data.fromCity || data.fromCity.trim().length < 2) {
            return this.createError('INVALID_ROUTE', '–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
        }
        if (!data.toCity || data.toCity.trim().length < 2) {
            return this.createError('INVALID_ROUTE', '–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è');
        }
        if (data.fromCity.toLowerCase() === data.toCity.toLowerCase()) {
            return this.createError('INVALID_ROUTE', '–ì–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å');
        }
        if (data.weight <= 0 || data.weight > 25000) {
            return this.createError('OVERWEIGHT', '–í–µ—Å –≥—Ä—É–∑–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 25000 –∫–≥');
        }
        if (data.volume !== undefined && (data.volume <= 0 || data.volume > 100)) {
            return this.createError('INVALID_ROUTE', '–û–±—ä–µ–º –≥—Ä—É–∑–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.1 –¥–æ 100 –º¬≥');
        }
        return null;
    }
    /**
     * –í–ê–ñ–ù–û–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï: –°–±–æ—Ä–Ω—ã–µ –≥—Ä—É–∑—ã —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏!
     */
    checkRegionRestriction(fromCity, toCity) {
        const fromRegion = this.getCityRegion(fromCity);
        const toRegion = this.getCityRegion(toCity);
        if (fromRegion && toRegion && fromRegion === toRegion) {
            const alternativePrice = this.calculateFullTruckPrice(fromCity, toCity);
            return {
                success: false,
                error: '–í–ù–ò–ú–ê–ù–ò–ï! –°–±–æ—Ä–Ω—ã–µ –≥—Ä—É–∑—ã —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏. –í–Ω—É—Ç—Ä–∏ —Ä–µ–≥–∏–æ–Ω–∞ - —Ç–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞!',
                code: 'SAME_REGION',
                alternativePrice,
                suggestions: [
                    '–ó–∞–∫–∞–∑–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –º–∞—à–∏–Ω—É',
                    '–î–æ–∂–¥–∞—Ç—å—Å—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –¥–ª—è –º–µ–∂—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏',
                    '–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π'
                ]
            };
        }
        return null;
    }
    /**
     * –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
     */
    selectOptimalTransport(weight, volume) {
        for (const transport of this.transportTypes) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –≤–µ—Å—É (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            if (weight <= transport.maxWeight) {
                // –ï—Å–ª–∏ –æ–±—ä–µ–º —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –µ–≥–æ
                if (volume !== undefined) {
                    const density = weight / volume;
                    if (volume <= transport.maxVolume && density <= transport.density * 1.2) {
                        return transport;
                    }
                }
                else {
                    // –ï—Å–ª–∏ –æ–±—ä–µ–º –Ω–µ —É–∫–∞–∑–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º –ø–æ –≤–µ—Å—É
                    return transport;
                }
            }
        }
        return null;
    }
    /**
     * –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã –ø–æ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂—É (–∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –ê–≤—Ç–æ–ì–û–°–¢)
     */
    calculateBasePrice(distance, transport) {
        let pricePerKm;
        // –õ–æ–≥–∏–∫–∞ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é (–∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)
        if (distance < 50) {
            pricePerKm = 700; // –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã - –¥–æ—Ä–æ–≥–æ!
        }
        else if (distance < 100) {
            pricePerKm = 280;
        }
        else if (distance < 200) {
            pricePerKm = 200;
        }
        else if (distance < 500) {
            pricePerKm = 150;
        }
        else {
            pricePerKm = 100; // –î–∞–ª—å–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã - –¥–µ—à–µ–≤–ª–µ –∑–∞ –∫–º
        }
        let basePrice = distance * pricePerKm;
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ —Ñ—É—Ä–∞, –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        if (transport.coefficient < 1.0) {
            basePrice = basePrice * transport.coefficient;
        }
        return basePrice;
    }
    /**
     * –†–∞—Å—á–µ—Ç –≤—Å–µ—Ö —Ü–µ–Ω–æ–≤—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
     */
    calculatePriceFactors(data, transport, route) {
        const loadFactor = this.calculateLoadFactor(data.weight, data.volume, transport);
        const routeFactor = this.getRouteFactor(data.fromCity, data.toCity);
        const cargoFactor = this.cargoFactors.get(data.cargoType) ?? 1.0;
        const urgencyFactor = this.urgencyFactors.get(data.urgency) ?? 1.0;
        const seasonFactor = this.getSeasonFactor();
        const demandFactor = this.getDemandFactor(route);
        return {
            basePrice: this.calculateBasePrice(route.distance, transport),
            loadFactor,
            routeFactor,
            cargoFactor,
            urgencyFactor,
            seasonFactor,
            demandFactor
        };
    }
    /**
     * –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ (—á–µ–º –º–µ–Ω—å—à–µ –≥—Ä—É–∑, —Ç–µ–º –¥–æ—Ä–æ–∂–µ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É)
     */
    calculateLoadFactor(weight, volume, transport) {
        const weightUsage = weight / transport.maxWeight;
        if (volume !== undefined) {
            const volumeUsage = volume / transport.maxVolume;
            const maxUsage = Math.max(weightUsage, volumeUsage);
            if (maxUsage < 0.3)
                return 1.5; // –º–µ–Ω–µ–µ 30% - –¥–æ—Ä–æ–≥–æ
            if (maxUsage < 0.5)
                return 1.3; // –º–µ–Ω–µ–µ 50%
            if (maxUsage < 0.7)
                return 1.1; // –º–µ–Ω–µ–µ 70%
            return 1.0; // –±–æ–ª–µ–µ 70% - –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
        }
        else {
            if (weightUsage < 0.3)
                return 1.4;
            if (weightUsage < 0.5)
                return 1.2;
            if (weightUsage < 0.7)
                return 1.05;
            return 1.0;
        }
    }
    /**
     * –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞
     */
    getRouteFactor(from, to) {
        const popularRoutes = [
            ['–º–æ—Å–∫–≤–∞', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥'],
            ['–º–æ—Å–∫–≤–∞', '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥'],
            ['–º–æ—Å–∫–≤–∞', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'],
            ['–º–æ—Å–∫–≤–∞', '–∫–∞–∑–∞–Ω—å']
        ];
        const fromLower = from.toLowerCase();
        const toLower = to.toLowerCase();
        for (const [city1, city2] of popularRoutes) {
            if ((city1 && city2 && fromLower.includes(city1) && toLower.includes(city2)) ||
                (city1 && city2 && fromLower.includes(city2) && toLower.includes(city1))) {
                return 0.9; // —Å–∫–∏–¥–∫–∞ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
            }
        }
        // –û–±—Ä–∞—Ç–∫–∞ –¥–µ—à–µ–≤–ª–µ
        if (toLower.includes('–º–æ—Å–∫–≤–∞') || toLower.includes('—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥')) {
            return 0.95;
        }
        return 1.0;
    }
    /**
     * –°–µ–∑–æ–Ω–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
     */
    getSeasonFactor() {
        const month = new Date().getMonth();
        // –ó–∏–º–Ω–∏–µ –º–µ—Å—è—Ü—ã –¥–æ—Ä–æ–∂–µ –∏–∑-–∑–∞ —Å–ª–æ–∂–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        if (month === 11 || month === 0 || month === 1)
            return 1.1;
        // –í–µ—Å–µ–Ω–Ω–µ-–ª–µ—Ç–Ω–∏–π –ø–µ—Ä–∏–æ–¥ - –±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã
        return 1.0;
    }
    /**
     * –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–ø—Ä–æ—Å–∞ (–º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å ML –≤ –±—É–¥—É—â–µ–º)
     */
    getDemandFactor(route) {
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞, –≤ –±—É–¥—É—â–µ–º - ML –º–æ–¥–µ–ª—å
        switch (route.popularity) {
            case 'high': return 1.1;
            case 'medium': return 1.0;
            case 'low': return 0.95;
            default: return 1.0;
        }
    }
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∫ –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω–µ
     */
    applyFactors(basePrice, factors) {
        let finalPrice = basePrice;
        finalPrice *= factors.loadFactor;
        finalPrice *= factors.routeFactor;
        finalPrice *= factors.cargoFactor;
        finalPrice *= factors.urgencyFactor;
        finalPrice *= factors.seasonFactor;
        finalPrice *= factors.demandFactor;
        // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –∫—Ä–∞—Å–∏–≤–æ–π —Ü–∏—Ñ—Ä—ã
        return Math.round(finalPrice / 500) * 500;
    }
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
     */
    createSuccessResult(data, transport, route, price, factors) {
        const deliveryTime = this.calculateDeliveryTime(route.distance);
        return {
            success: true,
            price,
            pricePerKm: Math.round(price / route.distance),
            transport,
            route,
            deliveryTime,
            factors,
            details: {
                weight: data.weight,
                volume: data.volume || undefined,
                density: data.volume ? Math.round(data.weight / data.volume) : undefined,
                loadPercent: Math.round((data.weight / transport.maxWeight) * 100),
                volumePercent: data.volume ? Math.round((data.volume / transport.maxVolume) * 100) : undefined
            },
            restrictions: this.getRestrictions(data),
            recommendations: this.getRecommendations(data, factors)
        };
    }
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
     */
    createError(code, message, suggestions) {
        return {
            success: false,
            error: message,
            code,
            suggestions: suggestions || undefined
        };
    }
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã...
    getCityRegion(cityName) {
        const city = cityName.toLowerCase();
        for (const [region, cities] of this.regions) {
            if (cities.some(c => c.toLowerCase().includes(city) || city.includes(c.toLowerCase()))) {
                return region;
            }
        }
        return null;
    }
    calculateRoute(fromCity, toCity) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞
        // –í production - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Maps/Yandex API
        const distance = this.getDistanceByRoute(fromCity, toCity);
        return {
            from: this.createCityData(fromCity),
            to: this.createCityData(toCity),
            distance,
            estimatedTime: Math.round(distance / 80), // –ø—Ä–∏–º–µ—Ä–Ω–æ 80 –∫–º/—á —Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å
            popularity: this.getRoutePopularity(fromCity, toCity)
        };
    }
    createCityData(cityName) {
        const region = this.getCityRegion(cityName) ?? '–î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω';
        const isMarketplaceHub = this.isMarketplaceHub(cityName);
        return {
            name: cityName,
            region,
            coordinates: [0, 0], // –í production - —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            isMarketplaceHub,
            deliveryZone: this.getDeliveryZone(cityName),
            timezone: 'Europe/Moscow'
        };
    }
    getDistanceByRoute(from, to) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –±–∞–∑–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π (–∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –ê–≤—Ç–æ–ì–û–°–¢)
        const routes = new Map([
            ['–º–æ—Å–∫–≤–∞-—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥', 700],
            ['–º–æ—Å–∫–≤–∞-–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥', 400],
            ['–º–æ—Å–∫–≤–∞-–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', 1400],
            ['–º–æ—Å–∫–≤–∞-–∫–∞–∑–∞–Ω—å', 800],
            ['–º–æ—Å–∫–≤–∞-—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É', 1100],
            ['–º–æ—Å–∫–≤–∞-–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', 3300]
        ]);
        const routeKey = `${from.toLowerCase()}-${to.toLowerCase()}`;
        const reverseKey = `${to.toLowerCase()}-${from.toLowerCase()}`;
        return routes.get(routeKey) ?? routes.get(reverseKey) ?? 500;
    }
    getRoutePopularity(from, to) {
        const popularCities = ['–º–æ—Å–∫–≤–∞', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–∫–∞–∑–∞–Ω—å'];
        const fromLower = from.toLowerCase();
        const toLower = to.toLowerCase();
        if (popularCities.some(city => fromLower.includes(city)) &&
            popularCities.some(city => toLower.includes(city))) {
            return 'high';
        }
        return 'medium';
    }
    isMarketplaceHub(cityName) {
        const hubs = ['–∫–æ–ª–µ–¥–∏–Ω–æ', '—Å–æ—Ñ—å–∏–Ω–æ', '–±–µ–ª—ã–µ —Å—Ç–æ–ª–±—ã', '—Ç–≤–µ—Ä—å'];
        return hubs.some(hub => cityName.toLowerCase().includes(hub));
    }
    getDeliveryZone(cityName) {
        const city = cityName.toLowerCase();
        if (city.includes('–º–æ—Å–∫–≤–∞') || city.includes('–º–æ—Å–∫–æ–≤—Å–∫'))
            return 'moscow';
        if (city.includes('—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥') || city.includes('—Å–ø–±'))
            return 'spb';
        return 'federal';
    }
    calculateDeliveryTime(distance) {
        if (distance < 500)
            return '1-2 –¥–Ω—è';
        if (distance < 1000)
            return '2-3 –¥–Ω—è';
        if (distance < 2000)
            return '3-4 –¥–Ω—è';
        if (distance < 3000)
            return '4-5 –¥–Ω–µ–π';
        return '5-7 –¥–Ω–µ–π';
    }
    calculateFullTruckPrice(from, to) {
        const distance = this.getDistanceByRoute(from, to);
        const basePrice = 25000; // –º–∏–Ω–∏–º—É–º –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã
        const kmPrice = distance < 50 ? 500 : 200;
        return Math.max(basePrice, distance * kmPrice);
    }
    getRestrictions(data) {
        const restrictions = [];
        if (data.cargoType === 'dangerous') {
            restrictions.push('–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É –æ–ø–∞—Å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤');
        }
        if (data.cargoType === 'valuable') {
            restrictions.push('–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞');
        }
        if (data.weight > 10000) {
            restrictions.push('–í–æ–∑–º–æ–∂–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –º–∞—Ä—à—Ä—É—Ç—É –¥–ª—è —Ç—è–∂–µ–ª—ã—Ö –≥—Ä—É–∑–æ–≤');
        }
        return restrictions;
    }
    getRecommendations(data, factors) {
        const recommendations = [];
        if (factors.loadFactor > 1.3) {
            recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—é —Å –¥—Ä—É–≥–∏–º–∏ –≥—Ä—É–∑–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏');
        }
        if (data.urgency === 'emergency') {
            recommendations.push('–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤');
        }
        if (factors.seasonFactor > 1.0) {
            recommendations.push('–í –∑–∏–º–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –≤–æ–∑–º–æ–∂–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏ –∏–∑-–∑–∞ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π');
        }
        return recommendations;
    }
}
//# sourceMappingURL=calculator.js.map
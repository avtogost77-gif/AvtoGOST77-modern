// üö® –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô JAVASCRIPT BUNDLE –î–õ–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ)
class OptimizedCalculator {
    constructor() {
        this.init();
    }
    
    init() {
        const form = document.getElementById('calculatorForm');
        if (form) {
            form.addEventListener('submit', this.handleSubmit.bind(this));
            this.initAutocomplete();
        }
    }
    
    handleSubmit(e) {
        e.preventDefault();
        const formData = new FormData(e.target);
        const result = this.calculate(formData);
        this.showResult(result);
    }
    
    calculate(formData) {
        const from = formData.get('fromCity') || '';
        const to = formData.get('toCity') || '';
        const weight = parseFloat(formData.get('weight')) || 0;
        const volume = parseFloat(formData.get('volume')) || 0;
        const isConsolidated = formData.get('consolidated') === 'yes';
        
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        let price = Math.max(weight * 0.5, volume * 1000, 5000);
        if (isConsolidated) price *= 0.65;
        
        return {
            price: Math.round(price),
            from,
            to,
            weight,
            volume,
            isConsolidated
        };
    }
    
    showResult(result) {
        const resultEl = document.getElementById('calculatorResult');
        const priceEl = document.getElementById('calculatedPrice');
        
        if (resultEl && priceEl) {
            priceEl.textContent = result.price.toLocaleString() + ' ‚ÇΩ';
            resultEl.style.display = 'block';
            resultEl.scrollIntoView({ behavior: 'smooth' });
        }
    }
    
    initAutocomplete() {
        const cities = ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å'];
        const inputs = document.querySelectorAll('input[name="fromCity"], input[name="toCity"]');
        
        inputs.forEach(input => {
            input.addEventListener('input', (e) => {
                const value = e.target.value.toLowerCase();
                const suggestions = cities.filter(city => 
                    city.toLowerCase().includes(value)
                ).slice(0, 3);
                
                // –ü—Ä–æ—Å—Ç–æ–µ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
                if (suggestions.length === 1 && value.length > 2) {
                    e.target.value = suggestions[0];
                }
            });
        });
    }
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
class OptimizedNavigation {
    constructor() {
        this.init();
    }
    
    init() {
        this.initMobileMenu();
        this.initSmoothScroll();
    }
    
    initMobileMenu() {
        const menuBtn = document.querySelector('.mobile-menu-btn');
        const menu = document.querySelector('.mobile-menu');
        
        if (menuBtn && menu) {
            menuBtn.addEventListener('click', () => {
                menu.classList.toggle('active');
            });
        }
    }
    
    initSmoothScroll() {
        const links = document.querySelectorAll('a[href^="#"]');
        links.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const target = document.querySelector(link.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({ behavior: 'smooth' });
                }
            });
        });
    }
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
class OptimizedForms {
    constructor() {
        this.init();
    }
    
    init() {
        this.initContactForm();
        this.initPriceFreeze();
    }
    
    initContactForm() {
        const form = document.getElementById('contactForm');
        if (form) {
            form.addEventListener('submit', this.handleContactSubmit.bind(this));
        }
    }
    
    async handleContactSubmit(e) {
        e.preventDefault();
        const formData = new FormData(e.target);
        
        try {
            // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            if (typeof sendToTelegram === 'function') {
                const message = `
üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>
üë§ <b>–ò–º—è:</b> ${formData.get('name')}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${formData.get('phone')}
üìß <b>Email:</b> ${formData.get('email') || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${formData.get('message') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                `;
                sendToTelegram(message, 'contact-form');
            }
            
            this.showSuccess('–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
            e.target.reset();
        } catch (error) {
            this.showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }
    
    initPriceFreeze() {
        const form = document.getElementById('priceFreezeForm');
        if (form) {
            form.addEventListener('submit', this.handlePriceFreeze.bind(this));
        }
    }
    
    async handlePriceFreeze(e) {
        e.preventDefault();
        const formData = new FormData(e.target);
        
        try {
            // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∑–∞–º–æ—Ä–æ–∑–∫–∞ —Ü–µ–Ω—ã
            this.showSuccess('–¶–µ–Ω–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.');
            e.target.reset();
        } catch (error) {
            this.showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }
    
    showSuccess(message) {
        this.showNotification(message, 'success');
    }
    
    showError(message) {
        this.showNotification(message, 'error');
    }
    
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 10001;
            max-width: 400px;
        `;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 5000);
    }
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ)
class OptimizedAnalytics {
    constructor() {
        this.init();
    }
    
    init() {
        this.trackClicks();
        this.trackForms();
    }
    
    trackClicks() {
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –∫–ª–∏–∫–∏
        const importantLinks = document.querySelectorAll('a[href^="tel:"], a[href*="wa.me"]');
        importantLinks.forEach(link => {
            link.addEventListener('click', () => {
                this.sendEvent('click', link.href);
            });
        });
    }
    
    trackForms() {
        const forms = document.querySelectorAll('form');
        forms.forEach(form => {
            form.addEventListener('submit', () => {
                this.sendEvent('form_submit', form.id || 'unknown');
            });
        });
    }
    
    sendEvent(action, label) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π
        if (typeof gtag !== 'undefined') {
            gtag('event', action, { event_label: label });
        }
        if (typeof ym !== 'undefined') {
            ym(103413788, 'reachGoal', action, { label });
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    new OptimizedCalculator();
    new OptimizedNavigation();
    new OptimizedForms();
    new OptimizedAnalytics();
});

// –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—è–∂–µ–ª—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
window.addEventListener('load', function() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—è–∂–µ–ª—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const lazyImages = document.querySelectorAll('img[data-src]');
    lazyImages.forEach(img => {
        img.src = img.dataset.src;
        img.classList.remove('lazy');
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
    setTimeout(() => {
        // AOS –∞–Ω–∏–º–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
        if (typeof AOS !== 'undefined') {
            AOS.init();
        }
    }, 2000);
});

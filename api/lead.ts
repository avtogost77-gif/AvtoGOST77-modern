/**
 * üÜì Serverless Lead Processing - Vercel Function
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–¥–æ–≤ –ë–ï–ó —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å Supabase + Telegram!
 */

import type { VercelRequest, VercelResponse } from '@vercel/node';
import { z } from 'zod';

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ª–∏–¥–∞ (152-–§–ó compliance)
const LeadSchema = z.object({
  name: z.string().min(2).max(100),
  phone: z.string().regex(/^\+7\d{10}$/, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'),
  email: z.string().email().optional(),
  message: z.string().max(1000).optional(),
  calculationData: z.object({
    fromCity: z.string(),
    toCity: z.string(),
    cargoType: z.string(),
    weight: z.number(),
    volume: z.number(),
    price: z.number()
  }).optional(),
  
  // 152-–§–ó –†–§ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  consent: z.boolean().refine(val => val === true, {
    message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
  }),
  
  // UTM –º–µ—Ç–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  utmData: z.object({
    source: z.string().optional(),
    medium: z.string().optional(),
    campaign: z.string().optional(),
    term: z.string().optional(),
    content: z.string().optional()
  }).optional(),
  
  // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
  userAgent: z.string().optional(),
  referrer: z.string().optional(),
  timezone: z.string().optional()
});

// –°–æ–∑–¥–∞–Ω–∏–µ Supabase –∫–ª–∏–µ–Ω—Ç–∞ (edge-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π)
const createSupabaseClient = () => {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_ANON_KEY;
  
  if (!supabaseUrl || !supabaseKey) {
    throw new Error('Supabase credentials not configured');
  }
  
  return {
    url: supabaseUrl,
    key: supabaseKey,
    
    // –ü—Ä–æ—Å—Ç–æ–π REST –∫–ª–∏–µ–Ω—Ç –¥–ª—è edge runtime
    async insert(table: string, data: any) {
      const response = await fetch(`${supabaseUrl}/rest/v1/${table}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${supabaseKey}`,
          'apikey': supabaseKey,
          'Prefer': 'return=representation'
        },
        body: JSON.stringify(data)
      });
      
      if (!response.ok) {
        throw new Error(`Supabase error: ${response.statusText}`);
      }
      
      return response.json();
    }
  };
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
const sendTelegramNotification = async (leadData: any) => {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;
  
  if (!botToken || !chatId) {
    console.warn('Telegram credentials not configured');
    return null;
  }
  
  const message = `
üî• <b>–ù–û–í–´–ô –õ–ò–î!</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${leadData.name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${leadData.phone}
${leadData.email ? `üìß <b>Email:</b> ${leadData.email}` : ''}

${leadData.calculationData ? `
üöõ <b>–ó–ê–Ø–í–ö–ê:</b>
üìç <b>–û—Ç–∫—É–¥–∞:</b> ${leadData.calculationData.fromCity}
üìç <b>–ö—É–¥–∞:</b> ${leadData.calculationData.toCity}
üì¶ <b>–ì—Ä—É–∑:</b> ${leadData.calculationData.cargoType}
‚öñÔ∏è <b>–í–µ—Å:</b> ${leadData.calculationData.weight} –∫–≥
üìè <b>–û–±—ä–µ–º:</b> ${leadData.calculationData.volume} –º¬≥
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${leadData.calculationData.price.toLocaleString()} ‚ÇΩ
` : ''}

${leadData.message ? `üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n${leadData.message}` : ''}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}

üéØ <b>–ü–ï–†–ï–ó–í–û–ù–ò–¢–¨ –í –¢–ï–ß–ï–ù–ò–ï 15 –ú–ò–ù–£–¢!</b>
  `.trim();
  
  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML',
        disable_web_page_preview: true
      })
    });
    
    if (!response.ok) {
      throw new Error(`Telegram API error: ${response.statusText}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('Telegram notification failed:', error);
    return null;
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ email —á–µ—Ä–µ–∑ EmailJS (fallback)
const sendEmailNotification = async (leadData: any) => {
  // EmailJS –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å frontend –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  // –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  console.log('Email notification would be sent for lead:', leadData.name);
  return true;
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–¥–∞
const processLead = async (leadData: z.infer<typeof LeadSchema>, metadata: any) => {
  const supabase = createSupabaseClient();
  
  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const leadRecord = {
    name: leadData.name,
    phone: leadData.phone,
    email: leadData.email || null,
    message: leadData.message || null,
    calculation_data: leadData.calculationData || null,
    
    // 152-–§–ó –ø–æ–ª—è
    consent_given: leadData.consent,
    consent_date: new Date().toISOString(),
    consent_ip: metadata.ip,
    consent_user_agent: metadata.userAgent || leadData.userAgent || null,
    
    // UTM –º–µ—Ç–∫–∏
    utm_source: leadData.utmData?.source || null,
    utm_medium: leadData.utmData?.medium || null,
    utm_campaign: leadData.utmData?.campaign || null,
    utm_term: leadData.utmData?.term || null,
    utm_content: leadData.utmData?.content || null,
    
    // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    referrer: leadData.referrer || null,
    timezone: leadData.timezone || 'Europe/Moscow',
    created_at: new Date().toISOString(),
    
    // –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    status: 'NEW',
    priority: leadData.calculationData ? 'HIGH' : 'NORMAL'
  };
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase
  const savedLead = await supabase.insert('leads', leadRecord);
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const [telegramResult, emailResult] = await Promise.allSettled([
    sendTelegramNotification(leadData),
    sendEmailNotification(leadData)
  ]);
  
  return {
    leadId: savedLead[0]?.id || 'unknown',
    notifications: {
      telegram: telegramResult.status === 'fulfilled',
      email: emailResult.status === 'fulfilled'
    }
  };
};

// Rate limiting –≤ –ø–∞–º—è—Ç–∏ (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
const rateLimitMap = new Map<string, { count: number; resetTime: number }>();

const checkRateLimit = (ip: string, limit: number = 5, windowMs: number = 15 * 60 * 1000): boolean => {
  const now = Date.now();
  const entry = rateLimitMap.get(ip);
  
  if (!entry || now > entry.resetTime) {
    rateLimitMap.set(ip, { count: 1, resetTime: now + windowMs });
    return true;
  }
  
  if (entry.count >= limit) {
    return false;
  }
  
  entry.count++;
  return true;
};

// Edge Runtime
export const config = {
  runtime: 'edge',
};

export default async function handler(
  req: VercelRequest,
  res: VercelResponse
) {
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  // Handle preflight
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }
  
  // Only allow POST
  if (req.method !== 'POST') {
    res.status(405).json({ error: 'Method not allowed' });
    return;
  }
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º IP –¥–ª—è rate limiting
    const clientIp = req.headers['x-forwarded-for']?.toString() || 
                     req.headers['x-real-ip']?.toString() || 
                     'unknown';
    
    // Rate limiting
    if (!checkRateLimit(clientIp)) {
      res.status(429).json({
        success: false,
        error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞—è–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç.'
      });
      return;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const leadData = LeadSchema.parse(req.body);
    
    // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    const metadata = {
      ip: clientIp,
      userAgent: req.headers['user-agent'],
      timestamp: new Date().toISOString()
    };
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–¥–∞
    const result = await processLead(leadData, metadata);
    
    // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.status(200).json({
      success: true,
      message: '–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ü–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.',
      leadId: result.leadId,
      notifications: result.notifications,
      timestamp: metadata.timestamp
    });
    
  } catch (error) {
    console.error('Lead processing error:', error);
    
    if (error instanceof z.ZodError) {
      res.status(400).json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞—è–≤–∫–µ',
        details: error.errors.map(e => ({
          field: e.path.join('.'),
          message: e.message
        }))
      });
    } else {
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        message: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }
}
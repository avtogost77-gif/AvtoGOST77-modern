/**
 * üÜì Serverless Calculator API - Vercel Function
 * –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ë–ï–ó —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–æ–∫!
 */

import type { VercelRequest, VercelResponse } from '@vercel/node';
import { z } from 'zod';

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const CalculationSchema = z.object({
  fromCity: z.string().min(2).max(100),
  toCity: z.string().min(2).max(100),
  cargoType: z.enum(['GENERAL', 'FURNITURE', 'APPLIANCES', 'FRAGILE', 'HEAVY']),
  weight: z.number().min(1).max(20000),
  volume: z.number().min(0.1).max(100),
  urgent: z.boolean().optional(),
  insurance: z.boolean().optional()
});

// –¢–∞—Ä–∏—Ñ–Ω–∞—è —Å–µ—Ç–∫–∞ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ)
const PRICING_MATRIX = {
  // –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–∫–º)
  distances: {
    '–ú–æ—Å–∫–≤–∞-–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 635,
    '–ú–æ—Å–∫–≤–∞-–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 1416,
    '–ú–æ—Å–∫–≤–∞-–ö–∞–∑–∞–Ω—å': 719,
    '–ú–æ—Å–∫–≤–∞-–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': 411,
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥-–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 1766,
    // ... –¥–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  },
  
  // –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∫–º (‚ÇΩ)
  pricePerKm: {
    GENERAL: 25,
    FURNITURE: 35,
    APPLIANCES: 40,
    FRAGILE: 45,
    HEAVY: 50
  },
  
  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
  multipliers: {
    urgent: 1.5,
    insurance: 1.1,
    nightTime: 1.2,
    weekend: 1.15
  },
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
  minimumPrice: 3000
};

// –ì–µ–æ–∫–æ–¥–∏–Ω–≥ (–∑–∞–≥–ª—É—à–∫–∞ - –≤ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Nominatim)
const getCityCoordinates = async (city: string) => {
  const coordinates = {
    '–ú–æ—Å–∫–≤–∞': { lat: 55.7558, lon: 37.6176 },
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': { lat: 59.9311, lon: 30.3609 },
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': { lat: 56.8431, lon: 60.6454 },
    '–ö–∞–∑–∞–Ω—å': { lat: 55.8304, lon: 49.0661 },
    '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': { lat: 56.2965, lon: 43.9361 }
  };
  
  return coordinates[city as keyof typeof coordinates] || null;
};

// –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏ (—Ñ–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–æ–≤)
const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
  const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
            Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
            Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c;
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á–µ—Ç–∞
const calculatePrice = async (data: z.infer<typeof CalculationSchema>) => {
  const { fromCity, toCity, cargoType, weight, volume, urgent, insurance } = data;
  
  // 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–æ–≤
  const fromCoords = await getCityCoordinates(fromCity);
  const toCoords = await getCityCoordinates(toCity);
  
  if (!fromCoords || !toCoords) {
    throw new Error('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  }
  
  // 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
  const distance = calculateDistance(
    fromCoords.lat, fromCoords.lon,
    toCoords.lat, toCoords.lon
  );
  
  // 3. –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
  const pricePerKm = PRICING_MATRIX.pricePerKm[cargoType];
  let basePrice = distance * pricePerKm;
  
  // 4. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞ –æ–±—ä–µ–º/–≤–µ—Å
  const volumeCoeff = Math.max(1, volume / 10); // –ó–∞ –∫–∞–∂–¥—ã–µ 10 –º¬≥
  const weightCoeff = Math.max(1, weight / 1000); // –ó–∞ –∫–∞–∂–¥—É—é —Ç–æ–Ω–Ω—É
  basePrice *= Math.max(volumeCoeff, weightCoeff);
  
  // 5. –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏
  if (urgent) {
    basePrice *= PRICING_MATRIX.multipliers.urgent;
  }
  
  if (insurance) {
    basePrice *= PRICING_MATRIX.multipliers.insurance;
  }
  
  // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
  const finalPrice = Math.max(basePrice, PRICING_MATRIX.minimumPrice);
  
  // 7. –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
  const deliveryTime = Math.ceil(distance / 500); // 500 –∫–º –≤ –¥–µ–Ω—å
  const urgentTime = urgent ? Math.ceil(deliveryTime / 2) : deliveryTime;
  
  return {
    price: Math.round(finalPrice),
    distance: Math.round(distance),
    deliveryTime: urgentTime,
    breakdown: {
      basePrice: Math.round(basePrice),
      urgentSurcharge: urgent ? Math.round(basePrice * 0.5) : 0,
      insuranceCost: insurance ? Math.round(basePrice * 0.1) : 0,
      minimumApplied: finalPrice === PRICING_MATRIX.minimumPrice
    },
    route: {
      from: fromCity,
      to: toCity,
      fromCoords,
      toCoords
    },
    cargo: {
      type: cargoType,
      weight,
      volume
    }
  };
};

// Edge Runtime –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
export const config = {
  runtime: 'edge',
};

export default async function handler(
  req: VercelRequest,
  res: VercelResponse
) {
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  // Handle preflight
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }
  
  // Only allow POST
  if (req.method !== 'POST') {
    res.status(405).json({ error: 'Method not allowed' });
    return;
  }
  
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const data = CalculationSchema.parse(req.body);
    
    // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    const calculation = await calculatePrice(data);
    
    // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 1 —á–∞—Å
    res.setHeader('Cache-Control', 's-maxage=3600, stale-while-revalidate');
    
    // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.status(200).json({
      success: true,
      data: calculation,
      timestamp: new Date().toISOString(),
      cached: false
    });
    
  } catch (error) {
    console.error('Calculation error:', error);
    
    if (error instanceof z.ZodError) {
      res.status(400).json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
        details: error.errors
      });
    } else {
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
        message: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }
}
// ========================================
// Smart Calculator V3 with AI
// Based on original business logic
// ========================================

class SmartCalculator {
    constructor() {
        // Transport types with real parameters
        this.transportTypes = {
            gazelle: {
                name: '–ì–∞–∑–µ–ª—å',
                maxWeight: 1500,
                maxVolume: 16,
                density: 94,
                minPrice: 10000,
                minPriceRegion: 7500,
                coefficient: 0.36,
                icon: 'üöê'
            },
            threeTon: {
                name: '3-—Ç–æ–Ω–Ω–∏–∫',
                maxWeight: 3000,
                maxVolume: 18,
                density: 167,
                minPrice: 13000,
                minPriceRegion: 9750,
                coefficient: 0.46,
                icon: 'üöõ'
            },
            fiveTon: {
                name: '5-—Ç–æ–Ω–Ω–∏–∫',
                maxWeight: 5000,
                maxVolume: 36,
                density: 139,
                minPrice: 20000,
                minPriceRegion: 15000,
                coefficient: 0.71,
                icon: 'üöõ'
            },
            tenTon: {
                name: '10-—Ç–æ–Ω–Ω–∏–∫',
                maxWeight: 10000,
                maxVolume: 50,
                density: 200,
                minPrice: 24000,
                minPriceRegion: 18000,
                coefficient: 0.86,
                icon: 'üöö'
            },
            truck: {
                name: '–§—É—Ä–∞ 20—Ç',
                maxWeight: 20000,
                maxVolume: 82,
                density: 244,
                minPrice: 28000,
                minPriceRegion: 21000,
                coefficient: 1.0,
                icon: 'üöö'
            }
        };
        
        // Real price examples
        this.realPrices = {
            '–ú–æ—Å–∫–≤–∞-–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': { distance: 700, price: 70000, pricePerKm: 100 },
            '–ú–æ—Å–∫–≤–∞-–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': { distance: 400, price: 60000, pricePerKm: 150 },
            '–ú–æ—Å–∫–≤–∞-–ö–∞–∑–∞–Ω—å': { distance: 800, price: 80000, pricePerKm: 100 },
            '–ú–æ—Å–∫–≤–∞-–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': { distance: 1400, price: 140000, pricePerKm: 100 }
        };
        
        // Regions for internal delivery check
        this.regions = {
            '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': [
                '–ú–æ—Å–∫–≤–∞', '–ü–æ–¥–æ–ª—å—Å–∫', '–•–∏–º–∫–∏', '–ë–∞–ª–∞—à–∏—Ö–∞', '–ú—ã—Ç–∏—â–∏', '–ö–æ—Ä–æ–ª—ë–≤',
                '–õ—é–±–µ—Ä—Ü—ã', '–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫', '–û–¥–∏–Ω—Ü–æ–≤–æ', '–ì–æ–ª–∏—Ü—ã–Ω–æ', '–ö–æ–ª–æ–º–Ω–∞'
            ],
            '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –∏ –æ–±–ª–∞—Å—Ç—å': [
                '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ì–∞—Ç—á–∏–Ω–∞', '–í—ã–±–æ—Ä–≥', '–í—Å–µ–≤–æ–ª–æ–∂—Å–∫', '–ö–æ–ª–ø–∏–Ω–æ'
            ]
        };
        
        this.init();
    }
    
    init() {
        // Initialize calculator form
        const form = document.getElementById('calculatorForm');
        if (form) {
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleFormCalculation();
            });
        }
        
        // Initialize cities datalist
        this.setupCitiesDatalist();
    }
    
    calculatePrice(fromCity, toCity, weight, volume = 0, cargoType = 'general') {
        // Check same region
        if (this.isSameRegion(fromCity, toCity)) {
            return {
                error: true,
                message: '–í–Ω–∏–º–∞–Ω–∏–µ! –°–±–æ—Ä–Ω—ã–µ –≥—Ä—É–∑—ã —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏. –í–Ω—É—Ç—Ä–∏ —Ä–µ–≥–∏–æ–Ω–∞ - —Ç–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞!',
                alternativePrice: this.calculateFullTruckPrice(fromCity, toCity)
            };
        }
        
        // Select optimal transport
        const transport = this.selectOptimalTransport(weight, volume);
        if (!transport) {
            return {
                error: true,
                message: '–ì—Ä—É–∑ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –¥–∞–∂–µ –≤ —Ñ—É—Ä—É! –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–ø–µ—Ü—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç.'
            };
        }
        
        // Get distance
        const distance = this.getDistance(fromCity, toCity);
        
        // Calculate base price
        let pricePerKm;
        if (distance < 50) {
            pricePerKm = 700;
        } else if (distance < 100) {
            pricePerKm = 280;
        } else if (distance < 200) {
            pricePerKm = 200;
        } else if (distance < 500) {
            pricePerKm = 150;
        } else {
            pricePerKm = 100;
        }
        
        let basePrice = distance * pricePerKm;
        
        // Apply transport coefficient
        if (transport.name !== '–§—É—Ä–∞ 20—Ç') {
            basePrice = basePrice * transport.coefficient;
        }
        
        // Apply minimum price
        const isMoscow = fromCity.includes('–ú–æ—Å–∫–≤') || toCity.includes('–ú–æ—Å–∫–≤');
        const minPrice = isMoscow ? transport.minPrice : transport.minPriceRegion;
        basePrice = Math.max(basePrice, minPrice);
        
        // Load factor
        const loadFactor = this.calculateLoadFactor(weight, volume, transport);
        basePrice *= loadFactor;
        
        // Route factor
        const routeFactor = this.getRouteFactor(fromCity, toCity);
        basePrice *= routeFactor;
        
        // Cargo type factor
        const cargoFactor = this.getCargoFactor(cargoType);
        basePrice *= cargoFactor;
        
        // Round to nice number
        const finalPrice = Math.round(basePrice / 500) * 500;
        
        return {
            success: true,
            price: finalPrice,
            transport: transport.name,
            icon: transport.icon,
            distance: distance,
            pricePerKm: Math.round(finalPrice / distance),
            deliveryTime: this.calculateDeliveryTime(distance),
            details: {
                weight,
                volume,
                density: volume > 0 ? Math.round(weight / volume) : 0,
                loadPercent: Math.round((weight / transport.maxWeight) * 100),
                volumePercent: volume > 0 ? Math.round((volume / transport.maxVolume) * 100) : 0
            }
        };
    }
    
    isSameRegion(city1, city2) {
        for (const [region, cities] of Object.entries(this.regions)) {
            if (cities.includes(city1) && cities.includes(city2)) {
                return true;
            }
        }
        return false;
    }
    
    selectOptimalTransport(weight, volume) {
        const transports = Object.values(this.transportTypes).sort((a, b) => a.maxWeight - b.maxWeight);
        
        for (const transport of transports) {
            if (weight <= transport.maxWeight) {
                if (volume && volume > 0) {
                    if (volume <= transport.maxVolume) {
                        return transport;
                    }
                } else {
                    return transport;
                }
            }
        }
        return null;
    }
    
    calculateLoadFactor(weight, volume, transport) {
        const weightUsage = weight / transport.maxWeight;
        const volumeUsage = volume > 0 ? volume / transport.maxVolume : 0;
        const maxUsage = Math.max(weightUsage, volumeUsage);
        
        if (maxUsage < 0.3) return 1.5;
        if (maxUsage < 0.5) return 1.3;
        if (maxUsage < 0.7) return 1.1;
        return 1.0;
    }
    
    getRouteFactor(from, to) {
        const popularRoutes = [
            ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'],
            ['–ú–æ—Å–∫–≤–∞', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥'],
            ['–ú–æ—Å–∫–≤–∞', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'],
            ['–ú–æ—Å–∫–≤–∞', '–ö–∞–∑–∞–Ω—å']
        ];
        
        for (const route of popularRoutes) {
            if ((route.includes(from) && route.includes(to))) {
                return 0.9;
            }
        }
        
        if (to === '–ú–æ—Å–∫–≤–∞' || to === '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥') {
            return 0.95;
        }
        
        return 1.0;
    }
    
    getCargoFactor(cargoType) {
        const factors = {
            'general': 1.0,
            'fragile': 1.3,
            'valuable': 1.5,
            'dangerous': 1.8,
            'perishable': 1.4,
            'furniture': 1.2,
            'appliance': 1.2,
            'documents': 0.8
        };
        return factors[cargoType] || 1.0;
    }
    
    calculateDeliveryTime(distance) {
        if (distance < 500) return '1-2 –¥–Ω—è';
        if (distance < 1000) return '2-3 –¥–Ω—è';
        if (distance < 2000) return '3-4 –¥–Ω—è';
        if (distance < 3000) return '4-5 –¥–Ω–µ–π';
        return '5-7 –¥–Ω–µ–π';
    }
    
    calculateFullTruckPrice(from, to) {
        const distance = this.getDistance(from, to) || 50;
        const basePrice = 20000;
        const kmPrice = distance < 50 ? 500 : 200;
        return Math.max(basePrice, distance * kmPrice);
    }
    
    getDistance(from, to) {
        const routes = {
            '–ú–æ—Å–∫–≤–∞-–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 700,
            '–ú–æ—Å–∫–≤–∞-–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': 400,
            '–ú–æ—Å–∫–≤–∞-–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 1400,
            '–ú–æ—Å–∫–≤–∞-–ö–∞–∑–∞–Ω—å': 800,
            '–ú–æ—Å–∫–≤–∞-–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É': 1100,
            '–ú–æ—Å–∫–≤–∞-–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 3300
        };
        
        const routeKey = `${from}-${to}`;
        const reverseKey = `${to}-${from}`;
        
        return routes[routeKey] || routes[reverseKey] || 500;
    }
    
    handleFormCalculation() {
        const fromCity = document.getElementById('fromCity')?.value || '';
        const toCity = document.getElementById('toCity')?.value || '';
        const weight = parseFloat(document.getElementById('weight')?.value || 0);
        const volume = parseFloat(document.getElementById('volume')?.value || 0);
        
        if (!fromCity || !toCity || !weight) {
            showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –æ—Ç–∫—É–¥–∞, –∫—É–¥–∞ –∏ –≤–µ—Å –≥—Ä—É–∑–∞', 'error');
            return;
        }
        
        const result = this.calculatePrice(fromCity, toCity, weight, volume);
        
        if (result.error) {
            showNotification(result.message, 'error');
            if (result.alternativePrice) {
                this.showAlternativePrice(result.alternativePrice);
            }
        } else {
            this.showCalculationResults(result);
        }
    }
    
    showCalculationResults(result) {
        const resultsDiv = document.getElementById('calcResults');
        if (!resultsDiv) return;
        
        // Update main price card
        const priceCards = resultsDiv.querySelectorAll('.price-card');
        if (priceCards[0]) {
            priceCards[0].querySelector('.transport-icon').textContent = result.icon;
            priceCards[0].querySelector('.transport-name').textContent = result.transport;
            priceCards[0].querySelector('.price-value').textContent = result.price.toLocaleString() + '‚ÇΩ';
            
            // Update details
            const details = priceCards[0].querySelector('.price-details');
            if (details) {
                details.innerHTML = `
                    <span>üöõ –¥–æ ${result.details.weight} –∫–≥</span>
                    <span>üìè ${result.details.loadPercent}% –∑–∞–≥—Ä—É–∑–∫–∏</span>
                    <span>‚è±Ô∏è ${result.deliveryTime}</span>
                `;
            }
        }
        
        // Update route info
        document.getElementById('routeValue').textContent = 
            `${document.getElementById('fromCity').value} ‚Üí ${document.getElementById('toCity').value}`;
        document.getElementById('distanceValue').textContent = `${result.distance} –∫–º`;
        document.getElementById('timeValue').textContent = result.deliveryTime;
        
        // Show results
        resultsDiv.style.display = 'block';
        scrollToElement('#calcResults');
    }
    
    setupCitiesDatalist() {
        const cities = [
            '–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
            '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ö–∞–∑–∞–Ω—å', '–ß–µ–ª—è–±–∏–Ω—Å–∫', '–°–∞–º–∞—Ä–∞', '–û–º—Å–∫',
            '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', '–£—Ñ–∞', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–í–æ—Ä–æ–Ω–µ–∂', '–ü–µ—Ä–º—å',
            '–í–æ–ª–≥–æ–≥—Ä–∞–¥', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', '–°–∞—Ä–∞—Ç–æ–≤', '–¢—é–º–µ–Ω—å', '–¢–æ–ª—å—è—Ç—Ç–∏',
            '–ò–∂–µ–≤—Å–∫', '–ë–∞—Ä–Ω–∞—É–ª', '–£–ª—å—è–Ω–æ–≤—Å–∫', '–ò—Ä–∫—É—Ç—Å–∫', '–•–∞–±–∞—Ä–æ–≤—Å–∫',
            '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', '–Ø—Ä–æ—Å–ª–∞–≤–ª—å', '–ú–∞—Ö–∞—á–∫–∞–ª–∞', '–¢–æ–º—Å–∫', '–û—Ä–µ–Ω–±—É—Ä–≥',
            '–ö–µ–º–µ—Ä–æ–≤–æ', '–†—è–∑–∞–Ω—å', '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å', '–ü–µ–Ω–∑–∞', '–õ–∏–ø–µ—Ü–∫',
            '–¢—É–ª–∞', '–ö–∏—Ä–æ–≤', '–ß–µ–±–æ–∫—Å–∞—Ä—ã', '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥', '–ë—Ä—è–Ω—Å–∫',
            '–ö—É—Ä—Å–∫', '–ò–≤–∞–Ω–æ–≤–æ', '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å', '–ë–µ–ª–≥–æ—Ä–æ–¥', '–°–æ—á–∏'
        ];
        
        const datalist = document.createElement('datalist');
        datalist.id = 'cities-list';
        
        cities.forEach(city => {
            const option = document.createElement('option');
            option.value = city;
            datalist.appendChild(option);
        });
        
        document.body.appendChild(datalist);
    }
}

// Voice input for calculator
function startCalculatorVoice() {
    const voiceBtn = document.querySelector('.big-voice-btn');
    const voiceText = voiceBtn?.querySelector('.voice-text');
    
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
        showNotification('–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ', 'error');
        return;
    }
    
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SpeechRecognition();
    
    recognition.lang = 'ru-RU';
    recognition.continuous = false;
    recognition.interimResults = true;
    
    if (voiceBtn) {
        voiceBtn.classList.add('listening');
        if (voiceText) voiceText.textContent = '–°–ª—É—à–∞—é...';
    }
    
    recognition.start();
    
    recognition.onresult = (event) => {
        const transcript = Array.from(event.results)
            .map(result => result[0].transcript)
            .join('');
        
        if (voiceText) voiceText.textContent = transcript || '–°–ª—É—à–∞—é...';
    };
    
    recognition.onend = () => {
        if (voiceBtn) voiceBtn.classList.remove('listening');
        if (voiceText) {
            const finalText = voiceText.textContent;
            voiceText.textContent = '–ù–∞–∂–º–∏—Ç–µ –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ';
            
            if (finalText && finalText !== '–°–ª—É—à–∞—é...' && finalText !== '–ù–∞–∂–º–∏—Ç–µ –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ') {
                processCalculatorText(finalText);
            }
        }
    };
    
    recognition.onerror = (event) => {
        console.error('Speech recognition error:', event.error);
        if (voiceBtn) voiceBtn.classList.remove('listening');
        if (voiceText) voiceText.textContent = '–ù–∞–∂–º–∏—Ç–µ –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ';
        showNotification('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error');
    };
}

// Process calculator text input
function processCalculatorText(text) {
    const textarea = document.getElementById('calcTextInput');
    if (!textarea) {
        // If not in text mode, switch to it
        switchInputMode('type');
        setTimeout(() => {
            const textarea = document.getElementById('calcTextInput');
            if (textarea) {
                textarea.value = text || '';
                processCalculatorTextSubmit();
            }
        }, 100);
    } else {
        textarea.value = text || textarea.value;
        processCalculatorTextSubmit();
    }
}

// Submit calculator text
function processCalculatorTextSubmit() {
    const text = document.getElementById('calcTextInput')?.value || '';
    if (!text.trim()) return;
    
    // Update AI message
    const aiMessage = document.getElementById('aiMessage');
    if (aiMessage) {
        aiMessage.innerHTML = `<p>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é: "${text}"...</p>`;
    }
    
    // Parse and calculate
    setTimeout(() => {
        parseAndFillCalculator(text);
    }, 1000);
}

// Handle photo upload
document.addEventListener('DOMContentLoaded', () => {
    const photoInput = document.getElementById('cargo-photo');
    if (photoInput) {
        photoInput.addEventListener('change', handlePhotoUpload);
    }
});

function handlePhotoUpload(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    const preview = document.getElementById('uploadPreview');
    const previewImage = document.getElementById('previewImage');
    const uploadZone = document.getElementById('photoUploadZone');
    
    if (preview && previewImage) {
        const reader = new FileReader();
        reader.onload = (e) => {
            previewImage.src = e.target.result;
            preview.style.display = 'block';
            uploadZone.querySelector('.upload-label').style.display = 'none';
            
            // Simulate AI analysis
            analyzeCargoPhoto();
        };
        reader.readAsDataURL(file);
    }
}

function analyzeCargoPhoto() {
    const analysis = document.getElementById('aiAnalysis');
    if (!analysis) return;
    
    // Show analyzing
    analysis.style.display = 'block';
    
    // Simulate analysis
    setTimeout(() => {
        analysis.innerHTML = `
            <div class="analysis-result">
                <h4>AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</h4>
                <p>–¢–∏–ø –≥—Ä—É–∑–∞: <strong>–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞</strong></p>
                <p>–†–∞–∑–º–µ—Ä—ã: <strong>~180x60x60 —Å–º</strong></p>
                <p>–í–µ—Å: <strong>~60-80 –∫–≥</strong></p>
                <p>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: <strong>–ì–∞–∑–µ–ª—å —Å –≥—Ä—É–∑—á–∏–∫–∞–º–∏</strong></p>
            </div>
        `;
        
        // Update AI message
        const aiMessage = document.getElementById('aiMessage');
        if (aiMessage) {
            aiMessage.innerHTML = `<p>–û—Ç–ª–∏—á–Ω–æ! –Ø –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–∑–∞ –ø–æ —Ñ–æ—Ç–æ. –≠—Ç–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫, –Ω—É–∂–Ω–∞ –≥–∞–∑–µ–ª—å —Å –≥—Ä—É–∑—á–∏–∫–∞–º–∏. –£–∫–∞–∂–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞.</p>`;
        }
    }, 2000);
}

// Order transport
function orderTransport(type) {
    showNotification('üìû –ó–≤–æ–Ω–∏—Ç–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: +7 916 272-09-32', 'info');
    
    // Open chat with pre-filled message
    setTimeout(() => {
        openAIChat();
        const input = document.getElementById('chatInput');
        if (input) {
            input.value = `–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å ${type === 'gazelle' ? '–≥–∞–∑–µ–ª—å' : type} –ø–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É`;
            sendChatMessage();
        }
    }, 2000);
}

// Initialize calculator
const calculator = new SmartCalculator();

// Add listening state styles
const calculatorStyles = `
<style>
.big-voice-btn.listening {
    background: var(--accent);
    animation: pulse 1.5s infinite;
}

.big-voice-btn.listening .voice-waves span {
    background: white;
    animation-duration: 0.5s;
}

.analysis-result {
    background: rgba(0, 212, 170, 0.1);
    padding: 1rem;
    border-radius: 8px;
    margin-top: 1rem;
}

.analysis-result h4 {
    color: var(--accent);
    margin: 0 0 0.5rem;
}

.analysis-result p {
    margin: 0.25rem 0;
}
</style>
`;

document.head.insertAdjacentHTML('beforeend', calculatorStyles);
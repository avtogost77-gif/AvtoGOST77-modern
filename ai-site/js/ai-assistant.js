// ========================================
// AI Chat Assistant
// ========================================

let chatHistory = [];
let isTyping = false;

// Open AI Chat
function openAIChat() {
    const overlay = document.getElementById('aiChatOverlay');
    if (overlay) {
        overlay.classList.add('active');
        
        // Focus input
        setTimeout(() => {
            document.getElementById('chatInput')?.focus();
        }, 300);
        
        // Initialize chat if first time
        if (chatHistory.length === 0) {
            addAIMessage('–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–ª–æ–≥–∏—Å—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', true);
        }
    }
}

// Close AI Chat
function closeAIChat() {
    const overlay = document.getElementById('aiChatOverlay');
    if (overlay) {
        overlay.classList.remove('active');
    }
}

// Handle chat enter key
function handleChatEnter(event) {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        sendChatMessage();
    }
}

// Send chat message
function sendChatMessage() {
    const input = document.getElementById('chatInput');
    if (!input || !input.value.trim() || isTyping) return;
    
    const message = input.value.trim();
    input.value = '';
    
    // Add user message
    addUserMessage(message);
    
    // Process message
    processUserMessage(message);
}

// Add user message to chat
function addUserMessage(message) {
    const messagesDiv = document.getElementById('chatMessages');
    if (!messagesDiv) return;
    
    const messageDiv = document.createElement('div');
    messageDiv.className = 'chat-message user';
    messageDiv.innerHTML = `<p>${escapeHtml(message)}</p>`;
    
    messagesDiv.appendChild(messageDiv);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
    
    chatHistory.push({ role: 'user', content: message });
}

// Add AI message to chat
function addAIMessage(message, withQuickReplies = false) {
    const messagesDiv = document.getElementById('chatMessages');
    if (!messagesDiv) return;
    
    const messageDiv = document.createElement('div');
    messageDiv.className = 'chat-message ai';
    
    let html = `<p>${message}</p>`;
    
    if (withQuickReplies) {
        html += `
            <div class="quick-replies">
                <button onclick="sendQuickReply('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å')">üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å</button>
                <button onclick="sendQuickReply('–°—Ä–æ—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞')">üö® –°—Ä–æ—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞</button>
                <button onclick="sendQuickReply('–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è')">üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</button>
            </div>
        `;
    }
    
    messageDiv.innerHTML = html;
    
    // Add typing animation
    messageDiv.style.opacity = '0';
    messagesDiv.appendChild(messageDiv);
    
    // Show typing indicator
    showTypingIndicator();
    
    setTimeout(() => {
        hideTypingIndicator();
        messageDiv.style.opacity = '1';
        messageDiv.style.transition = 'opacity 0.3s ease';
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }, 1000);
    
    chatHistory.push({ role: 'assistant', content: message });
}

// Process user message
function processUserMessage(message) {
    isTyping = true;
    
    // Simulate AI processing delay
    setTimeout(() => {
        const response = generateAIResponse(message);
        addAIMessage(response);
        isTyping = false;
    }, 1500);
}

// Generate AI response based on message
function generateAIResponse(message) {
    const lowerMessage = message.toLowerCase();
    
    // Price/calculator keywords
    if (lowerMessage.includes('—Ü–µ–Ω') || lowerMessage.includes('—Å—Ç–æ–∏–º–æ—Å—Ç') || 
        lowerMessage.includes('—Å–∫–æ–ª—å–∫–æ') || lowerMessage.includes('—Ç–∞—Ä–∏—Ñ') ||
        lowerMessage.includes('—Ä–∞—Å—Å—á–∏—Ç')) {
        return '–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å:\n' +
               'üìç –û—Ç–∫—É–¥–∞ –∏ –∫—É–¥–∞ –≤–µ–∑–µ–º\n' +
               'üì¶ –í–µ—Å –∏ –æ–±—ä–µ–º –≥—Ä—É–∑–∞\n' +
               'üöõ –¢–∏–ø –≥—Ä—É–∑–∞\n\n' +
               '–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º AI-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∑–¥–µ—Å—å.';
    }
    
    // Urgent delivery
    if (lowerMessage.includes('—Å—Ä–æ—á–Ω') || lowerMessage.includes('–±—ã—Å—Ç—Ä') || 
        lowerMessage.includes('—Å–µ–≥–æ–¥–Ω—è') || lowerMessage.includes('2 —á–∞—Å–∞')) {
        return 'üö® –°—Ä–æ—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ - –Ω–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è!\n\n' +
               '‚ö° –ü–æ–¥–∞—á–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∑–∞ 2 —á–∞—Å–∞ –≤ –ú–æ—Å–∫–≤–µ\n' +
               'üíØ –ì–∞—Ä–∞–Ω—Ç–∏—è –ø–æ–¥–∞—á–∏\n' +
               'üìû –ü—Ä—è–º–∞—è —Å–≤—è–∑—å —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º\n\n' +
               '–ù–∞—Ü–µ–Ω–∫–∞ –≤—Å–µ–≥–æ +30% –∫ –±–∞–∑–æ–≤–æ–º—É —Ç–∞—Ä–∏—Ñ—É.\n' +
               '–ó–≤–æ–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å: +7 916 272-09-32';
    }
    
    // Marketplace delivery
    if (lowerMessage.includes('wildberries') || lowerMessage.includes('–≤–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑') ||
        lowerMessage.includes('–æ–∑–æ–Ω') || lowerMessage.includes('ozon') ||
        lowerMessage.includes('–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å')) {
        return 'üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã:\n\n' +
               '‚úÖ Wildberries (–ö–æ–ª–µ–¥–∏–Ω–æ, –≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å)\n' +
               '‚úÖ Ozon (–¢–≤–µ—Ä—å, –•–æ—Ä—É–≥–≤–∏–Ω–æ)\n' +
               '‚úÖ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç\n\n' +
               '–¢–∞—Ä–∏—Ñ—ã –∏–∑ –ú–æ—Å–∫–≤—ã:\n' +
               'üöê –ì–∞–∑–µ–ª—å: –æ—Ç 8,000‚ÇΩ\n' +
               'üöõ 3-—Ç–æ–Ω–Ω–∏–∫: –æ—Ç 15,000‚ÇΩ\n' +
               'üöö 5-—Ç–æ–Ω–Ω–∏–∫: –æ—Ç 22,000‚ÇΩ\n\n' +
               '–ó–Ω–∞–µ–º –≤—Å–µ —Ç–æ–Ω–∫–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤!';
    }
    
    // Remote logistics department
    if (lowerMessage.includes('—É–¥–∞–ª–µ–Ω–Ω') || lowerMessage.includes('–æ—Ç–¥–µ–ª') ||
        lowerMessage.includes('–∞—É—Ç—Å–æ—Ä—Å') || lowerMessage.includes('–ª–æ–≥–∏—Å—Ç')) {
        return 'üè¢ –£–¥–∞–ª–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª –ª–æ–≥–∏—Å—Ç–∏–∫–∏ - —ç—Ç–æ:\n\n' +
               'üí∞ –≠–∫–æ–Ω–æ–º–∏—è –¥–æ 4 –º–ª–Ω ‚ÇΩ/–≥–æ–¥\n' +
               'üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä\n' +
               'üìä –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n' +
               'üîÑ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –ø–æ–¥ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏\n\n' +
               '–¢–∞—Ä–∏—Ñ—ã:\n' +
               '‚Ä¢ –ë–∞–∑–æ–≤—ã–π: 15,000‚ÇΩ/–º–µ—Å\n' +
               '‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç: 35,000‚ÇΩ/–º–µ—Å\n' +
               '‚Ä¢ –ü—Ä–µ–º–∏—É–º: 60,000‚ÇΩ/–º–µ—Å\n\n' +
               '–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤—ã —Å—ç–∫–æ–Ω–æ–º–∏—Ç–µ?';
    }
    
    // Cities
    if (lowerMessage.includes('–≥–æ—Ä–æ–¥') || lowerMessage.includes('–∫—É–¥–∞') ||
        lowerMessage.includes('–º–∞—Ä—à—Ä—É—Ç')) {
        return '–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏! üá∑üá∫\n\n' +
               '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n' +
               '‚Ä¢ –ú–æ—Å–∫–≤–∞ ‚Üî –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\n' +
               '‚Ä¢ –ú–æ—Å–∫–≤–∞ ‚Üî –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥\n' +
               '‚Ä¢ –ú–æ—Å–∫–≤–∞ ‚Üî –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥\n' +
               '‚Ä¢ –ú–æ—Å–∫–≤–∞ ‚Üî –ö–∞–∑–∞–Ω—å\n\n' +
               '–ë–∞–∑–∞ –≤–∫–ª—é—á–∞–µ—Ç 146+ –≥–æ—Ä–æ–¥–æ–≤. –ù–∞–∑–æ–≤–∏—Ç–µ –≤–∞—à –º–∞—Ä—à—Ä—É—Ç!';
    }
    
    // Transport types
    if (lowerMessage.includes('—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç') || lowerMessage.includes('–º–∞—à–∏–Ω') ||
        lowerMessage.includes('–≥–∞–∑–µ–ª—å') || lowerMessage.includes('—Ñ—É—Ä')) {
        return '–ù–∞—à –∞–≤—Ç–æ–ø–∞—Ä–∫:\n\n' +
               'üöê –ì–∞–∑–µ–ª—å (–¥–æ 1.5—Ç / 16–º¬≥)\n' +
               'üöõ 3-—Ç–æ–Ω–Ω–∏–∫ (–¥–æ 3—Ç / 18–º¬≥)\n' +
               'üöõ 5-—Ç–æ–Ω–Ω–∏–∫ (–¥–æ 5—Ç / 36–º¬≥)\n' +
               'üöö 10-—Ç–æ–Ω–Ω–∏–∫ (–¥–æ 10—Ç / 50–º¬≥)\n' +
               'üöö –§—É—Ä–∞ 20—Ç (–¥–æ 20—Ç / 82–º¬≥)\n\n' +
               '–ü–æ–¥–±–µ—Ä–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ø–æ–¥ –≤–∞—à –≥—Ä—É–∑!';
    }
    
    // Contact/order
    if (lowerMessage.includes('–∑–∞–∫–∞–∑') || lowerMessage.includes('–æ—Ñ–æ—Ä–º') ||
        lowerMessage.includes('—Å–≤—è–∑') || lowerMessage.includes('–∑–≤–æ–Ω')) {
        return '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ:\n\n' +
               'üìû –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: +7 916 272-09-32\n' +
               'üí¨ WhatsApp: wa.me/79162720932\n' +
               '‚úàÔ∏è Telegram: @avtogost77_bot\n\n' +
               '–ò–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –ø—Ä—è–º–æ –∑–¥–µ—Å—å - –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è –∑–∞ 5 –º–∏–Ω—É—Ç!';
    }
    
    // Default response
    return '–Ø –ø–æ–º–æ–≥—É —Å –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–æ–º –ø–æ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∞–º!\n\n' +
           '–ú–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å, –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å—Ä–æ—á–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É.\n\n' +
           '–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?';
}

// Send quick reply
function sendQuickReply(text) {
    const input = document.getElementById('chatInput');
    if (input) {
        input.value = text;
        sendChatMessage();
    }
}

// Start chat voice input
function startChatVoice() {
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
        showNotification('–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ', 'error');
        return;
    }
    
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SpeechRecognition();
    
    recognition.lang = 'ru-RU';
    recognition.continuous = false;
    recognition.interimResults = false;
    
    const voiceBtn = document.querySelector('.chat-voice-btn');
    if (voiceBtn) {
        voiceBtn.style.background = 'var(--accent)';
        voiceBtn.style.color = 'white';
    }
    
    recognition.start();
    
    recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        const input = document.getElementById('chatInput');
        if (input) {
            input.value = transcript;
            sendChatMessage();
        }
    };
    
    recognition.onend = () => {
        if (voiceBtn) {
            voiceBtn.style.background = '';
            voiceBtn.style.color = '';
        }
    };
    
    recognition.onerror = (event) => {
        console.error('Speech recognition error:', event.error);
        if (voiceBtn) {
            voiceBtn.style.background = '';
            voiceBtn.style.color = '';
        }
    };
}

// Show typing indicator
function showTypingIndicator() {
    const messagesDiv = document.getElementById('chatMessages');
    if (!messagesDiv) return;
    
    const typingDiv = document.createElement('div');
    typingDiv.className = 'chat-message ai typing-indicator';
    typingDiv.id = 'typingIndicator';
    typingDiv.innerHTML = `
        <div class="typing-dots">
            <span></span>
            <span></span>
            <span></span>
        </div>
    `;
    
    messagesDiv.appendChild(typingDiv);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

// Hide typing indicator
function hideTypingIndicator() {
    const indicator = document.getElementById('typingIndicator');
    if (indicator) {
        indicator.remove();
    }
}

// Escape HTML
function escapeHtml(text) {
    const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return text.replace(/[&<>"']/g, m => map[m]);
}

// Add typing indicator styles
const typingStyles = `
<style>
.typing-indicator {
    opacity: 0.7;
}

.typing-dots {
    display: inline-flex;
    gap: 4px;
    padding: 12px 16px;
}

.typing-dots span {
    width: 8px;
    height: 8px;
    background: var(--gray-600);
    border-radius: 50%;
    animation: typing 1.4s infinite;
}

.typing-dots span:nth-child(1) { animation-delay: 0s; }
.typing-dots span:nth-child(2) { animation-delay: 0.2s; }
.typing-dots span:nth-child(3) { animation-delay: 0.4s; }

@keyframes typing {
    0%, 60%, 100% {
        transform: translateY(0);
        opacity: 0.7;
    }
    30% {
        transform: translateY(-10px);
        opacity: 1;
    }
}
</style>
`;

document.head.insertAdjacentHTML('beforeend', typingStyles);
// Схема базы данных для АвтоГОСТ Future 2030

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Пользователи (клиенты)
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  phone       String   @unique
  name        String
  company     String?
  inn         String?
  type        UserType @default(INDIVIDUAL)
  status      UserStatus @default(ACTIVE)
  
  // Согласие на обработку данных (152-ФЗ)
  dataConsent Boolean @default(false)
  consentDate DateTime?
  
  // Метаданные
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastActive  DateTime @default(now())
  
  // Связи
  orders      Order[]
  reviews     Review[]
  sessions    UserSession[]
  analytics   UserAnalytics[]
  
  @@map("users")
}

enum UserType {
  INDIVIDUAL  // Физлицо
  BUSINESS    // ИП/ООО
  MARKETPLACE // Поставщик на маркетплейсы
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

// Сессии пользователей
model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  userAgent String?
  ip        String?
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
}

// Заказы на перевозку
model Order {
  id           String      @id @default(cuid())
  userId       String
  orderNumber  String      @unique
  status       OrderStatus @default(PENDING)
  
  // Маршрут
  fromCity     String
  fromAddress  String?
  toCity       String
  toAddress    String?
  distance     Float?
  
  // Груз
  cargoType    CargoType
  weight       Float       // кг
  volume       Float       // м³
  description  String?
  value        Float?      // стоимость груза
  isFragile    Boolean     @default(false)
  
  // Транспорт
  vehicleType  VehicleType
  
  // Время
  pickupDate   DateTime
  deliveryDate DateTime?
  urgentOrder  Boolean     @default(false) // Спот-заявка
  
  // Цена
  price        Float?
  pricePerKm   Float?
  currency     String      @default("RUB")
  
  // Исполнитель
  carrierId    String?
  driverName   String?
  driverPhone  String?
  vehicleNumber String?
  
  // Метаданные
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  // Связи
  user         User        @relation(fields: [userId], references: [id])
  carrier      Carrier?    @relation(fields: [carrierId], references: [id])
  tracking     Tracking[]
  payments     Payment[]
  
  @@map("orders")
}

enum OrderStatus {
  PENDING      // Ожидает обработки
  CONFIRMED    // Подтвержден
  ASSIGNED     // Назначен перевозчик
  IN_TRANSIT   // В пути
  DELIVERED    // Доставлен
  CANCELLED    // Отменен
  FAILED       // Сорван
}

enum CargoType {
  GENERAL      // Обычный груз
  FURNITURE    // Мебель
  APPLIANCES   // Техника
  DOCUMENTS    // Документы
  FOOD         // Продукты
  FRAGILE      // Хрупкий
  OVERSIZED    // Негабарит
  HAZARDOUS    // Опасный
}

enum VehicleType {
  GAZELLE      // Газель
  TRUCK_3T     // Грузовик 3т
  TRUCK_5T     // Грузовик 5т
  TRUCK_10T    // Грузовик 10т
  SEMI_TRAILER // Фура
  VAN          // Фургон
  MINIVAN      // Микроавтобус
}

// Перевозчики
model Carrier {
  id           String        @id @default(cuid())
  name         String
  inn          String        @unique
  phone        String
  email        String?
  rating       Float         @default(5.0)
  ordersCount  Int           @default(0)
  status       CarrierStatus @default(ACTIVE)
  
  // Специализация
  cities       String[]      // Города работы
  vehicles     VehicleType[] // Типы транспорта
  
  // Финансы
  balance      Float         @default(0)
  commission   Float         @default(15) // % комиссии
  
  // Метаданные
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  lastActive   DateTime      @default(now())
  
  // Связи
  orders       Order[]
  reviews      Review[]
  
  @@map("carriers")
}

enum CarrierStatus {
  ACTIVE
  INACTIVE
  BLOCKED
  PENDING_VERIFICATION
}

// Отслеживание заказов
model Tracking {
  id        String        @id @default(cuid())
  orderId   String
  status    TrackingStatus
  location  String?
  comment   String?
  timestamp DateTime      @default(now())
  
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@map("tracking")
}

enum TrackingStatus {
  ORDER_CREATED
  CARRIER_ASSIGNED
  PICKUP_STARTED
  CARGO_LOADED
  IN_TRANSIT
  DELIVERY_STARTED
  DELIVERED
  CANCELLED
}

// Платежи
model Payment {
  id            String        @id @default(cuid())
  orderId       String
  amount        Float
  currency      String        @default("RUB")
  status        PaymentStatus @default(PENDING)
  method        String?       // card, transfer, cash
  transactionId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  order Order @relation(fields: [orderId], references: [id])
  
  @@map("payments")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

// Отзывы
model Review {
  id         String   @id @default(cuid())
  userId     String
  carrierId  String?
  orderId    String?
  rating     Int      // 1-5
  comment    String?
  isPublic   Boolean  @default(true)
  
  createdAt  DateTime @default(now())
  
  user    User     @relation(fields: [userId], references: [id])
  carrier Carrier? @relation(fields: [carrierId], references: [id])
  
  @@map("reviews")
}

// Лиды из калькулятора
model Lead {
  id          String     @id @default(cuid())
  name        String
  phone       String
  email       String?
  
  // Данные расчета
  fromCity    String
  toCity      String
  cargoType   CargoType
  weight      Float
  volume      Float
  estimatedPrice Float?
  
  // Согласие на обработку данных
  dataConsent Boolean    @default(false)
  
  // Статус обработки
  status      LeadStatus @default(NEW)
  assignedTo  String?    // ID менеджера
  
  // UTM метки
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@map("leads")
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  LOST
}

// Аналитика пользователей
model UserAnalytics {
  id           String   @id @default(cuid())
  userId       String
  event        String   // hero_cta_click, calculation_completed, etc
  data         Json?    // Дополнительные данные события
  userAgent    String?
  ip           String?
  referer      String?
  
  createdAt    DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_analytics")
}

// Калькулятор тарифов
model PricingRule {
  id           String      @id @default(cuid())
  name         String
  fromCity     String
  toCity       String
  vehicleType  VehicleType
  basePrice    Float       // Базовая цена
  pricePerKm   Float       // Цена за км
  minPrice     Float       // Минимальная цена
  maxWeight    Float?      // Максимальный вес
  isActive     Boolean     @default(true)
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  @@map("pricing_rules")
}

// Уведомления
model Notification {
  id        String             @id @default(cuid())
  userId    String?
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean            @default(false)
  
  createdAt DateTime           @default(now())
  
  @@map("notifications")
}

enum NotificationType {
  ORDER_STATUS
  PAYMENT
  SYSTEM
  MARKETING
}

// Логи системы
model SystemLog {
  id        String   @id @default(cuid())
  level     LogLevel
  message   String
  context   Json?
  userId    String?
  ip        String?
  
  createdAt DateTime @default(now())
  
  @@map("system_logs")
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
}
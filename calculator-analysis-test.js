// –ê–Ω–∞–ª–∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –ú–æ—Å–∫–≤–∞ - –°–ü–±, 2000 –∫–≥

console.log("üßÆ –ê–ù–ê–õ–ò–ó –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê AVTOGOST77");
console.log("==============================");
console.log("üìç –ú–∞—Ä—à—Ä—É—Ç: –ú–æ—Å–∫–≤–∞ ‚Üí –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥");
console.log("üì¶ –ì—Ä—É–∑: 2000 –∫–≥");
console.log("üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ~700 –∫–º (–ø–æ –¥–∞–Ω–Ω—ã–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞)");
console.log("");

// –¢–ê–†–ò–§–´ –ò–ó –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê
const transportTypes = {
  gazelle: {
    name: '–ì–∞–∑–µ–ª—å',
    maxWeight: 1500,    // –∫–≥
    maxVolume: 16,      // –º¬≥
    minPrice: 10000,    // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ú–æ—Å–∫–≤–∞
    minPriceRegion: 7500, // –º–∏–Ω–∏–º–∞–ª–∫–∞ –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö
    coefficient: 1.0,
    allowConsolidated: true
  },
  threeTon: {
    name: '3-—Ç–æ–Ω–Ω–∏–∫',
    maxWeight: 3000,
    maxVolume: 18,
    minPrice: 13000,
    minPriceRegion: 9750,
    coefficient: 1.0,
    allowConsolidated: true
  },
  fiveTon: {
    name: '5-—Ç–æ–Ω–Ω–∏–∫',
    maxWeight: 5000,
    maxVolume: 36,
    minPrice: 20000,
    minPriceRegion: 15000,
    coefficient: 1.05,
    allowConsolidated: true
  },
  tenTon: {
    name: '10-—Ç–æ–Ω–Ω–∏–∫',
    maxWeight: 10000,
    maxVolume: 50,
    minPrice: 24000,
    minPriceRegion: 18000,
    coefficient: 1.08,
    allowConsolidated: true
  },
  truck: {
    name: '–§—É—Ä–∞ 20—Ç',
    maxWeight: 20000,
    maxVolume: 82,
    minPrice: 28000,
    minPriceRegion: 21000,
    coefficient: 0.95,
    allowConsolidated: false
  }
};

// –§–£–ù–ö–¶–ò–Ø –í–´–ë–û–†–ê –¢–†–ê–ù–°–ü–û–†–¢–ê
function selectOptimalTransport(weight, volume = 0) {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –≤–µ—Å—É
  for (const [key, transport] of Object.entries(transportTypes)) {
    if (weight <= transport.maxWeight) {
      // –ï—Å–ª–∏ –æ–±—ä–µ–º —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –µ–≥–æ
      if (volume > 0 && volume > transport.maxVolume) {
        continue; // —ç—Ç–æ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –æ–±—ä–µ–º—É
      }
      return key;
    }
  }
  return 'truck'; // fallback
}

// –§–£–ù–ö–¶–ò–Ø –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–ê –ó–ê–ì–†–£–ó–ö–ò
function calculateLoadFactor(weight, volume, transport) {
  const weightUsage = weight / transport.maxWeight;
  
  if (volume && volume > 0) {
    const volumeUsage = volume / transport.maxVolume;
    const limitingUsage = Math.max(weightUsage, volumeUsage);
    
    if (limitingUsage > 1.0) {
      return 1.0 + (limitingUsage - 1.0) * 0.3; // –¥–æ–ø–ª–∞—Ç–∞ –∑–∞ –ø–µ—Ä–µ–≥—Ä—É–∑
    }
    
    if (limitingUsage > 0.8) return 1.0;   // 80%+ - –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
    if (limitingUsage > 0.6) return 1.1;   // 60-80% - –Ω–µ–±–æ–ª—å—à–∞—è –¥–æ–ø–ª–∞—Ç–∞
    if (limitingUsage > 0.4) return 1.25;  // 40-60% - —Å—Ä–µ–¥–Ω—è—è –¥–æ–ø–ª–∞—Ç–∞
    if (limitingUsage > 0.2) return 1.4;   // 20-40% - –±–æ–ª—å—à–∞—è –¥–æ–ø–ª–∞—Ç–∞
    return 1.6;  // –º–µ–Ω–µ–µ 20% - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ø–ª–∞—Ç–∞
  } else {
    if (weightUsage > 1.0) return 1.0 + (weightUsage - 1.0) * 0.3;
    if (weightUsage > 0.8) return 1.0;
    if (weightUsage > 0.6) return 1.1;
    if (weightUsage > 0.4) return 1.25;
    if (weightUsage > 0.2) return 1.4;
    return 1.6;
  }
}

// –ú–ï–ñ–†–ï–ì–ò–û–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ú–û–°–ö–í–ê-–°–ü–ë
function calculateInterregionalPrice(fromCity, toCity, weight, volume, distance) {
  console.log("üöõ –ú–ï–ñ–†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢ (>200–∫–º)");
  console.log("==================================");
  
  // –¢–∞—Ä–∏—Ñ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
  let pricePerKm;
  let distanceCategory;
  
  if (distance < 200) {
    pricePerKm = 35;
    distanceCategory = '–ë–ª–∏–∂–Ω–∏–π (–¥–æ 200–∫–º)';
  } else if (distance < 300) {
    pricePerKm = 28;
    distanceCategory = '–ë–ª–∏–∑–∫–∏–π (200-300–∫–º)';
  } else if (distance < 500) {
    pricePerKm = 22;
    distanceCategory = '–°—Ä–µ–¥–Ω–∏–π (300-500–∫–º)';
  } else if (distance < 800) {
    pricePerKm = 25;
    distanceCategory = '–î–∞–ª—å–Ω–∏–π (500-800–∫–º)';
  } else if (distance < 1000) {
    pricePerKm = 22;
    distanceCategory = '–î–∞–ª—å–Ω–æ–±–æ–π–Ω—ã–π (800-1000–∫–º)';
  } else {
    pricePerKm = 25;
    distanceCategory = '–°–≤–µ—Ä—Ö–¥–∞–ª—å–Ω–∏–π (1000–∫–º+)';
  }
  
  console.log(`üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance} –∫–º ‚Üí –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${distanceCategory}`);
  console.log(`üí∞ –ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: ${pricePerKm} ‚ÇΩ/–∫–º`);
  
  // –ü–æ–¥–±–∏—Ä–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
  const optimalTransport = selectOptimalTransport(weight, volume);
  const transport = transportTypes[optimalTransport];
  
  console.log(`üöõ –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${transport.name}`);
  console.log(`üìä –ú–∞–∫—Å–∏–º—É–º: ${transport.maxWeight} –∫–≥, ${transport.maxVolume} –º¬≥`);
  
  // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
  let basePrice = distance * pricePerKm;
  console.log(`üíµ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ (${distance} √ó ${pricePerKm}): ${basePrice} ‚ÇΩ`);
  
  // –ú–∏–Ω–∏–º–∞–ª–∫–∞
  const transportMinPrices = {
    gazelle: distance < 200 ? 20000 : transport.minPriceRegion,
    threeTon: distance < 200 ? 25000 : transport.minPriceRegion,
    fiveTon: distance < 200 ? 30000 : transport.minPriceRegion,
    tenTon: distance < 200 ? 37000 : transport.minPriceRegion,
    truck: distance < 200 ? 42000 : transport.minPriceRegion
  };
  
  const minPrice = transportMinPrices[optimalTransport];
  console.log(`üîí –ú–∏–Ω–∏–º–∞–ª–∫–∞ –¥–ª—è ${transport.name}: ${minPrice} ‚ÇΩ`);
  
  basePrice = Math.max(basePrice, minPrice);
  console.log(`üí∞ –ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª–∫–∏: ${basePrice} ‚ÇΩ`);
  
  // –î–æ–ø–ª–∞—Ç–∞ –ø–æ —Ç–∏–ø—É –¢–°
  const interregionalKmRates = {
    gazelle: 30,   // 30‚ÇΩ/–∫–º –¥–ª—è –≥–∞–∑–µ–ª–∏
    threeTon: 40,  // 40‚ÇΩ/–∫–º –¥–ª—è 3-—Ç–æ–Ω–Ω–∏–∫–∞
    fiveTon: 50,   // 50‚ÇΩ/–∫–º –¥–ª—è 5-—Ç–æ–Ω–Ω–∏–∫–∞  
    tenTon: 62,    // 62‚ÇΩ/–∫–º –¥–ª—è 10-—Ç–æ–Ω–Ω–∏–∫–∞
    truck: 70      // 70‚ÇΩ/–∫–º –¥–ª—è —Ñ—É—Ä—ã
  };
  
  const kmRate = interregionalKmRates[optimalTransport] || 15;
  const kmSurcharge = distance * kmRate;
  
  console.log(`üöõ –î–æ–ø–ª–∞—Ç–∞ –ø–æ —Ç–∏–ø—É –¢–° (${distance} √ó ${kmRate}): ${kmSurcharge} ‚ÇΩ`);
  
  // –ù–ï —Å–±–æ—Ä–Ω—ã–π –≥—Ä—É–∑, –∑–Ω–∞—á–∏—Ç –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–ª–∞—Ç—É
  basePrice += kmSurcharge;
  console.log(`üí∏ –ü–æ—Å–ª–µ –¥–æ–ø–ª–∞—Ç—ã –∑–∞ —Ç–∏–ø –¢–°: ${basePrice} ‚ÇΩ`);
  
  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏
  const loadFactor = calculateLoadFactor(weight, volume, transport);
  const weightUsage = weight / transport.maxWeight;
  
  console.log(`üìä –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ –≤–µ—Å—É: ${(weightUsage * 100).toFixed(1)}%`);
  console.log(`‚öñÔ∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏: ${loadFactor}`);
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
  const finalPrice = Math.round(basePrice * loadFactor * transport.coefficient);
  
  console.log(`üéØ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: ${transport.coefficient}`);
  console.log(`üíØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –¶–ï–ù–ê: ${finalPrice} ‚ÇΩ`);
  console.log(`üìä –¶–µ–Ω–∞ –∑–∞ –∫–º: ${Math.round(finalPrice / distance)} ‚ÇΩ/–∫–º`);
  
  return {
    price: finalPrice,
    transport: transport.name,
    distance: distance,
    pricePerKm: Math.round(finalPrice / distance),
    details: {
      basePrice: basePrice,
      loadFactor: loadFactor,
      transportCoeff: transport.coefficient,
      weightUsage: Math.round(weightUsage * 100),
      category: distanceCategory
    }
  };
}

// –¢–ï–°–¢ –î–õ–Ø –ú–û–°–ö–í–ê-–°–ü–ë 2000 –ö–ì
console.log("");
console.log("üß™ –¢–ï–°–¢–û–í–´–ô –†–ê–°–ß–ï–¢:");
console.log("===================");

const result = calculateInterregionalPrice('–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', 2000, 0, 700);

console.log("");
console.log("üìã –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:");
console.log("======================");
console.log(`üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${result.transport}`);
console.log(`üí∞ –¶–µ–Ω–∞: ${result.price} ‚ÇΩ`);
console.log(`üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${result.distance} –∫–º`);
console.log(`üíµ –¶–µ–Ω–∞ –∑–∞ –∫–º: ${result.pricePerKm} ‚ÇΩ/–∫–º`);
console.log(`üìä –ó–∞–≥—Ä—É–∑–∫–∞: ${result.details.weightUsage}%`);
console.log(`‚öñÔ∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏: ${result.details.loadFactor}`);
console.log(`üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${result.details.category}`);



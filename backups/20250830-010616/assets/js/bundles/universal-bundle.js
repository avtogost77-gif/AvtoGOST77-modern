/* ===== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô BUNDLE –î–õ–Ø AVTOGOST77 ===== */
/* –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–∞–π—Ç–∞ */
/* –í–∫–ª—é—á–∞–µ—Ç: unified-main + lazy-loading + base functionality */

// === LAZY LOADING ===
// Lazy Loading –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π document.addEventListener('DOMContentLoaded', function() { // Native lazy loading –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ if ('loading' in HTMLImageElement.prototype) { const images = document.querySelectorAll('img[loading="lazy"]'); images.forEach(img => { img.src = img.dataset.src || img.src; }); } else { // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ const script = document.createElement('script'); script.src = '/assets/js/lazysizes.min.js'; document.body.appendChild(script); } // Intersection Observer –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ const imageObserver = new IntersectionObserver((entries, observer) => { entries.forEach(entry => { if (entry.isIntersecting) { const img = entry.target; img.src = img.dataset.src || img.src; img.classList.add('loaded'); observer.unobserve(img); } }); }, { rootMargin: '50px 0px', threshold: 0.01 }); // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Å data-src document.querySelectorAll('img[data-src]').forEach(img => { imageObserver.observe(img); }); });
// === UX IMPROVEMENTS ===
/**
 * UX –£–õ–£–ß–®–ï–ù–ò–Ø - TL;DR, –ê–ö–ö–û–†–î–ï–û–ù–´, STICKY TOC
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞
 */

class UXImprovements {
  constructor() {
    this.init();
  }

  init() {
    this.setupAccordions();
    this.setupStickyTOC();
    this.setupTLDR();
    this.setupLazyLoading();
    this.setupScrollAnimations();
    this.setupCalculatorEnhancements();
    this.setupMobileStickyActions();
  }

  // –ê–ö–ö–û–†–î–ï–û–ù–´
  setupAccordions() {
    const accordions = document.querySelectorAll('.accordion');
    
    accordions.forEach(accordion => {
      const trigger = accordion.querySelector('.accordion-trigger');
      const content = accordion.querySelector('.accordion-content');
      
      if (trigger && content) {
        trigger.addEventListener('click', () => {
          const isOpen = accordion.classList.contains('open');
          
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
          accordions.forEach(acc => {
            if (acc !== accordion) {
              acc.classList.remove('open');
              const accContent = acc.querySelector('.accordion-content');
              if (accContent) {
                accContent.style.maxHeight = '0px';
              }
            }
          });
          
          // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π
          if (isOpen) {
            accordion.classList.remove('open');
            content.style.maxHeight = '0px';
          } else {
            accordion.classList.add('open');
            content.style.maxHeight = content.scrollHeight + 'px';
          }
        });
      }
    });
  }

  // –î–û–ü. CTA –î–õ–Ø –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê
  setupCalculatorEnhancements() {
    const btn = document.getElementById('downloadPdf');
    if (btn) {
      btn.addEventListener('click', () => {
        if (window.calculatorV2 && typeof window.calculatorV2.downloadPDF === 'function') {
          window.calculatorV2.downloadPDF();
        } else if (window.pdfLeadMagnet) {
          window.pdfLeadMagnet.showContactModal();
        }
      });
    }
  }

  // –õ–ò–ü–ö–ò–ï –ö–ù–û–ü–ö–ò –î–õ–Ø –ú–û–ë–ò–õ–¨–ù–´–•
  setupMobileStickyActions() {
    if (window.matchMedia('(max-width: 768px)').matches) {
      const exists = document.querySelector('.mobile-sticky-actions');
      if (exists) return;
      const bar = document.createElement('div');
      bar.className = 'mobile-sticky-actions';
      bar.innerHTML = `
        <a href="tel:+79162720932" class="msa-item">üìû –ó–≤–æ–Ω–æ–∫</a>
        <a href="https://wa.me/79162720932" target="_blank" class="msa-item">üí¨ WhatsApp</a>
        <a href="#calculator" class="msa-item">üßÆ –†–∞—Å—á–µ—Ç</a>
      `;
      document.body.appendChild(bar);
    }
  }

  // STICKY TOC (–û–ì–õ–ê–í–õ–ï–ù–ò–ï)
  setupStickyTOC() {
    const toc = document.querySelector('.sticky-toc');
    if (!toc) return;

    const headings = document.querySelectorAll('h2, h3');
    const tocList = toc.querySelector('.toc-list');
    
    if (!tocList) return;

    // –°–æ–∑–¥–∞–µ–º –ø—É–Ω–∫—Ç—ã TOC
    headings.forEach((heading, index) => {
      const id = heading.id || `heading-${index}`;
      heading.id = id;
      
      const tocItem = document.createElement('li');
      tocItem.className = `toc-item toc-${heading.tagName.toLowerCase()}`;
      
      const tocLink = document.createElement('a');
      tocLink.href = `#${id}`;
      tocLink.textContent = heading.textContent;
      tocLink.addEventListener('click', (e) => {
        e.preventDefault();
        heading.scrollIntoView({ behavior: 'smooth' });
      });
      
      tocItem.appendChild(tocLink);
      tocList.appendChild(tocItem);
    });

    // Sticky –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    let isSticky = false;
    const tocOffset = toc.offsetTop;

    window.addEventListener('scroll', () => {
      if (window.pageYOffset > tocOffset && !isSticky) {
        toc.classList.add('sticky');
        isSticky = true;
      } else if (window.pageYOffset <= tocOffset && isSticky) {
        toc.classList.remove('sticky');
        isSticky = false;
      }
    });
  }

  // TL;DR (–ö–†–ê–¢–ö–û–ï –°–û–î–ï–†–ñ–ê–ù–ò–ï)
  setupTLDR() {
    const tldr = document.querySelector('.tldr');
    if (!tldr) return;

    const content = tldr.querySelector('.tldr-content');
    const toggle = tldr.querySelector('.tldr-toggle');
    
    if (!content || !toggle) return;

    toggle.addEventListener('click', () => {
      const isExpanded = tldr.classList.contains('expanded');
      
      if (isExpanded) {
        tldr.classList.remove('expanded');
        toggle.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏';
      } else {
        tldr.classList.add('expanded');
        toggle.textContent = '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏';
      }
    });
  }

  // LAZY LOADING –î–õ–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
  setupLazyLoading() {
    const images = document.querySelectorAll('img[data-src]');
    
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target;
          img.src = img.dataset.src;
          img.classList.remove('lazy');
          img.classList.add('loaded');
          observer.unobserve(img);
        }
      });
    });

    images.forEach(img => {
      img.classList.add('lazy');
      imageObserver.observe(img);
    });
  }

  // –ê–ù–ò–ú–ê–¶–ò–ò –ü–†–ò –°–ö–†–û–õ–õ–ï
  setupScrollAnimations() {
    const elements = document.querySelectorAll('.animate-on-scroll');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
        }
      });
    }, {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    });

    elements.forEach(el => {
      observer.observe(el);
    });
  }

  // –°–û–ó–î–ê–ù–ò–ï –ê–ö–ö–û–†–î–ï–û–ù–ê
  createAccordion(title, content, isOpen = false) {
    const accordion = document.createElement('div');
    accordion.className = `accordion ${isOpen ? 'open' : ''}`;
    
    accordion.innerHTML = `
      <div class="accordion-trigger">
        <span class="accordion-title">${title}</span>
        <span class="accordion-icon">${isOpen ? '‚àí' : '+'}</span>
      </div>
      <div class="accordion-content" style="max-height: ${isOpen ? 'none' : '0px'}">
        <div class="accordion-body">
          ${content}
        </div>
      </div>
    `;
    
    return accordion;
  }

  // –°–û–ó–î–ê–ù–ò–ï TL;DR
  createTLDR(summary, details) {
    const tldr = document.createElement('div');
    tldr.className = 'tldr';
    
    tldr.innerHTML = `
      <div class="tldr-header">
        <h3>üìã –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</h3>
        <button class="tldr-toggle">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏</button>
      </div>
      <div class="tldr-content">
        <div class="tldr-summary">
          ${summary}
        </div>
        <div class="tldr-details">
          ${details}
        </div>
      </div>
    `;
    
    return tldr;
  }

  // –°–û–ó–î–ê–ù–ò–ï STICKY TOC
  createStickyTOC() {
    const toc = document.createElement('div');
    toc.className = 'sticky-toc';
    
    toc.innerHTML = `
      <div class="toc-header">
        <h3>üìë –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</h3>
      </div>
      <ul class="toc-list"></ul>
    `;
    
    return toc;
  }

  // –ö–ê–†–¢–û–ß–ö–ò –ü–†–ï–ò–ú–£–©–ï–°–¢–í
  createBenefitCard(icon, title, description) {
    const card = document.createElement('div');
    card.className = 'benefit-card animate-on-scroll';
    
    card.innerHTML = `
      <div class="benefit-icon">${icon}</div>
      <h4 class="benefit-title">${title}</h4>
      <p class="benefit-description">${description}</p>
    `;
    
    return card;
  }

  // –ú–ò–ù–ò-–ö–ï–ô–°
  createMiniCase(title, stats, description) {
    const caseCard = document.createElement('div');
    caseCard.className = 'mini-case animate-on-scroll';
    
    caseCard.innerHTML = `
      <div class="case-header">
        <h4>${title}</h4>
      </div>
      <div class="case-stats">
        ${stats.map(stat => `<div class="case-stat"><span class="stat-value">${stat.value}</span><span class="stat-label">${stat.label}</span></div>`).join('')}
      </div>
      <p class="case-description">${description}</p>
    `;
    
    return caseCard;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
  window.uxImprovements = new UXImprovements();
});


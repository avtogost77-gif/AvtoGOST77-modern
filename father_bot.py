#!/usr/bin/env python3
"""
ü§ñ –£–ú–ù–´–ô –¢–ï–õ–ï–ì–†–ê–ú –ë–û–¢ –î–õ–Ø –ê–í–¢–û–ì–û–°–¢77
–ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Å—ã–ª–∫—É –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ª–∏–¥–æ–≤!
"""

import asyncio
import logging
from datetime import datetime
from typing import Dict, Optional
import json

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "7999458907:AAHAnyTyvfteW1WNKpns8w35jl14f0wn5es"  # –ò–∑ BROTHERS-COORDINATION.md
MANAGER_CHAT_ID = 399711407  # –ò–∑ BROTHERS-COORDINATION.md

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class CalculatorStates(StatesGroup):
    cargo_type = State()
    weight = State()
    volume = State()
    city_from = State()
    city_to = State()
    contact = State()

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –î–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ (–∏–∑ CALCULATOR-LOGIC.md)
TRANSPORT_TYPES = {
    'gazelle': {
        'max_weight': 1500, 'max_volume': 16, 'density': 94, 
        'name': '–ì–∞–∑–µ–ª—å', 'min_price': 10000, 'min_price_region': 7500,
        'coefficient': 0.36
    },
    'three_ton': {
        'max_weight': 3000, 'max_volume': 18, 'density': 167, 
        'name': '3-—Ç–æ–Ω–Ω–∏–∫', 'min_price': 13000, 'min_price_region': 9750,
        'coefficient': 0.46
    },
    'five_ton': {
        'max_weight': 5000, 'max_volume': 36, 'density': 139, 
        'name': '5-—Ç–æ–Ω–Ω–∏–∫', 'min_price': 20000, 'min_price_region': 15000,
        'coefficient': 0.71
    },
    'ten_ton': {
        'max_weight': 10000, 'max_volume': 50, 'density': 200, 
        'name': '10-—Ç–æ–Ω–Ω–∏–∫', 'min_price': 24000, 'min_price_region': 18000,
        'coefficient': 0.86
    },
    'truck': {
        'max_weight': 20000, 'max_volume': 82, 'density': 244, 
        'name': '–§—É—Ä–∞ 20—Ç', 'min_price': 28000, 'min_price_region': 21000,
        'coefficient': 1.0
    }
}

# –ü—Ä–∏–º–µ—Ä—ã —Ü–µ–Ω (–∏–∑ CALCULATOR-LOGIC.md)
PRICE_EXAMPLES = {
    ('–ì–æ–ª–∏—Ü—ã–Ω–æ', '–ü–æ–≤–∞—Ä–æ–≤–æ', 40): 28000,
    ('–ì–æ–ª–∏—Ü—ã–Ω–æ', '–¢–≤–µ—Ä—å', 170): 35000,
    ('–û–¥–∏–Ω—Ü–æ–≤–æ', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', 700): 70000
}

def get_optimal_transport(weight: float, volume: float) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"""
    for transport_id, params in TRANSPORT_TYPES.items():
        if weight <= params['max_weight'] and volume <= params['max_volume']:
            return transport_id
    return 'truck'

def calculate_price(weight: float, volume: float, distance: int, from_city: str = '', to_city: str = '') -> int:
    """–†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –ø–æ –ª–æ–≥–∏–∫–µ –∏–∑ CALCULATOR-LOGIC.md"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    transport = get_optimal_transport(weight, volume)
    transport_data = TRANSPORT_TYPES[transport]
    
    # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ñ—É—Ä—ã
    if distance < 50:
        price_per_km = 700
    elif distance < 100:
        price_per_km = 280
    elif distance < 200:
        price_per_km = 200
    elif distance < 500:
        price_per_km = 150
    else:
        price_per_km = 100
    
    base_price = distance * price_per_km
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –º–µ–Ω—å—à–µ —Ñ—É—Ä—ã
    if transport != 'truck':
        base_price = base_price * transport_data['coefficient']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª–∫—É (–ú–æ—Å–∫–≤–∞ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω)
    is_moscow = '–ú–æ—Å–∫–≤' in from_city or '–ú–æ—Å–∫–≤' in to_city
    min_price = transport_data['min_price'] if is_moscow else transport_data['min_price_region']
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
    final_price = max(base_price, min_price)
    
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Å–æ—Ç–µ–Ω
    return int(round(final_price / 100) * 100)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_cargo_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¶ –°–±–æ—Ä–Ω—ã–π –≥—Ä—É–∑")],
            [KeyboardButton(text="üè≠ –ù–µ–≥–∞–±–∞—Ä–∏—Ç")],
            [KeyboardButton(text="üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å")],
            [KeyboardButton(text="üìã –î—Ä—É–≥–æ–µ")]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_contact_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)],
            [KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_action_keyboard(price: int):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order")],
        [InlineKeyboardButton(text="üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", callback_data="call")],
        [InlineKeyboardButton(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="question")],
        [InlineKeyboardButton(text="üåê –ù–∞ —Å–∞–π—Ç", url="https://avtogost77.ru/calculator")]
    ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"""
    await state.clear()
    
    text = (
        "üöõ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –ê–≤—Ç–æ–ì–û–°–¢\n"
        "–ü–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏ –∑–∞ 30 —Å–µ–∫—É–Ω–¥!\n\n"
        "–ß—Ç–æ –≤–µ–∑–µ–º?"
    )
    
    await message.answer(text, reply_markup=get_cargo_keyboard())
    await state.set_state(CalculatorStates.cargo_type)

@dp.message(CalculatorStates.cargo_type)
async def cargo_type_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –≥—Ä—É–∑–∞"""
    cargo_type = message.text
    await state.update_data(cargo_type=cargo_type)
    
    text = (
        "–û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–∑–∞:\n\n"
        "–í–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500):"
    )
    
    await message.answer(text, reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(CalculatorStates.weight)

@dp.message(CalculatorStates.weight)
async def weight_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞"""
    try:
        weight = float(message.text.replace(',', '.'))
        await state.update_data(weight=weight)
        
        text = "–û–±—ä–µ–º –≤ –∫—É–±–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: 1 –ø–∞–ª–ª–µ—Ç ‚âà 1.2 –º¬≥"
        await message.answer(text)
        await state.set_state(CalculatorStates.volume)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 500")

@dp.message(CalculatorStates.volume)
async def volume_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–º–∞"""
    try:
        volume = float(message.text.replace(',', '.'))
        await state.update_data(volume=volume)
        
        text = "üìç –û—Ç–∫—É–¥–∞ –≤–µ–∑–µ–º? –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:"
        await message.answer(text)
        await state.set_state(CalculatorStates.city_from)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 2.5")

@dp.message(CalculatorStates.city_from)
async def city_from_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    city_from = message.text
    await state.update_data(city_from=city_from)
    
    text = "üìç –ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:"
    await message.answer(text)
    await state.set_state(CalculatorStates.city_to)

@dp.message(CalculatorStates.city_to)
async def city_to_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ä–∞—Å—á–µ—Ç"""
    city_to = message.text
    await state.update_data(city_to=city_to)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –†–∞—Å—á–µ—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
    distance = 500  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å —á–µ—Ä–µ–∑ API
    price = calculate_price(data['weight'], data['volume'], distance, data['from_city'], data['to_city'])
    transport = get_optimal_transport(data['weight'], data['volume'])
    transport_name = TRANSPORT_TYPES[transport]['name']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await state.update_data(price=price, transport=transport, distance=distance)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    text = (
        f"üéØ –†–∞—Å—á–µ—Ç –≥–æ—Ç–æ–≤!\n\n"
        f"–ú–∞—Ä—à—Ä—É—Ç: {data['city_from']} ‚Üí {city_to}\n"
        f"–ì—Ä—É–∑: {data['weight']} –∫–≥ / {data['volume']} –º¬≥\n"
        f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {transport_name}\n\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price:,} ‚ÇΩ\n"
        f"‚è± –°—Ä–æ–∫: 1-2 –¥–Ω—è\n\n"
        f"–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π?"
    )
    
    await message.answer(text, reply_markup=get_contact_keyboard())
    await state.set_state(CalculatorStates.contact)

@dp.message(CalculatorStates.contact)
async def contact_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    if message.contact:
        phone = message.contact.phone_number
        await state.update_data(phone=phone)
    else:
        phone = None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!\n\n"
        f"–í–∞—à —Ä–∞—Å—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
    )
    
    await message.answer(
        text, 
        reply_markup=types.ReplyKeyboardRemove()
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_action_keyboard(data['price'])
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    await notify_manager(message.from_user, data, phone)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

async def notify_manager(user: types.User, data: Dict, phone: Optional[str]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É"""
    text = (
        f"üÜï –ù–û–í–´–ô –†–ê–°–ß–ï–¢ –í –ë–û–¢–ï!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}\n"
        f"üÜî Telegram: @{user.username or '–Ω–µ—Ç'}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"üì¶ –¢–∏–ø –≥—Ä—É–∑–∞: {data['cargo_type']}\n"
        f"‚öñÔ∏è –í–µ—Å: {data['weight']} –∫–≥\n"
        f"üìè –û–±—ä–µ–º: {data['volume']} –º¬≥\n"
        f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {TRANSPORT_TYPES[data['transport']]['name']}\n\n"
        f"üìç –ú–∞—Ä—à—Ä—É—Ç: {data['city_from']} ‚Üí {data['city_to']}\n"
        f"üí∞ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {data['price']:,} ‚ÇΩ\n\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    try:
        await bot.send_message(MANAGER_CHAT_ID, text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
@dp.callback_query(F.data == "order")
async def order_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞"""
    await callback.answer("–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!", show_alert=True)
    await callback.message.answer(
        "üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!\n"
        "–ò–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ —Å–∞–º–∏: +7 (916) 272-09-32"
    )

@dp.callback_query(F.data == "call")
async def call_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–∞"""
    await callback.answer()
    await callback.message.answer(
        "üìû –ó–≤–æ–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:\n"
        "+7 (916) 272-09-32\n\n"
        "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: 24/7"
    )

@dp.callback_query(F.data == "question")
async def question_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    await callback.answer()
    await callback.message.answer(
        "üí¨ –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n"
        "–ò–ª–∏ –ø–∏—à–∏—Ç–µ –≤ WhatsApp: wa.me/79162720932"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def echo_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "–ù–µ –ø–æ–Ω—è–ª –≤–∞—Å ü§î\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∏–ª–∏ /help –¥–ª—è –ø–æ–º–æ—â–∏"
    )

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —É–º–Ω–æ–≥–æ @father_bot!")
    
    # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –±—ã–ª
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
#!/bin/bash

# Performance Monitoring Script
# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Core Web Vitals –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

echo "üìä –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
reports_dir="performance-reports"
mkdir -p "$reports_dir"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏
get_load_time() {
    local url="$1"
    local start_time=$(date +%s.%N)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º curl –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    local response=$(curl -s -w "%{time_total},%{size_download},%{http_code}" -o /dev/null "$url")
    local end_time=$(date +%s.%N)
    
    echo "$response"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ Core Web Vitals (–∏–º–∏—Ç–∞—Ü–∏—è)
analyze_core_web_vitals() {
    local url="$1"
    local filename="$2"
    
    echo "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Core Web Vitals –¥–ª—è: $url"
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Lighthouse API)
    local lcp=$(echo "scale=2; $(shuf -i 1000-5000 -n 1) / 1000" | bc -l 2>/dev/null || echo "2.5")
    local fid=$(echo "scale=2; $(shuf -i 50-200 -n 1) / 1000" | bc -l 2>/dev/null || echo "0.1")
    local cls=$(echo "scale=3; $(shuf -i 1-50 -n 1) / 1000" | bc -l 2>/dev/null || echo "0.05")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    local lcp_status="üü¢ –•–æ—Ä–æ—à–æ"
    local fid_status="üü¢ –•–æ—Ä–æ—à–æ"
    local cls_status="üü¢ –•–æ—Ä–æ—à–æ"
    
    if (( $(echo "$lcp > 2.5" | bc -l) )); then
        lcp_status="üî¥ –ü–ª–æ—Ö–æ"
    elif (( $(echo "$lcp > 1.6" | bc -l) )); then
        lcp_status="üü° –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å"
    fi
    
    if (( $(echo "$fid > 0.1" | bc -l) )); then
        fid_status="üî¥ –ü–ª–æ—Ö–æ"
    elif (( $(echo "$fid > 0.05" | bc -l) )); then
        fid_status="üü° –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å"
    fi
    
    if (( $(echo "$cls > 0.1" | bc -l) )); then
        cls_status="üî¥ –ü–ª–æ—Ö–æ"
    elif (( $(echo "$cls > 0.05" | bc -l) )); then
        cls_status="üü° –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å"
    fi
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    cat > "$reports_dir/$filename" << EOF
# –û—Ç—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - $(date)
URL: $url

## Core Web Vitals
- **LCP (Largest Contentful Paint):** ${lcp}s $lcp_status
- **FID (First Input Delay):** ${fid}s $fid_status  
- **CLS (Cumulative Layout Shift):** ${cls} $cls_status

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
EOF
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if [[ "$lcp_status" == *"–ü–ª–æ—Ö–æ"* ]] || [[ "$lcp_status" == *"–ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å"* ]]; then
        echo "- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π" >> "$reports_dir/$filename"
        echo "- –í–∫–ª—é—á–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤" >> "$reports_dir/$filename"
        echo "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CDN –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤" >> "$reports_dir/$filename"
    fi
    
    if [[ "$fid_status" == *"–ü–ª–æ—Ö–æ"* ]] || [[ "$fid_status" == *"–ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å"* ]]; then
        echo "- –£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä JavaScript —Ñ–∞–π–ª–æ–≤" >> "$reports_dir/$filename"
        echo "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å async/defer –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤" >> "$reports_dir/$filename"
        echo "- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞" >> "$reports_dir/$filename"
    fi
    
    if [[ "$cls_status" == *"–ü–ª–æ—Ö–æ"* ]] || [[ "$cls_status" == *"–ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å"* ]]; then
        echo "- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π" >> "$reports_dir/$filename"
        echo "- –ò–∑–±–µ–≥–∞—Ç—å –≤—Å—Ç–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–≤–µ—Ä—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ" >> "$reports_dir/$filename"
        echo "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CSS transform –≤–º–µ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è layout" >> "$reports_dir/$filename"
    fi
    
    echo "‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $reports_dir/$filename"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤
check_file_sizes() {
    echo "üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤..."
    
    local total_size=0
    local file_count=0
    
    # HTML —Ñ–∞–π–ª—ã
    echo "üìÑ HTML —Ñ–∞–π–ª—ã:"
    find . -name "*.html" -type f | while read -r file; do
        local size=$(wc -c < "$file")
        local filename=$(basename "$file")
        echo "  $filename: ${size} –±–∞–π—Ç"
        total_size=$((total_size + size))
        file_count=$((file_count + 1))
    done
    
    # CSS —Ñ–∞–π–ª—ã
    echo "üé® CSS —Ñ–∞–π–ª—ã:"
    find assets/css -name "*.css" -o -name "*.min.css" | while read -r file; do
        local size=$(wc -c < "$file")
        local filename=$(basename "$file")
        echo "  $filename: ${size} –±–∞–π—Ç"
        total_size=$((total_size + size))
        file_count=$((file_count + 1))
    done
    
    # JS —Ñ–∞–π–ª—ã
    echo "‚ö° JavaScript —Ñ–∞–π–ª—ã:"
    find assets/js -name "*.js" -o -name "*.min.js" | while read -r file; do
        local size=$(wc -c < "$file")
        local filename=$(basename "$file")
        echo "  $filename: ${size} –±–∞–π—Ç"
        total_size=$((total_size + size))
        file_count=$((file_count + 1))
    done
    
    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    echo "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:"
    find assets/img -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.gif" -o -iname "*.webp" \) | while read -r file; do
        local size=$(wc -c < "$file")
        local filename=$(basename "$file")
        echo "  $filename: ${size} –±–∞–π—Ç"
        total_size=$((total_size + size))
        file_count=$((file_count + 1))
    done
    
    echo "üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${total_size} –±–∞–π—Ç ($(echo "scale=2; $total_size / 1024 / 1024" | bc -l 2>/dev/null || echo "0") MB)"
    echo "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: $file_count"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
check_http_headers() {
    local url="$1"
    echo "üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è: $url"
    
    local headers=$(curl -s -I "$url" | head -20)
    echo "$headers"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    if echo "$headers" | grep -q "Cache-Control"; then
        echo "‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
    else
        echo "‚ö†Ô∏è –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∂–∞—Ç–∏–µ
    if echo "$headers" | grep -q "Content-Encoding: gzip"; then
        echo "‚úÖ Gzip —Å–∂–∞—Ç–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        echo "‚ö†Ô∏è Gzip —Å–∂–∞—Ç–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP/2
    if echo "$headers" | grep -q "HTTP/2"; then
        echo "‚úÖ HTTP/2 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
    else
        echo "‚ö†Ô∏è HTTP/2 –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
main() {
    local base_url="http://localhost"  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
    
    echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
    echo "=============================================="
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    echo "üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É..."
    local load_time=$(get_load_time "$base_url")
    echo "‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: $load_time"
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Core Web Vitals
    analyze_core_web_vitals "$base_url" "core-web-vitals-$(date +%Y%m%d).md"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
    check_file_sizes
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏
    check_http_headers "$base_url"
    
    echo ""
    echo "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!"
    echo "üìÅ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $reports_dir/"
}

# –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
main

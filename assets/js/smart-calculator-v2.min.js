class SmartCalculatorV2 {  constructor() {    this.transportTypes = {      gazelle: {        name: '–ì–∞–∑–µ–ª—å',        maxWeight: 1500,        maxVolume: 16,        density: 94,        minPrice: 10000,        minPriceRegion: 7500,        coefficient: 0.36,        icon: 'üöê'      },      threeTon: {        name: '3-—Ç–æ–Ω–Ω–∏–∫',        maxWeight: 3000,        maxVolume: 18,        density: 167,        minPrice: 13000,        minPriceRegion: 9750,        coefficient: 0.46,        icon: 'üöõ'      },      fiveTon: {        name: '5-—Ç–æ–Ω–Ω–∏–∫',        maxWeight: 5000,        maxVolume: 36,        density: 139,        minPrice: 20000,        minPriceRegion: 15000,        coefficient: 0.71,        icon: 'üöõ'      },      tenTon: {        name: '10-—Ç–æ–Ω–Ω–∏–∫',        maxWeight: 10000,        maxVolume: 50,        density: 200,        minPrice: 24000,        minPriceRegion: 18000,        coefficient: 0.86,        icon: 'üöö'      },      truck: {        name: '–§—É—Ä–∞ 20—Ç',        maxWeight: 20000,        maxVolume: 82,        density: 244,        minPrice: 28000,        minPriceRegion: 21000,        coefficient: 1.0,        icon: 'üöö'      }    };
    this.realPrices = {      '–ì–æ–ª–∏—Ü—ã–Ω–æ-–ü–æ–≤–∞—Ä–æ–≤–æ': { distance: 40, price: 28000, pricePerKm: 700 },      '–ì–æ–ª–∏—Ü—ã–Ω–æ-–í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫': { distance: 100, price: 28000, pricePerKm: 280 },      '–ì–æ–ª–∏—Ü—ã–Ω–æ-–¢–≤–µ—Ä—å': { distance: 170, price: 35000, pricePerKm: 206 },      '–ì–æ–ª–∏—Ü—ã–Ω–æ-–†—è–∑–∞–Ω—å': { distance: 180, price: 35000, pricePerKm: 194 },      '–ì–æ–ª–∏—Ü—ã–Ω–æ-–ö–æ—Å—Ç—Ä–æ–º–∞': { distance: 340, price: 50000, pricePerKm: 147 },      '–û–¥–∏–Ω—Ü–æ–≤–æ-–°–ü–±': { distance: 700, price: 70000, pricePerKm: 100 },      '–°–ü–±-–û–¥–∏–Ω—Ü–æ–≤–æ': { distance: 700, price: 65000, pricePerKm: 93 }    };
    this.regions = {      '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': [        '–ú–æ—Å–∫–≤–∞', '–ü–æ–¥–æ–ª—å—Å–∫', '–•–∏–º–∫–∏', '–ë–∞–ª–∞—à–∏—Ö–∞', '–ú—ã—Ç–∏—â–∏', '–ö–æ—Ä–æ–ª—ë–≤',        '–õ—é–±–µ—Ä—Ü—ã', '–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫', '–û–¥–∏–Ω—Ü–æ–≤–æ', '–ì–æ–ª–∏—Ü—ã–Ω–æ', '–ü–æ–≤–∞—Ä–æ–≤–æ',        '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫', '–ö–æ–ª–æ–º–Ω–∞', '–°–µ—Ä–ø—É—Ö–æ–≤', '–©—ë–ª–∫–æ–≤–æ', '–î–æ–º–æ–¥–µ–¥–æ–≤–æ'      ],      '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –∏ –æ–±–ª–∞—Å—Ç—å': [        '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ì–∞—Ç—á–∏–Ω–∞', '–í—ã–±–æ—Ä–≥', '–í—Å–µ–≤–æ–ª–æ–∂—Å–∫', '–ö–æ–ª–ø–∏–Ω–æ',        '–ü—É—à–∫–∏–Ω', '–ü–µ—Ç–µ—Ä–≥–æ—Ñ', '–ö—Ä–æ–Ω—à—Ç–∞–¥—Ç'      ],      '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': [        '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–î–∑–µ—Ä–∂–∏–Ω—Å–∫', '–ê—Ä–∑–∞–º–∞—Å', '–°–∞—Ä–æ–≤', '–ë–æ—Ä'      ]    };
    this.init();
  }  calculatePrice(fromCity, toCity, weight, volume, cargoType = 'general') {    if (this.isSameRegion(fromCity, toCity)) {      return {        error: true,        message: '–í–ù–ò–ú–ê–ù–ò–ï! –°–±–æ—Ä–Ω—ã–µ –≥—Ä—É–∑—ã —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏. –í–Ω—É—Ç—Ä–∏ —Ä–µ–≥–∏–æ–Ω–∞ - —Ç–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞!',        alternativePrice: this.calculateFullTruckPrice(fromCity, toCity)      };
    }    const transport = this.selectOptimalTransport(weight, volume);
    if (!transport) {      return {        error: true,        message: '–ì—Ä—É–∑ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –¥–∞–∂–µ –≤ —Ñ—É—Ä—É! –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–ø–µ—Ü—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç.'      };
    }    const distance = this.getDistance(fromCity, toCity);
    let pricePerKm;
    if (distance < 50) {      pricePerKm = 700;
    } else if (distance < 100) {      pricePerKm = 280;
    } else if (distance < 200) {      pricePerKm = 200;
    } else if (distance < 500) {      pricePerKm = 150;
    } else {      pricePerKm = 100;
    }    let basePrice = distance * pricePerKm;
    const isMoscow = fromCity.includes('–ú–æ—Å–∫–≤') || toCity.includes('–ú–æ—Å–∫–≤');
    const minPrice = isMoscow ? transport.minPrice : transport.minPriceRegion;
    if (transport.name !== '–§—É—Ä–∞ 20—Ç') {      basePrice = basePrice * transport.coefficient;
    }    basePrice = Math.max(basePrice, minPrice);
    if (cargoType === '—Å–±–æ—Ä–Ω—ã–π' || cargoType === 'consolidated') {      basePrice = basePrice * 0.65;
    }    const loadFactor = this.calculateLoadFactor(weight, volume, transport);
    basePrice *= loadFactor;
    const routeFactor = this.getRouteFactor(fromCity, toCity);
    basePrice *= routeFactor;
    const cargoFactor = this.getCargoFactor(cargoType);
    basePrice *= cargoFactor;
    const finalPrice = Math.round(basePrice / 500) * 500;
    return {      success: true,      price: finalPrice,      transport: transport.name,      distance: distance,      pricePerKm: Math.round(finalPrice / distance),      deliveryTime: this.calculateDeliveryTime(distance),      details: {        weight,        volume,        density: volume && volume > 0 ? Math.round(weight / volume) : 0,        loadPercent: Math.round((weight / transport.maxWeight) * 100),        volumePercent: volume && volume > 0 ? Math.round((volume / transport.maxVolume) * 100) : 0      }    };
  }  isSameRegion(city1, city2) {    for (const [region, cities] of Object.entries(this.regions)) {      const hasBoth = cities.includes(city1) && cities.includes(city2);
      if (hasBoth) return true;
    }    return false;
  }  selectOptimalTransport(weight, volume) {    const sortedTransports = Object.values(this.transportTypes)      .sort((a, b) => a.maxWeight - b.maxWeight);
    for (const transport of sortedTransports) {      if (weight <= transport.maxWeight) {        if (volume && volume > 0) {          const density = weight / volume;
          if (volume <= transport.maxVolume && density <= transport.density * 1.2) {            return transport;
          }        } else {          return transport;
        }      }    }    return null;
  }  calculateLoadFactor(weight, volume, transport) {    const weightUsage = weight / transport.maxWeight;
    if (volume && volume > 0) {      const volumeUsage = volume / transport.maxVolume;
      const maxUsage = Math.max(weightUsage, volumeUsage);
      if (maxUsage < 0.3) return 1.5;
      if (maxUsage < 0.5) return 1.3;
      if (maxUsage < 0.7) return 1.1;
      return 1.0;
    } else {      if (weightUsage < 0.3) return 1.4;
      if (weightUsage < 0.5) return 1.2;
      if (weightUsage < 0.7) return 1.05;
      return 1.0;
    }  }  getRouteFactor(from, to) {    const popularRoutes = [      ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'],      ['–ú–æ—Å–∫–≤–∞', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥'],      ['–ú–æ—Å–∫–≤–∞', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'],      ['–ú–æ—Å–∫–≤–∞', '–ö–∞–∑–∞–Ω—å']    ];
    for (const route of popularRoutes) {      if ((route.includes(from) && route.includes(to))) {        return 0.9;
      }    }    if (to === '–ú–æ—Å–∫–≤–∞' || to === '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥') {      return 0.95;
    }    return 1.0;
  }  getCargoFactor(cargoType) {    const factors = {      'general': 1.0,      'fragile': 1.3,      'valuable': 1.5,      'dangerous': 1.8,      'perishable': 1.4,      'oversized': 1.6    };
    return factors[cargoType] || 1.0;
  }  calculateDeliveryTime(distance) {    if (distance < 500) return '1-2 –¥–Ω—è';
    if (distance < 1000) return '2-3 –¥–Ω—è';
    if (distance < 2000) return '3-4 –¥–Ω—è';
    if (distance < 3000) return '4-5 –¥–Ω–µ–π';
    return '5-7 –¥–Ω–µ–π';
  }  calculateFullTruckPrice(from, to) {    const distance = this.getDistance(from, to) || 50;
    const basePrice = 20000;
    const kmPrice = distance < 50 ? 500 : 200;
    return Math.max(basePrice, distance * kmPrice);
  }  getDistance(from, to) {    const routes = {      '–ú–æ—Å–∫–≤–∞-–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 700,      '–ú–æ—Å–∫–≤–∞-–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': 400,      '–ú–æ—Å–∫–≤–∞-–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 1400,      '–ú–æ—Å–∫–≤–∞-–ö–∞–∑–∞–Ω—å': 800,      '–ú–æ—Å–∫–≤–∞-–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É': 1100,      '–ú–æ—Å–∫–≤–∞-–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 3300    };
    const routeKey = `${from}-${to}`;
    const reverseKey = `${to}-${from}`;
    return routes[routeKey] || routes[reverseKey] || 500;
  }  init() {    const form = document.getElementById('calculatorForm');
    if (!form) {      return;
    }    this.setupAutocomplete();
  }  handleCalculation() {    const fromCity = document.getElementById('fromCity')?.value || '';
    const toCity = document.getElementById('toCity')?.value || '';
    const weight = parseFloat(document.getElementById('weight')?.value || 0);
    const volume = parseFloat(document.getElementById('volume')?.value || 0);
    const transport = document.getElementById('transport')?.value || 'gazelle';
    if (!fromCity || !toCity || !weight) {      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –∏ –≤–µ—Å –≥—Ä—É–∑–∞!');
      return;
    }    if (volume && volume <= 0) {      alert('–û–±—ä–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0!');
      return;
    }    const result = this.calculatePrice(fromCity, toCity, weight, volume, 'general');
    this.showResult(result);
  }  showResult(result) {    const resultDiv = document.getElementById('calculatorResult') || this.createResultDiv();
    if (result.error) {      resultDiv.innerHTML = `        <div class="alert alert-warning">          <h4>‚ö†Ô∏è ${result.message}</h4>          ${result.alternativePrice ?             `<p>–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã: <strong>${result.alternativePrice.toLocaleString()} ‚ÇΩ</strong></p>` : ''          }          <p>–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è: <a href="tel:+79162720932">+7 (916) 272-09-32</a></p>        </div>      `;
    } else {      resultDiv.innerHTML = `        <div class="calc-success">          <h3>üéØ –†–∞—Å—á–µ—Ç –≥–æ—Ç–æ–≤!</h3>          <div class="price-block">            <div class="price-main">              <span class="price-label">–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫–∏:</span>              <span class="price-value">${result.price.toLocaleString()} ‚ÇΩ</span>            </div>            <div class="price-details">              <p>üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${result.distance} –∫–º (${result.pricePerKm} ‚ÇΩ/–∫–º)</p>              <p>üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${result.transport}</p>              <p>‚è±Ô∏è –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: ${result.deliveryTime}</p>            </div>          </div>          <div class="cargo-details">            <h4>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–∑–∞:</h4>            <ul>              <li>–í–µ—Å: ${result.details.weight} –∫–≥ (${result.details.loadPercent}% –∑–∞–≥—Ä—É–∑–∫–∏)</li>              ${result.details.volume ?                 `<li>–û–±—ä–µ–º: ${result.details.volume} –º¬≥ (${result.details.volumePercent}% –∑–∞–≥—Ä—É–∑–∫–∏)</li>                 <li>–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: ${result.details.density} –∫–≥/–º¬≥</li>` :                 '<li>–û–±—ä–µ–º: –Ω–µ —É–∫–∞–∑–∞–Ω</li>'              }            </ul>          </div>          <div class="cta-buttons">            <button class="btn btn-primary" onclick="smartCalculatorV2.showLeadForm()">              üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É            </button>            <button class="btn btn-secondary" onclick="smartCalculatorV2.callManager()">              üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É            </button>          </div>          <div class="disclaimer">            <p><small>* –≠—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç. –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.</small></p>          </div>        </div>      `;
    }    resultDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
  }  createResultDiv() {    const div = document.createElement('div');
    div.id = 'calculatorResult';
    div.className = 'calculator-result';
    const form = document.getElementById('calculatorForm');
    if (form) {      form.parentNode.insertBefore(div, form.nextSibling);
    }    return div;
  }  showLeadForm() {    const leadForm = document.getElementById('leadForm');
    if (leadForm) {      leadForm.style.display = 'block';
      leadForm.scrollIntoView({ behavior: 'smooth', block: 'center' });
      this.fillLeadFormData();
      this.setupLeadFormHandler();
    }  }  fillLeadFormData() {    const fromCity = document.getElementById('fromCity')?.value || '';
    const toCity = document.getElementById('toCity')?.value || '';
    const weight = document.getElementById('weight')?.value || '';
    const volume = document.getElementById('volume')?.value || '';
    const transport = document.getElementById('transport')?.value || '';
    const comment = document.getElementById('leadComment');
    if (comment) {      comment.value = `–ú–∞—Ä—à—Ä—É—Ç: ${fromCity} ‚Üí ${toCity}\n–í–µ—Å: ${weight} –∫–≥\n–û–±—ä–µ–º: ${volume} –º¬≥\n–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${transport}`;
    }  }  setupLeadFormHandler() {    const form = document.getElementById('calculatorLeadForm');
    if (form) {      form.addEventListener('submit', (e) => {        e.preventDefault();
        this.handleLeadFormSubmit(e);
      });
    }  }  handleLeadFormSubmit(e) {    const formData = new FormData(e.target);
    const data = {      name: formData.get('name'),      phone: formData.get('phone'),      email: formData.get('email'),      comment: formData.get('comment'),      timestamp: new Date().toISOString(),      source: 'calculator'    };
    const submitBtn = e.target.querySelector('button[type="submit"]');
    const btnText = submitBtn.querySelector('.btn-text');
    const btnLoading = submitBtn.querySelector('.btn-loading');
    btnText.style.display = 'none';
    btnLoading.style.display = 'inline';
    this.sendLeadData(data)      .then(() => {        this.showLeadSuccess();
      })      .catch((error) => {        this.showLeadError(error);
      })      .finally(() => {        btnText.style.display = 'inline';
        btnLoading.style.display = 'none';
      });
  }  async sendLeadData(data) {    if (window.sendToTelegram) {      return window.sendToTelegram(data, 'calculator');
    }    const promoCode = document.getElementById('promoCode')?.textContent || 'GOST10';
    const message = `üéØ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:\n\nüë§ –ò–º—è: ${data.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}\nüìß Email: ${data.email}\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${data.comment}\nüéÅ –ü—Ä–æ–º–æ–∫–æ–¥: ${promoCode}\n‚è∞ –ò—Å—Ç–æ—á–Ω–∏–∫: —Ñ–æ—Ä–º–∞ –ª–∏–¥–æ–≤`;
    window.open(`https:    return Promise.resolve();
  }  showLeadSuccess() {    const leadForm = document.getElementById('leadForm');
    if (leadForm) {      leadForm.innerHTML = `        <div class="lead-success">          <div class="success-icon">‚úÖ</div>          <h3>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</h3>          <p>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.</p>          <button class="btn btn-primary" onclick="location.reload()">            –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ—â–µ —Ä–∞–∑          </button>        </div>      `;
    }  }  showLeadError(error) {    const leadForm = document.getElementById('leadForm');
    if (leadForm) {      leadForm.innerHTML = `        <div class="lead-error">          <div class="error-icon">‚ùå</div>          <h3>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏</h3>          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é: <a href="tel:+79162720932">+7 (916) 272-09-32</a></p>          <button class="btn btn-primary" onclick="location.reload()">            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞          </button>        </div>      `;
    }  }  orderNow() {    this.showLeadForm();
  }  callManager() {    window.location.href = 'tel:+79162720932';
  }  setupAutocomplete() {    if (typeof POPULAR_CITIES !== 'undefined') {      const datalist = document.createElement('datalist');
      datalist.id = 'cities-list';
      POPULAR_CITIES.forEach(city => {        const option = document.createElement('option');
        option.value = city;
        datalist.appendChild(option);
      });
      document.body.appendChild(datalist);
      document.getElementById('fromCity')?.setAttribute('list', 'cities-list');
      document.getElementById('toCity')?.setAttribute('list', 'cities-list');
    } else {      const cities = [        '–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',        '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ö–∞–∑–∞–Ω—å', '–ß–µ–ª—è–±–∏–Ω—Å–∫', '–°–∞–º–∞—Ä–∞', '–û–º—Å–∫',        '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', '–£—Ñ–∞', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–í–æ—Ä–æ–Ω–µ–∂', '–ü–µ—Ä–º—å'      ];
      const datalist = document.createElement('datalist');
      datalist.id = 'cities-list';
      cities.forEach(city => {        const option = document.createElement('option');
        option.value = city;
        datalist.appendChild(option);
      });
      document.body.appendChild(datalist);
      document.getElementById('fromCity')?.setAttribute('list', 'cities-list');
      document.getElementById('toCity')?.setAttribute('list', 'cities-list');
    }  }}document.addEventListener('DOMContentLoaded', () => {  window.smartCalculatorV2 = new SmartCalculatorV2();
  initExitIntentPopup();
  initStickyHeader();
  initPromoTimer();
  updatePromoTimer();
  initPrivacyConsent();
});
function initExitIntentPopup() {  let hasShownPopup = false;
  let mouseLeaveCount = 0;
  if (sessionStorage.getItem('exitPopupShown')) {    return;
  }  document.addEventListener('mouseleave', (e) => {    if (e.clientY <= 0 && !hasShownPopup && mouseLeaveCount === 0) {      mouseLeaveCount++;
      setTimeout(() => {        showExitPopup();
      }, 1000);
    }  });
  document.addEventListener('keydown', (e) => {    if (e.key === 'Escape' && !hasShownPopup) {      showExitPopup();
    }  });
}function showExitPopup() {  const popup = document.getElementById('exitIntentPopup');
  if (popup) {    popup.classList.add('show');
    sessionStorage.setItem('exitPopupShown', 'true');
    setupExitFormHandler();
  }}function closeExitPopup() {  const popup = document.getElementById('exitIntentPopup');
  if (popup) {    popup.classList.remove('show');
  }}function setupExitFormHandler() {  const form = document.getElementById('exitLeadForm');
  if (form) {    form.addEventListener('submit', (e) => {      e.preventDefault();
      handleExitFormSubmit(e);
    });
  }}function handleExitFormSubmit(e) {  const formData = new FormData(e.target);
  const data = {    name: formData.get('name'),    phone: formData.get('phone'),    email: formData.get('email'),    promoCode: 'WELCOME10',    source: 'exit-intent-popup',    timestamp: new Date().toISOString()  };
  const submitBtn = e.target.querySelector('button[type="submit"]');
  const originalText = submitBtn.textContent;
  submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
  submitBtn.disabled = true;
  sendExitLeadData(data)    .then(() => {      showExitSuccess();
    })    .catch((error) => {      showExitError(error);
    })    .finally(() => {      submitBtn.textContent = originalText;
      submitBtn.disabled = false;
    });
}async function sendExitLeadData(data) {  data.promoCode = 'WELCOME10';
  data.source = 'Exit-Intent Pop-up';
  if (window.sendToTelegram) {    return window.sendToTelegram(data, 'exitIntent');
  }  try {    const botToken = '7999458907:AAGOAjQLmEZuT4SFx4Upl1GjuXO0yFuWok8';
    const chatId = '399711407';
    const message = `üéÅ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å exit-intent:\n\nüë§ –ò–º—è: ${data.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}\nüìß Email: ${data.email}\nüéÅ –ü—Ä–æ–º–æ–∫–æ–¥: ${data.promoCode}\n‚è∞ –ò—Å—Ç–æ—á–Ω–∏–∫: ${data.source}`;
    const response = await fetch(`https:      method: 'POST',      headers: { 'Content-Type': 'application/json' },      body: JSON.stringify({ chat_id: chatId, text: message })    });
    if (response.ok) {      return Promise.resolve();
    }  } catch (error) {    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ exit-intent –∑–∞—è–≤–∫–∏');
  }  return Promise.resolve();
}function showExitSuccess() {  const popup = document.getElementById('exitIntentPopup');
  if (popup) {    popup.innerHTML = `      <div class="exit-popup-content">        <div class="exit-popup-header">          <h3>‚úÖ –£—Å–ø–µ—à–Ω–æ!</h3>          <button class="exit-popup-close" onclick="closeExitPopup()">√ó</button>        </div>        <div class="exit-popup-body">          <div class="exit-popup-icon">üéâ</div>          <h4>–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!</h4>          <p>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º —Å–∫–∏–¥–∫—É 10% –Ω–∞ –ø–µ—Ä–≤—É—é –ø–µ—Ä–µ–≤–æ–∑–∫—É.</p>          <div class="exit-popup-footer">            <small>–ü—Ä–æ–º–æ–∫–æ–¥: <strong>WELCOME10</strong></small>          </div>        </div>      </div>    `;
  }}function showExitError(error) {  const popup = document.getElementById('exitIntentPopup');
  if (popup) {    popup.innerHTML = `      <div class="exit-popup-content">        <div class="exit-popup-header">          <h3>‚ùå –û—à–∏–±–∫–∞</h3>          <button class="exit-popup-close" onclick="closeExitPopup()">√ó</button>        </div>        <div class="exit-popup-body">          <div class="exit-popup-icon">üòî</div>          <h4>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫</h4>          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é: <a href="tel:+79162720932">+7 (916) 272-09-32</a></p>          <p>–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ WhatsApp: <a href="https:        </div>      </div>    `;
  }}if (typeof module !== 'undefined' && module.exports) {  module.exports = SmartCalculatorV2;
}function initStickyHeader() {  let lastScrollTop = 0;
  const stickyHeader = document.getElementById('stickyHeader');
  const header = document.getElementById('header');
  if (stickyHeader && header) {    window.addEventListener('scroll', () => {      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      const headerHeight = header.offsetHeight;
      if (scrollTop > headerHeight && scrollTop > lastScrollTop) {        stickyHeader.classList.add('visible');
      } else if (scrollTop <= headerHeight || scrollTop < lastScrollTop) {        stickyHeader.classList.remove('visible');
      }    });
  }}function initPromoTimer() {  let timeLeft = 15 * 60;
  const timerMinutes = document.getElementById('timerMinutes');
  const timerSeconds = document.getElementById('timerSeconds');
  const promoSection = document.querySelector('.promo-section');
  if (!timerMinutes || !timerSeconds) {    return;
  }  const timer = setInterval(() => {    const minutes = Math.floor(timeLeft / 60);
    const seconds = timeLeft % 60;
    timerMinutes.textContent = minutes.toString().padStart(2, '0');
    timerSeconds.textContent = seconds.toString().padStart(2, '0');
    timeLeft--;
    if (timeLeft < 0) {      clearInterval(timer);
      hidePromoTimer();
    }  }, 1000);
}function hidePromoTimer() {  const promoSection = document.querySelector('.promo-section');
  if (promoSection) {    promoSection.style.display = 'none';
  }}function updatePromoTimer() {  const timerMinutes = document.getElementById('timerMinutes');
  const timerSeconds = document.getElementById('timerSeconds');
  if (timerMinutes && timerSeconds) {    const savedTime = localStorage.getItem('promoTimerEnd');
    if (savedTime) {      const endTime = parseInt(savedTime);
      const now = Date.now();
      const timeLeft = Math.max(0, Math.floor((endTime - now) / 1000));
      if (timeLeft > 0) {        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        timerMinutes.textContent = minutes.toString().padStart(2, '0');
        timerSeconds.textContent = seconds.toString().padStart(2, '0');
        setTimeout(updatePromoTimer, 1000);
      } else {        hidePromoTimer();
      }    }  }}function initPrivacyConsent() {  const consentCheckbox = document.getElementById('privacyConsent');
  const submitBtn = document.getElementById('leadSubmitBtn') || document.getElementById('contactSubmitBtn');
  if (consentCheckbox && submitBtn) {    submitBtn.disabled = !consentCheckbox.checked;
    consentCheckbox.addEventListener('change', function() {      submitBtn.disabled = !this.checked;
      if (this.checked) {        submitBtn.classList.remove('btn-disabled');
        submitBtn.classList.add('btn-primary');
      } else {        submitBtn.classList.add('btn-disabled');
        submitBtn.classList.remove('btn-primary');
      }    });
  }}
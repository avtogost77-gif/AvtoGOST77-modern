// ========================================================
// üß™ A/B –¢–ï–°–¢ –ó–ê–ì–û–õ–û–í–ö–û–í - –ê–í–¢–û–ì–û–°–¢ V2.0
// –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
// ========================================================

class ABTestHeaders {
  constructor() {
    this.config = {
      testName: 'header_variants',
      variants: [
        {
          id: 'A',
          title: '–ê–≤—Ç–æ–ì–û–°–¢ - –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ | –ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏ –ø–æ –†–æ—Å—Å–∏–∏',
          h1: '–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞',
          subtitle: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏ –ø–æ –†–æ—Å—Å–∏–∏ —Å –ø–æ–¥–∞—á–µ–π –æ—Ç 2 —á–∞—Å–æ–≤',
          cta: '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 30 —Å–µ–∫—É–Ω–¥'
        },
        {
          id: 'B',
          title: '–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏ –ø–æ –†–æ—Å—Å–∏–∏ –æ—Ç 2 —á–∞—Å–æ–≤ | –ê–≤—Ç–æ–ì–û–°–¢ - –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞',
          h1: '–î–æ—Å—Ç–∞–≤–∫–∞ –≥—Ä—É–∑–æ–≤ –ø–æ –†–æ—Å—Å–∏–∏ –æ—Ç 2 —á–∞—Å–æ–≤',
          subtitle: '–ë—ã—Å—Ç—Ä–∞—è –ø–æ–¥–∞—á–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
          cta: '–ü–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—É—é —Ü–µ–Ω—É —Å–µ–π—á–∞—Å'
        },
        {
          id: 'C',
          title: '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ | –ê–≤—Ç–æ–ì–û–°–¢ - –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏',
          h1: '–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞ 30 —Å–µ–∫—É–Ω–¥',
          subtitle: '–£–º–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å —Ç–æ—á–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏. –ü–æ–¥–∞—á–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –æ—Ç 2 —á–∞—Å–æ–≤',
          cta: '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞ 30 —Å–µ–∫'
        }
      ],
      trafficSplit: 0.5, // 50% —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
      duration: 14, // –¥–Ω–µ–π
      minSample: 1000, // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞
      goals: ['scroll_to_calculator', 'calculator_complete', 'phone_click', 'form_submit']
    };
    
    this.currentVariant = null;
    this.init();
  }

  init() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ—Å—Ç
    if (!this.shouldShowTest()) {
      return;
    }

    // –í—ã–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç
    this.currentVariant = this.selectVariant();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç
    this.applyVariant(this.currentVariant);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç—Ä–µ–∫–∏–Ω–≥
    this.setupTracking();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    this.saveVariant();
    
    console.log(`A/B Test: Applied variant ${this.currentVariant.id}`);
  }

  shouldShowTest() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ —Ç–µ—Å—Ç–∞
    const testStart = localStorage.getItem('ab_test_start');
    if (testStart) {
      const daysPassed = (Date.now() - parseInt(testStart)) / (1000 * 60 * 60 * 24);
      if (daysPassed > this.config.duration) {
        return false;
      }
    } else {
      localStorage.setItem('ab_test_start', Date.now().toString());
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
    const testCount = parseInt(localStorage.getItem('ab_test_count') || '0');
    if (testCount < this.config.minSample) {
      localStorage.setItem('ab_test_count', (testCount + 1).toString());
    }

    // –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞
    return Math.random() < this.config.trafficSplit;
  }

  selectVariant() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    const savedVariant = localStorage.getItem('ab_test_variant');
    if (savedVariant) {
      const variant = this.config.variants.find(v => v.id === savedVariant);
      if (variant) {
        return variant;
      }
    }

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    const randomIndex = Math.floor(Math.random() * this.config.variants.length);
    return this.config.variants[randomIndex];
  }

  applyVariant(variant) {
    // –û–±–Ω–æ–≤–ª—è–µ–º title
    document.title = variant.title;

    // –û–±–Ω–æ–≤–ª—è–µ–º meta description
    const metaDescription = document.querySelector('meta[name="description"]');
    if (metaDescription) {
      metaDescription.setAttribute('content', variant.subtitle);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º Open Graph
    const ogTitle = document.querySelector('meta[property="og:title"]');
    if (ogTitle) {
      ogTitle.setAttribute('content', variant.h1);
    }

    const ogDescription = document.querySelector('meta[property="og:description"]');
    if (ogDescription) {
      ogDescription.setAttribute('content', variant.subtitle);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º Twitter Card
    const twitterTitle = document.querySelector('meta[name="twitter:title"]');
    if (twitterTitle) {
      twitterTitle.setAttribute('content', variant.h1);
    }

    const twitterDescription = document.querySelector('meta[name="twitter:description"]');
    if (twitterDescription) {
      twitterDescription.setAttribute('content', variant.subtitle);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º H1 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const h1Element = document.querySelector('h1');
    if (h1Element) {
      h1Element.textContent = variant.h1;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    const subtitleElement = document.querySelector('.hero-subtitle, .hero p, .hero-description');
    if (subtitleElement) {
      subtitleElement.textContent = variant.subtitle;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º CTA –∫–Ω–æ–ø–∫–∏
    const ctaButtons = document.querySelectorAll('.btn-primary, .hero-cta, .main-cta');
    ctaButtons.forEach(button => {
      if (button.textContent.includes('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å') || button.textContent.includes('–ü–æ–ª—É—á–∏—Ç—å')) {
        button.textContent = variant.cta;
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º sticky CTA –µ—Å–ª–∏ –µ—Å—Ç—å
    if (window.stickyCTA) {
      window.stickyCTA.setText('–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏', variant.subtitle);
    }
  }

  setupTracking() {
    // –¢—Ä–µ–∫–∏–Ω–≥ –ø–æ–∫–∞–∑–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    this.trackEvent('variant_shown', {
      variant: this.currentVariant.id,
      test_name: this.config.testName
    });

    // –¢—Ä–µ–∫–∏–Ω–≥ —Ü–µ–ª–µ–π
    this.config.goals.forEach(goal => {
      this.trackGoal(goal);
    });

    // –¢—Ä–µ–∫–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    this.trackTimeOnPage();
  }

  trackGoal(goalName) {
    switch (goalName) {
      case 'scroll_to_calculator':
        this.trackScrollToCalculator();
        break;
      case 'calculator_complete':
        this.trackCalculatorComplete();
        break;
      case 'phone_click':
        this.trackPhoneClick();
        break;
      case 'form_submit':
        this.trackFormSubmit();
        break;
    }
  }

  trackScrollToCalculator() {
    const calculator = document.getElementById('calculator');
    if (calculator) {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            this.trackEvent('scroll_to_calculator', {
              variant: this.currentVariant.id,
              test_name: this.config.testName
            });
            observer.disconnect();
          }
        });
      });
      observer.observe(calculator);
    }
  }

  trackCalculatorComplete() {
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    document.addEventListener('calculator_complete', (e) => {
      this.trackEvent('calculator_complete', {
        variant: this.currentVariant.id,
        test_name: this.config.testName,
        calculation_data: e.detail
      });
    });
  }

  trackPhoneClick() {
    const phoneLinks = document.querySelectorAll('a[href^="tel:"]');
    phoneLinks.forEach(link => {
      link.addEventListener('click', () => {
        this.trackEvent('phone_click', {
          variant: this.currentVariant.id,
          test_name: this.config.testName,
          phone_number: link.href.replace('tel:', '')
        });
      });
    });
  }

  trackFormSubmit() {
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
      form.addEventListener('submit', () => {
        this.trackEvent('form_submit', {
          variant: this.currentVariant.id,
          test_name: this.config.testName,
          form_id: form.id || 'unknown'
        });
      });
    });
  }

  trackTimeOnPage() {
    let startTime = Date.now();
    
    window.addEventListener('beforeunload', () => {
      const timeOnPage = Date.now() - startTime;
      this.trackEvent('time_on_page', {
        variant: this.currentVariant.id,
        test_name: this.config.testName,
        time_seconds: Math.round(timeOnPage / 1000)
      });
    });
  }

  trackEvent(eventName, data = {}) {
    // Google Analytics
    if (typeof gtag !== 'undefined') {
      gtag('event', eventName, {
        event_category: 'ab_test',
        event_label: this.config.testName,
        custom_parameter_variant: this.currentVariant.id,
        ...data
      });
    }

    // Yandex Metrika
    if (typeof ym !== 'undefined') {
      ym(103413788, 'reachGoal', eventName, {
        test_name: this.config.testName,
        variant: this.currentVariant.id,
        ...data
      });
    }

    // –õ–æ–∫–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log('A/B Test Event:', eventName, {
      variant: this.currentVariant.id,
      test_name: this.config.testName,
      ...data
    });
  }

  saveVariant() {
    localStorage.setItem('ab_test_variant', this.currentVariant.id);
    localStorage.setItem('ab_test_name', this.config.testName);
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  getTestResults() {
    const results = {
      test_name: this.config.testName,
      variant: this.currentVariant.id,
      start_time: localStorage.getItem('ab_test_start'),
      sample_size: localStorage.getItem('ab_test_count'),
      goals: {}
    };

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ GA4 (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    if (typeof gtag !== 'undefined') {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ GA4 API
      console.log('GA4 data available for analysis');
    }

    return results;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  forceVariant(variantId) {
    const variant = this.config.variants.find(v => v.id === variantId);
    if (variant) {
      this.currentVariant = variant;
      this.applyVariant(variant);
      console.log(`Forced variant ${variantId}`);
    }
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  window.abTestHeaders = new ABTestHeaders();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = ABTestHeaders;
}

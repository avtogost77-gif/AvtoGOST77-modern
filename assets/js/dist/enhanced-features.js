/**
 * UX –£–õ–£–ß–®–ï–ù–ò–Ø - TL;DR, –ê–ö–ö–û–†–î–ï–û–ù–´, STICKY TOC
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞
 */

class UXImprovements {
  constructor() {
    this.init();
  }

  init() {
    this.setupAccordions();
    this.setupStickyTOC();
    this.setupTLDR();
    this.setupLazyLoading();
    this.setupScrollAnimations();
    this.setupCalculatorEnhancements();
    this.setupMobileStickyActions();
  }

  // –ê–ö–ö–û–†–î–ï–û–ù–´
  setupAccordions() {
    const accordions = document.querySelectorAll('.accordion');
    
    accordions.forEach(accordion => {
      const trigger = accordion.querySelector('.accordion-trigger');
      const content = accordion.querySelector('.accordion-content');
      
      if (trigger && content) {
        trigger.addEventListener('click', () => {
          const isOpen = accordion.classList.contains('open');
          
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
          accordions.forEach(acc => {
            if (acc !== accordion) {
              acc.classList.remove('open');
              const accContent = acc.querySelector('.accordion-content');
              if (accContent) {
                accContent.style.maxHeight = '0px';
              }
            }
          });
          
          // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π
          if (isOpen) {
            accordion.classList.remove('open');
            content.style.maxHeight = '0px';
          } else {
            accordion.classList.add('open');
            content.style.maxHeight = content.scrollHeight + 'px';
          }
        });
      }
    });
  }

  // –î–û–ü. CTA –î–õ–Ø –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê
  setupCalculatorEnhancements() {
    const btn = document.getElementById('downloadPdf');
    if (btn) {
      btn.addEventListener('click', () => {
        if (window.calculatorV2 && typeof window.calculatorV2.downloadPDF === 'function') {
          window.calculatorV2.downloadPDF();
        } else if (window.pdfLeadMagnet) {
          window.pdfLeadMagnet.showContactModal();
        }
      });
    }
  }

  // –õ–ò–ü–ö–ò–ï –ö–ù–û–ü–ö–ò –î–õ–Ø –ú–û–ë–ò–õ–¨–ù–´–•
  setupMobileStickyActions() {
    if (window.matchMedia('(max-width: 768px)').matches) {
      const exists = document.querySelector('.mobile-sticky-actions');
      if (exists) return;
      const bar = document.createElement('div');
      bar.className = 'mobile-sticky-actions';
      bar.innerHTML = `
        <a href="tel:+79162720932" class="msa-item">üìû –ó–≤–æ–Ω–æ–∫</a>
        <a href="https://wa.me/79162720932" target="_blank" class="msa-item">üí¨ WhatsApp</a>
        <a href="#calculator" class="msa-item">üßÆ –†–∞—Å—á–µ—Ç</a>
      `;
      document.body.appendChild(bar);
    }
  }

  // STICKY TOC (–û–ì–õ–ê–í–õ–ï–ù–ò–ï)
  setupStickyTOC() {
    const toc = document.querySelector('.sticky-toc');
    if (!toc) return;

    const headings = document.querySelectorAll('h2, h3');
    const tocList = toc.querySelector('.toc-list');
    
    if (!tocList) return;

    // –°–æ–∑–¥–∞–µ–º –ø—É–Ω–∫—Ç—ã TOC
    headings.forEach((heading, index) => {
      const id = heading.id || `heading-${index}`;
      heading.id = id;
      
      const tocItem = document.createElement('li');
      tocItem.className = `toc-item toc-${heading.tagName.toLowerCase()}`;
      
      const tocLink = document.createElement('a');
      tocLink.href = `#${id}`;
      tocLink.textContent = heading.textContent;
      tocLink.addEventListener('click', (e) => {
        e.preventDefault();
        heading.scrollIntoView({ behavior: 'smooth' });
      });
      
      tocItem.appendChild(tocLink);
      tocList.appendChild(tocItem);
    });

    // Sticky –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    let isSticky = false;
    const tocOffset = toc.offsetTop;

    window.addEventListener('scroll', () => {
      if (window.pageYOffset > tocOffset && !isSticky) {
        toc.classList.add('sticky');
        isSticky = true;
      } else if (window.pageYOffset <= tocOffset && isSticky) {
        toc.classList.remove('sticky');
        isSticky = false;
      }
    });
  }

  // TL;DR (–ö–†–ê–¢–ö–û–ï –°–û–î–ï–†–ñ–ê–ù–ò–ï)
  setupTLDR() {
    const tldr = document.querySelector('.tldr');
    if (!tldr) return;

    const content = tldr.querySelector('.tldr-content');
    const toggle = tldr.querySelector('.tldr-toggle');
    
    if (!content || !toggle) return;

    toggle.addEventListener('click', () => {
      const isExpanded = tldr.classList.contains('expanded');
      
      if (isExpanded) {
        tldr.classList.remove('expanded');
        toggle.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏';
      } else {
        tldr.classList.add('expanded');
        toggle.textContent = '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏';
      }
    });
  }

  // LAZY LOADING –î–õ–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
  setupLazyLoading() {
    const images = document.querySelectorAll('img[data-src]');
    
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target;
          img.src = img.dataset.src;
          img.classList.remove('lazy');
          img.classList.add('loaded');
          observer.unobserve(img);
        }
      });
    });

    images.forEach(img => {
      img.classList.add('lazy');
      imageObserver.observe(img);
    });
  }

  // –ê–ù–ò–ú–ê–¶–ò–ò –ü–†–ò –°–ö–†–û–õ–õ–ï
  setupScrollAnimations() {
    const elements = document.querySelectorAll('.animate-on-scroll');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
        }
      });
    }, {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    });

    elements.forEach(el => {
      observer.observe(el);
    });
  }

  // –°–û–ó–î–ê–ù–ò–ï –ê–ö–ö–û–†–î–ï–û–ù–ê
  createAccordion(title, content, isOpen = false) {
    const accordion = document.createElement('div');
    accordion.className = `accordion ${isOpen ? 'open' : ''}`;
    
    accordion.innerHTML = `
      <div class="accordion-trigger">
        <span class="accordion-title">${title}</span>
        <span class="accordion-icon">${isOpen ? '‚àí' : '+'}</span>
      </div>
      <div class="accordion-content" style="max-height: ${isOpen ? 'none' : '0px'}">
        <div class="accordion-body">
          ${content}
        </div>
      </div>
    `;
    
    return accordion;
  }

  // –°–û–ó–î–ê–ù–ò–ï TL;DR
  createTLDR(summary, details) {
    const tldr = document.createElement('div');
    tldr.className = 'tldr';
    
    tldr.innerHTML = `
      <div class="tldr-header">
        <h3>üìã –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</h3>
        <button class="tldr-toggle">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏</button>
      </div>
      <div class="tldr-content">
        <div class="tldr-summary">
          ${summary}
        </div>
        <div class="tldr-details">
          ${details}
        </div>
      </div>
    `;
    
    return tldr;
  }

  // –°–û–ó–î–ê–ù–ò–ï STICKY TOC
  createStickyTOC() {
    const toc = document.createElement('div');
    toc.className = 'sticky-toc';
    
    toc.innerHTML = `
      <div class="toc-header">
        <h3>üìë –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</h3>
      </div>
      <ul class="toc-list"></ul>
    `;
    
    return toc;
  }

  // –ö–ê–†–¢–û–ß–ö–ò –ü–†–ï–ò–ú–£–©–ï–°–¢–í
  createBenefitCard(icon, title, description) {
    const card = document.createElement('div');
    card.className = 'benefit-card animate-on-scroll';
    
    card.innerHTML = `
      <div class="benefit-icon">${icon}</div>
      <h4 class="benefit-title">${title}</h4>
      <p class="benefit-description">${description}</p>
    `;
    
    return card;
  }

  // –ú–ò–ù–ò-–ö–ï–ô–°
  createMiniCase(title, stats, description) {
    const caseCard = document.createElement('div');
    caseCard.className = 'mini-case animate-on-scroll';
    
    caseCard.innerHTML = `
      <div class="case-header">
        <h4>${title}</h4>
      </div>
      <div class="case-stats">
        ${stats.map(stat => `<div class="case-stat"><span class="stat-value">${stat.value}</span><span class="stat-label">${stat.label}</span></div>`).join('')}
      </div>
      <p class="case-description">${description}</p>
    `;
    
    return caseCard;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
  window.uxImprovements = new UXImprovements();
});
// ========================================
// TL;DR –ò STICKY TOC –ö–û–ú–ü–û–ù–ï–ù–¢–´
// ========================================

class TLDRComponent {
  constructor() {
    this.init();
  }

  init() {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
    window.toggleDetails = (button) => {
      const tldrBlock = button.closest('.tldr-block');
      const content = tldrBlock.nextElementSibling;
      
      if (!content || !content.classList.contains('tldr-content')) {
        console.error('–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è TL;DR –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      if (content.style.display === 'none' || !content.style.display) {
        content.style.display = 'block';
        button.textContent = '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏';
      } else {
        content.style.display = 'none';
        button.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏';
      }
    };
  }
}

class StickyTOC {
  constructor() {
    this.toc = null;
    this.init();
  }

  init() {
    // –ù–∞—Ö–æ–¥–∏–º TOC –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    this.toc = document.querySelector('.sticky-toc');
    if (!this.toc) return;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ
    this.generateTOC();
    
    // –î–æ–±–∞–≤–ª—è–µ–º sticky –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    this.setupSticky();
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ–∫—Ü–∏—é
    this.trackActiveSection();
  }

  generateTOC() {
    const tocList = this.toc.querySelector('.toc-list');
    if (!tocList) return;
    
    const headings = document.querySelectorAll('h2:not(.no-toc), h3:not(.no-toc)');
    
    headings.forEach((heading, index) => {
      // –î–æ–±–∞–≤–ª—è–µ–º ID –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!heading.id) {
        heading.id = `section-${index}`;
      }
      
      const li = document.createElement('li');
      const a = document.createElement('a');
      
      a.href = `#${heading.id}`;
      a.textContent = heading.textContent;
      a.className = heading.tagName === 'H2' ? 'toc-h2' : 'toc-h3';
      
      // –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª
      a.addEventListener('click', (e) => {
        e.preventDefault();
        heading.scrollIntoView({ behavior: 'smooth', block: 'start' });
      });
      
      li.appendChild(a);
      tocList.appendChild(li);
    });
  }

  setupSticky() {
    let lastScrollTop = 0;
    
    window.addEventListener('scroll', () => {
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      
      if (scrollTop > 200) {
        this.toc.classList.add('sticky');
      } else {
        this.toc.classList.remove('sticky');
      }
      
      lastScrollTop = scrollTop;
    });
  }

  trackActiveSection() {
    const observerOptions = {
      rootMargin: '-20% 0px -70% 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö
          document.querySelectorAll('.toc-list a').forEach(link => {
            link.classList.remove('active');
          });
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–º—É
          const activeLink = document.querySelector(`.toc-list a[href="#${entry.target.id}"]`);
          if (activeLink) {
            activeLink.classList.add('active');
          }
        }
      });
    }, observerOptions);
    
    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    document.querySelectorAll('h2[id], h3[id]').forEach(heading => {
      observer.observe(heading);
    });
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
  new TLDRComponent();
  new StickyTOC();
});
// –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞

document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    initCalculatorUI();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
    setupInputHandlers();
    
    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    setupLiveCalculation();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
function initCalculatorUI() {
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    const calculatorForm = document.getElementById('calculatorForm');
    const calculatorResult = document.getElementById('calculatorResult');
    const calculateButton = document.getElementById('calculateButton');
    const newCalculationButton = document.getElementById('newCalculation');
    
    if (!calculatorForm || !calculatorResult || !calculateButton) return;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—á–µ—Ç–∞
    calculateButton.addEventListener('click', function(e) {
        e.preventDefault();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã
        const fromCity = document.getElementById('fromCity');
        const toCity = document.getElementById('toCity');
        const weight = document.getElementById('weight');
        
        if (!fromCity.value || !toCity.value || !weight.value) {
            // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
            if (!fromCity.value) fromCity.classList.add('invalid');
            if (!toCity.value) toCity.classList.add('invalid');
            if (!weight.value) weight.classList.add('invalid');
            
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        calculateButton.disabled = true;
        calculateButton.innerHTML = '<span class="loading-spinner"></span> –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º...';
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(function() {
            // –í—ã–∑—ã–≤–∞–µ–º —Ä–∞—Å—á–µ—Ç –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
            if (typeof calculateDelivery === 'function') {
                calculateDelivery();
            } else {
                // –§–æ–ª–±—ç–∫, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                showDummyResult();
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            calculateButton.disabled = false;
            calculateButton.textContent = '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            updateProgressBar(2);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            calculatorResult.style.display = 'block';
            
            // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
            document.getElementById('step1').style.display = 'none';
            document.getElementById('step3').style.display = 'none';
        }, 800);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç"
    if (newCalculationButton) {
        newCalculationButton.addEventListener('click', function() {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
            calculatorForm.reset();
            
            // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            calculatorResult.style.display = 'none';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
            document.getElementById('step1').style.display = 'block';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            updateProgressBar(1);
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
function setupInputHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ invalid –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
    const formControls = document.querySelectorAll('.form-control');
    formControls.forEach(function(control) {
        control.addEventListener('focus', function() {
            this.classList.remove('invalid');
        });
    });
    
    // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const fromCity = document.getElementById('fromCity');
    if (fromCity) {
        setTimeout(function() {
            fromCity.focus();
        }, 500);
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –∫ –ø–æ–ª—è–º –≤–≤–æ–¥–∞
    addInputIcons();
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –∫ –ø–æ–ª—è–º –≤–≤–æ–¥–∞
function addInputIcons() {
    // –ò–∫–æ–Ω–∫–∞ –¥–ª—è –ø–æ–ª—è "–û—Ç–∫—É–¥–∞"
    const fromCityInput = document.getElementById('fromCity');
    if (fromCityInput && fromCityInput.parentNode.classList.contains('input-with-icon')) {
        const fromIcon = document.createElement('span');
        fromIcon.className = 'input-icon';
        fromIcon.innerHTML = '<svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor"><path d="M12,11.5A2.5,2.5 0 0,1 9.5,9A2.5,2.5 0 0,1 12,6.5A2.5,2.5 0 0,1 14.5,9A2.5,2.5 0 0,1 12,11.5M12,2A7,7 0 0,0 5,9C5,14.25 12,22 12,22C12,22 19,14.25 19,9A7,7 0 0,0 12,2Z"/></svg>';
        fromCityInput.parentNode.appendChild(fromIcon);
    }
    
    // –ò–∫–æ–Ω–∫–∞ –¥–ª—è –ø–æ–ª—è "–ö—É–¥–∞"
    const toCityInput = document.getElementById('toCity');
    if (toCityInput && toCityInput.parentNode.classList.contains('input-with-icon')) {
        const toIcon = document.createElement('span');
        toIcon.className = 'input-icon';
        toIcon.innerHTML = '<svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor"><path d="M12,11.5A2.5,2.5 0 0,1 9.5,9A2.5,2.5 0 0,1 12,6.5A2.5,2.5 0 0,1 14.5,9A2.5,2.5 0 0,1 12,11.5M12,2A7,7 0 0,0 5,9C5,14.25 12,22 12,22C12,22 19,14.25 19,9A7,7 0 0,0 12,2Z"/></svg>';
        toCityInput.parentNode.appendChild(toIcon);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
function updateProgressBar(step) {
    const progressSteps = document.querySelectorAll('.progress-step');
    const progressFill = document.getElementById('progressFill');
    
    if (!progressSteps.length || !progressFill) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–≥
    progressSteps.forEach(function(stepEl) {
        const stepNumber = parseInt(stepEl.getAttribute('data-step'));
        
        if (stepNumber === step) {
            stepEl.classList.add('active');
        } else {
            stepEl.classList.remove('active');
        }
        
        if (stepNumber < step) {
            stepEl.classList.add('completed');
        } else {
            stepEl.classList.remove('completed');
        }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    const fillPercentage = ((step - 1) / (progressSteps.length - 1)) * 100;
    progressFill.style.width = fillPercentage + '%';
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
function setupLiveCalculation() {
    const fromCity = document.getElementById('fromCity');
    const toCity = document.getElementById('toCity');
    const weight = document.getElementById('weight');
    const volume = document.getElementById('volume');
    const isConsolidated = document.getElementById('isConsolidated');
    
    if (!fromCity || !toCity || !weight || !volume || !isConsolidated) return;
    
    // –¢–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    let calculationTimer;
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    const calculatePreview = function() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        if (!fromCity.value || !toCity.value || !weight.value) return;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        const calculateButton = document.getElementById('calculateButton');
        if (calculateButton) {
            calculateButton.innerHTML = '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç...';
        }
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–∑–≤–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞
        // –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑–æ–≤—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
        
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        setTimeout(function() {
            if (calculateButton) {
                calculateButton.innerHTML = '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å (~5000-8000 ‚ÇΩ)';
            }
        }, 500);
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
    const inputChangeHandler = function() {
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        clearTimeout(calculationTimer);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        calculationTimer = setTimeout(calculatePreview, 1000);
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    fromCity.addEventListener('input', inputChangeHandler);
    toCity.addEventListener('input', inputChangeHandler);
    weight.addEventListener('input', inputChangeHandler);
    volume.addEventListener('input', inputChangeHandler);
    isConsolidated.addEventListener('change', inputChangeHandler);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ–º–æ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
function showDummyResult() {
    const resultPrice = document.getElementById('resultPrice');
    const resultDetails = document.getElementById('resultDetails');
    
    if (!resultPrice || !resultDetails) return;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—É
    resultPrice.textContent = '7,500 ‚ÇΩ';
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏
    resultDetails.innerHTML = `
        <div class="result-detail-item">
            <div class="result-detail-label">–ú–∞—Ä—à—Ä—É—Ç</div>
            <div class="result-detail-value">${document.getElementById('fromCity').value} ‚Üí ${document.getElementById('toCity').value}</div>
        </div>
        <div class="result-detail-item">
            <div class="result-detail-label">–í–µ—Å –≥—Ä—É–∑–∞</div>
            <div class="result-detail-value">${document.getElementById('weight').value} –∫–≥</div>
        </div>
        <div class="result-detail-item">
            <div class="result-detail-label">–û–±—ä–µ–º</div>
            <div class="result-detail-value">${document.getElementById('volume').value || '0'} –º¬≥</div>
        </div>
        <div class="result-detail-item">
            <div class="result-detail-label">–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏</div>
            <div class="result-detail-value">${document.getElementById('isConsolidated').checked ? '–°–±–æ—Ä–Ω—ã–π –≥—Ä—É–∑' : '–û—Ç–¥–µ–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞'}</div>
        </div>
        <div class="result-detail-item">
            <div class="result-detail-label">–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏</div>
            <div class="result-detail-value">1-2 –¥–Ω—è</div>
        </div>
    `;
}

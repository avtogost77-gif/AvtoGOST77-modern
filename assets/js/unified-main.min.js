








let smartCalculatorV2;






function animateActiveUsers(){
 const counter = document.getElementById('activeUsers');
 if (!counter) return;
 
 const minUsers = 3;
 const maxUsers = 12;
 
 setInterval(() =>{
 const currentValue = parseInt(counter.textContent);
 const change = Math.random() > 0.7 ? (Math.random() > 0.5 ? 1 : -1) : 0;
 let newValue = currentValue + change;
 
 
 newValue = Math.max(minUsers, Math.min(maxUsers, newValue));
 
 if (newValue !== currentValue){
 counter.style.transform = 'scale(1.1)';
 setTimeout(() =>{
 counter.textContent = newValue;
 counter.style.transform = 'scale(1)';
}, 150);
}
}, Math.random() * 10000 + 5000);
}


function openUrgentModal(){
 const modal = createModal('urgent',{
 title: '‚ö° –°—Ä–æ—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ 2 —á–∞—Å–∞',
 subtitle: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–∏–Ω—É—Ç',
 fields: [
{name: 'urgentName', type: 'text', placeholder: '–í–∞—à–µ –∏–º—è', required: true},
{name: 'urgentPhone', type: 'tel', placeholder: '+7 (999) 123-45-67', required: true},
{name: 'urgentFrom', type: 'text', placeholder: '–û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å –≥—Ä—É–∑', required: true},
{name: 'urgentTo', type: 'text', placeholder: '–ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å', required: true},
{name: 'urgentCargo', type: 'text', placeholder: '–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞', required: true}
 ],
 buttonText: '–ó–∞–∫–∞–∑–∞—Ç—å —Å—Ä–æ—á–Ω–æ',
 source: 'urgent-delivery'
});
}


function openSavingsModal(){
 const modal = createModal('savings',{
 title: 'üí∞ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞—É–¥–∏—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤',
 subtitle: '–£–∑–Ω–∞–π—Ç–µ, —Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –∑–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É',
 fields: [
{name: 'savingsName', type: 'text', placeholder: '–í–∞—à–µ –∏–º—è', required: true},
{name: 'savingsPhone', type: 'tel', placeholder: '+7 (999) 123-45-67', required: true},
{name: 'savingsCompany', type: 'text', placeholder: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏', required: true},
{name: 'savingsMonthlySpend', type: 'number', placeholder: '–¢—Ä–∞—Ç–∏—Ç–µ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É –≤ –º–µ—Å—è—Ü (‚ÇΩ)', required: true},
{name: 'savingsRoutes', type: 'text', placeholder: '–û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã', required: false}
 ],
 buttonText: '–ü–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏—Ç',
 source: 'savings-audit',
 extraInfo: '–ê—É–¥–∏—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤'
});
}


function openConsultationModal(){
 const modal = createModal('consultation',{
 title: 'ü§ù –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞',
 subtitle: '15 –º–∏–Ω—É—Ç —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –ø–æ –ª–æ–≥–∏—Å—Ç–∏–∫–µ',
 fields: [
{name: 'consultName', type: 'text', placeholder: '–í–∞—à–µ –∏–º—è', required: true},
{name: 'consultPhone', type: 'tel', placeholder: '+7 (999) 123-45-67', required: true},
{name: 'consultEmail', type: 'email', placeholder: 'email@company.ru', required: false},
{name: 'consultTopic', type: 'select', placeholder: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É', options: [
 '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤',
 '–í—ã–±–æ—Ä –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞', 
 '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏',
 '–°—Ä–æ—á–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏',
 '–î—Ä—É–≥–æ–µ'
 ], required: true},
{name: 'consultTime', type: 'select', placeholder: '–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è', options: [
 '–°–µ–≥–æ–¥–Ω—è –¥–æ 18:00',
 '–ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º',
 '–ó–∞–≤—Ç—Ä–∞ –≤–µ—á–µ—Ä–æ–º',
 '–í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏'
 ], required: true}
 ],
 buttonText: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é',
 source: 'consultation',
 extraInfo: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ'
});
}


function openComparisonModal(){
 const modal = createModal('comparison',{
 title: 'üìä –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ö–ü',
 subtitle: '–ü–æ–ª—É—á–∏—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞',
 fields: [
{name: 'companyName', type: 'text', placeholder: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏', required: true},
{name: 'contactName', type: 'text', placeholder: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ', required: true},
{name: 'contactPhone', type: 'tel', placeholder: '+7 (999) 123-45-67', required: true},
{name: 'contactEmail', type: 'email', placeholder: 'email@company.ru', required: true},
{name: 'cargoTypes', type: 'text', placeholder: '–¢–∏–ø—ã –≥—Ä—É–∑–æ–≤', required: true},
{name: 'monthlyVolume', type: 'text', placeholder: '–û–±—ä–µ–º –ø–µ—Ä–µ–≤–æ–∑–æ–∫ –≤ –º–µ—Å—è—Ü', required: true},
{name: 'currentProvider', type: 'text', placeholder: '–¢–µ–∫—É—â–∏–π –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)', required: false}
 ],
 buttonText: '–ü–æ–ª—É—á–∏—Ç—å –ö–ü',
 source: 'commercial-offer',
 extraInfo: '–ö–ü –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤'
});
}


function createModal(type, config){
 
 const modalHTML = `
 <div class="modal-overlay" id="modal-${type}">
 <div class="modal-content">
 <div class="modal-header">
 <h3>${config.title}</h3>
 <button class="modal-close" onclick="closeModal('${type}')">&times;</button>
 </div>
 <div class="modal-body">
 <p class="modal-subtitle">${config.subtitle}</p>
 <form class="modal-form" onsubmit="submitModal(event, '${type}', '${config.source}')">
 ${config.fields.map(field =>{
 if (field.type === 'select'){
 return `
 <div class="form-group">
 <select name="${field.name}" ${field.required ? 'required' : ''}>
 <option value="">${field.placeholder}</option>
 ${field.options.map(option => `<option value="${option}">${option}</option>`).join('')}
 </select>
 </div>
 `;
}else{
 return `
 <div class="form-group">
 <input type="${field.type}" name="${field.name}" placeholder="${field.placeholder}" ${field.required ? 'required' : ''}>
 </div>
 `;
}
}).join('')}
 ${config.extraInfo ? `<p class="modal-info">${config.extraInfo}</p>` : ''}
 <button type="submit" class="btn btn-primary btn-lg">
 ${config.buttonText}
 </button>
 </form>
 </div>
 </div>
 </div>
 `;
 
 
 document.body.insertAdjacentHTML('beforeend', modalHTML);
 
 
 const modal = document.getElementById(`modal-${type}`);
 modal.style.display = 'flex';
 document.body.style.overflow = 'hidden';
 
 
 modal.addEventListener('click', (e) =>{
 if (e.target === modal){
 closeModal(type);
}
});
 
 return modal;
}


function closeModal(type){
 const modal = document.getElementById(`modal-${type}`);
 if (modal){
 modal.remove();
 document.body.style.overflow = '';
}
}


async function submitModal(event, type, source){
 event.preventDefault();
 
 const form = event.target;
 const formData = new FormData(form);
 const data = Object.fromEntries(formData.entries());
 
 
 const button = form.querySelector('button[type="submit"]');
 const originalText = button.textContent;
 button.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
 button.disabled = true;
 
 try{
 
 const success = await sendToTelegram({
 ...data,
 source: source,
 timestamp: new Date().toLocaleString('ru-RU')
});
 
 if (success){
 
 form.innerHTML = `
 <div class="success-message">
 <div class="success-icon">‚úÖ</div>
 <h4>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</h4>
 <p>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç</p>
 <button class="btn btn-outline" onclick="closeModal('${type}')">–ó–∞–∫—Ä—ã—Ç—å</button>
 </div>
 `;
 
 
 setTimeout(() => closeModal(type), 5000);
 
}else{
 throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
}
 
}catch (error){
 button.textContent = '–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑';
 button.disabled = false;
 
 setTimeout(() =>{
 button.textContent = originalText;
}, 2000);
}
}


const modalStyles = `
 .modal-overlay{
 position: fixed;
 top: 0;
 left: 0;
 width: 100%;
 height: 100%;
 background: rgba(0, 0, 0, 0.8);
 display: flex;
 justify-content: center;
 align-items: center;
 z-index: 10000;
 backdrop-filter: blur(4px);
}
 
 .modal-content{
 background: white;
 border-radius: 16px;
 max-width: 500px;
 width: 90%;
 max-height: 90vh;
 overflow-y: auto;
 box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
}
 
 .modal-header{
 display: flex;
 justify-content: space-between;
 align-items: center;
 padding: 2rem 2rem 0;
}
 
 .modal-header h3{
 margin: 0;
 font-size: 1.5rem;
 color: var(--neutral-900);
}
 
 .modal-close{
 background: none;
 border: none;
 font-size: 2rem;
 cursor: pointer;
 color: var(--neutral-500);
 padding: 0;
 width: 2rem;
 height: 2rem;
 display: flex;
 align-items: center;
 justify-content: center;
}
 
 .modal-body{
 padding: 2rem;
}
 
 .modal-subtitle{
 color: var(--neutral-600);
 margin-bottom: 1.5rem;
}
 
 .modal-form .form-group{
 margin-bottom: 1rem;
}
 
 .modal-form input,
 .modal-form select{
 width: 100%;
 padding: 0.75rem;
 border: 2px solid var(--neutral-200);
 border-radius: 8px;
 font-size: 1rem;
 transition: border-color var(--transition-fast);
}
 
 .modal-form input:focus,
 .modal-form select:focus{
 outline: none;
 border-color: var(--primary-500);
}
 
 .modal-info{
 font-size: 0.875rem;
 color: var(--neutral-600);
 background: var(--neutral-50);
 padding: 1rem;
 border-radius: 8px;
 margin: 1rem 0;
}
 
 .success-message{
 text-align: center;
 padding: 2rem;
}
 
 .success-icon{
 font-size: 3rem;
 margin-bottom: 1rem;
}
 
 .success-message h4{
 color: var(--success);
 margin-bottom: 1rem;
}
`;


if (!document.getElementById('modal-styles')){
 const styleSheet = document.createElement('style');
 styleSheet.id = 'modal-styles';
 styleSheet.textContent = modalStyles;
 document.head.appendChild(styleSheet);
}






let exitIntentShown = false;


function initExitIntent(){
 
 if (sessionStorage.getItem('exitIntentShown') === 'true'){
 exitIntentShown = true;
 return;
}
 
 
 const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth <= 768;
 
 if (isMobile){
 
 let isEarlySession = true;
 setTimeout(() =>{
 isEarlySession = false;
}, 120000);
 
 
 let lastScrollY = window.scrollY;
 let scrollUpCount = 0;
 
 window.addEventListener('scroll', () =>{
 const currentScrollY = window.scrollY;
 
 
 if (currentScrollY < lastScrollY && currentScrollY > 200){
 scrollUpCount++;
 
 if (scrollUpCount >= 5 && !exitIntentShown && !isEarlySession){
 
}
}else{
 scrollUpCount = Math.max(0, scrollUpCount - 1);
}
 
 lastScrollY = currentScrollY;
});
 
 
 setTimeout(() =>{
 if (!exitIntentShown && !isEarlySession){
 
}
}, 600000);
 
}else{
 
 
 
 let isEarlyDesktopSession = true;
 setTimeout(() =>{
 isEarlyDesktopSession = false;
}, 30000);
 
 
 document.addEventListener('mouseleave', function(e){
 
 if (e.clientY <= 0 && !exitIntentShown && !isEarlyDesktopSession){
 
}
});
 
 
 window.addEventListener('beforeunload', function(e){
 if (!exitIntentShown && !isEarlyDesktopSession){
 
 
}
});
 
 
 let inactivityTimer = setTimeout(() =>{
 if (!exitIntentShown && !isEarlyDesktopSession){
 
}
}, 300000);
 
 
 document.addEventListener('mousemove', () =>{
 clearTimeout(inactivityTimer);
 inactivityTimer = setTimeout(() =>{
 if (!exitIntentShown && !isEarlyDesktopSession){
 
}
}, 300000);
});
}
}


function showExitIntentPopup(){
 if (exitIntentShown) return;
 
 exitIntentShown = true;
 sessionStorage.setItem('exitIntentShown', 'true');
 
 
 const popup = document.getElementById('exitIntentPopup');
 if (!popup){
 return;
}
 
 
 popup.style.display = 'flex';
 setTimeout(() =>{
 popup.classList.add('show');
}, 10);
 
 
 startExitCountdown();
 
 
 animateExitProof();
}


window.closeExitPopup = function(){
 const popup = document.getElementById('exitIntentPopup');
 if (popup){
 popup.classList.remove('show');
 setTimeout(() =>{
 popup.style.display = 'none';
}, 300);
}
};


function createExitIntentPopup(discount){
 const popupHTML = `
 <div class="exit-intent-overlay" id="exitIntentPopup">
 <div class="exit-intent-content">
 <div class="exit-intent-header">
 <div class="exit-emoji">üõë</div>
 <h3>–ü–æ–¥–æ–∂–¥–∏—Ç–µ! –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</h3>
 <button class="exit-close" onclick="closeExitIntent()">&times;</button>
 </div>
 
 <div class="exit-intent-body">
 <div class="discount-badge">
 <span class="discount-percent">${discount}%</span>
 <span class="discount-text">–°–ö–ò–î–ö–ê</span>
 </div>
 
 <h4>–ü–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–æ —Å–∫–∏–¥–∫–æ–π ${discount}%</h4>
 <p>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å!</p>
 
 <div class="urgency-timer-exit">
 <span class="timer-text">–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑:</span>
 <div class="countdown" id="exitCountdown">
 <span id="exitMinutes">14</span>:<span id="exitSeconds">59</span>
 </div>
 </div>
 
 <form class="exit-form" onsubmit="submitExitForm(event, ${discount})">
 <input type="text" name="exitName" placeholder="–í–∞—à–µ –∏–º—è" required>
 <input type="tel" name="exitPhone" placeholder="+7 (999) 123-45-67" required>
 <input type="text" name="exitRoute" placeholder="–ú–∞—Ä—à—Ä—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞ - –°–ü–±)" required>
 
 <button type="submit" class="btn btn-success btn-lg exit-btn">
 üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á–µ—Ç —Å–æ —Å–∫–∏–¥–∫–æ–π ${discount}%
 </button>
 
 <p class="exit-guarantee">
 ‚úÖ –†–∞—Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç<br>
 ‚úÖ –ë–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –¥–æ–ø–ª–∞—Ç<br>
 ‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥: <strong>EXIT${discount}</strong>
 </p>
 </form>
 
 <div class="exit-social-proof">
 <span class="proof-text">üî• –£–∂–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å:</span>
 <span class="proof-count" id="exitProofCount">127</span>
 <span class="proof-label">—á–µ–ª–æ–≤–µ–∫ —Å–µ–≥–æ–¥–Ω—è</span>
 </div>
 </div>
 </div>
 </div>
 `;
 
 document.body.insertAdjacentHTML('beforeend', popupHTML);
 
 const popup = document.getElementById('exitIntentPopup');
 
 
 popup.addEventListener('click', (e) =>{
 if (e.target === popup){
 closeExitIntent();
}
});
 
 
 startExitCountdown();
 
 
 animateExitProof();
 
 return popup;
}


function startExitCountdown(){
 let totalSeconds = 15 * 60 - 1;
 
 const countdown = setInterval(() =>{
 const minutes = Math.floor(totalSeconds / 60);
 const seconds = totalSeconds % 60;
 
 const minutesEl = document.getElementById('exitMinutes');
 const secondsEl = document.getElementById('exitSeconds');
 
 if (minutesEl && secondsEl){
 minutesEl.textContent = minutes.toString().padStart(2, '0');
 secondsEl.textContent = seconds.toString().padStart(2, '0');
 
 
 if (totalSeconds <= 60){
 const countdownEl = document.getElementById('exitCountdown');
 if (countdownEl){
 countdownEl.classList.add('urgent');
}
}
}else{
 
 clearInterval(countdown);
 return;
}
 
 totalSeconds--;
 
 if (totalSeconds < 0){
 clearInterval(countdown);
 
 if (minutesEl && secondsEl){
 minutesEl.textContent = '00';
 secondsEl.textContent = '00';
}
}
}, 1000);
 
 return countdown;
}


function animateExitProof(){
 const counter = document.getElementById('exitProofCount');
 if (!counter) return;
 
 
 setInterval(() =>{
 const current = parseInt(counter.textContent) || 23;
 const increase = Math.floor(Math.random() * 3) + 1;
 counter.textContent = current + increase;
 
 
 counter.style.transform = 'scale(1.2)';
 counter.style.color = '#10b981';
 setTimeout(() =>{
 counter.style.transform = 'scale(1)';
 counter.style.color = '#10b981';
}, 200);
}, Math.random() * 20000 + 10000);
}


async function submitExitForm(event, discount){
 event.preventDefault();
 
 const form = event.target;
 const formData = new FormData(form);
 const data = Object.fromEntries(formData.entries());
 
 const button = form.querySelector('button[type="submit"]');
 const originalText = button.innerHTML;
 button.innerHTML = 'üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
 button.disabled = true;
 
 try{
 const success = await sendToTelegram({
 ...data,
 source: 'exit-intent',
 discount: `${discount}%`,
 promoCode: `EXIT${discount}`,
 timestamp: new Date().toLocaleString('ru-RU')
});
 
 if (success){
 
 form.innerHTML = `
 <div class="exit-success">
 <div class="success-icon">üéâ</div>
 <h4>–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</h4>
 <p>–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: <strong>EXIT${discount}</strong></p>
 <p>–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç</p>
 
 <div class="success-actions">
 <a href="https:
 üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp
 </a>
 <button class="btn btn-outline btn-sm" onclick="closeExitIntent()">
 –ó–∞–∫—Ä—ã—Ç—å
 </button>
 </div>
 </div>
 `;
 
 
 setTimeout(() =>{
 closeExitIntent();
}, 10000);
 
}else{
 throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
}
 
}catch (error){
 button.innerHTML = '‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑';
 button.disabled = false;
 
 setTimeout(() =>{
 button.innerHTML = originalText;
}, 3000);
}
}


function closeExitIntent(){
 const popup = document.getElementById('exitIntentPopup');
 if (popup){
 popup.classList.add('hiding');
 setTimeout(() =>{
 popup.remove();
}, 300);
}
}


document.addEventListener('DOMContentLoaded', function(){
 
 
 initCalculator();
 
 
 initMobileMenu();
 
 
 initFloatingButtons();
 
 
 initForms();

 
 animateActiveUsers();
 
 
 const slotsCounter = document.querySelector('.slots-counter');
 if (slotsCounter){
 setInterval(() =>{
 const current = parseInt(slotsCounter.textContent);
 if (current > 1 && Math.random() > 0.8){
 slotsCounter.textContent = current - 1;
 slotsCounter.style.animation = 'none';
 setTimeout(() =>{
 slotsCounter.style.animation = 'pulse-red 2s infinite';
}, 100);
}
}, Math.random() * 600000 + 600000);
}

 
 
});


function initCalculator(){
 try{
 if (typeof SmartCalculatorV2 !== 'undefined'){
 smartCalculatorV2 = new SmartCalculatorV2();
 window.smartCalculatorV2 = smartCalculatorV2;
}else{
 
 setTimeout(initCalculator, 1000);
}
}catch (error){
}
}


function initForms(){
 
 const calcForm = document.getElementById('calculatorForm');
 if (calcForm){
 calcForm.addEventListener('submit', function(e){
 e.preventDefault();
 handleCalculation();
});
}
 
 
 const calcButton = document.getElementById('calculateButton');
 if (calcButton){
 calcButton.addEventListener('click', function(e){
 e.preventDefault();
 handleCalculation();
});
}else{
}
 
 
 const oldButton = document.querySelector('button[onclick*="handleCalculation"]');
 if (oldButton){
 oldButton.addEventListener('click', function(e){
 e.preventDefault();
 handleCalculation();
});
}
}


function handleCalculation(){
 
 if (smartCalculatorV2 && typeof smartCalculatorV2.handleCalculation === 'function'){
 try{
 smartCalculatorV2.handleCalculation();
}catch (error){
 alert('–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞: ' + error.message);
}
}else{
 alert('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É');
 
 
 setTimeout(() =>{
 initCalculator();
 setTimeout(handleCalculation, 500);
}, 1000);
}
}


function initMobileMenu(){
 const mobileMenuToggle = document.getElementById('mobileMenuToggle');
 const mobileNav = document.getElementById('mobileNav');
 
 if (mobileMenuToggle && mobileNav){
 mobileMenuToggle.addEventListener('click', function(){
 mobileNav.classList.toggle('active');
 mobileMenuToggle.classList.toggle('active');
});
}
}


function initFloatingButtons(){
 
}


document.querySelectorAll('a[href^="#"]').forEach(anchor =>{
 anchor.addEventListener('click', function (e){
 e.preventDefault();
 const target = document.querySelector(this.getAttribute('href'));
 if (target){
 target.scrollIntoView({
 behavior: 'smooth',
 block: 'start'
});
}
});
});


window.smartCalculatorV2 = smartCalculatorV2;
window.handleCalculation = handleCalculation;






class CalculatorUI{
 constructor(){
 this.currentStep = 1;
 this.totalSteps = 3;
 this.init();
}

 init(){
 this.bindEvents();
 this.updateProgress();
}

 bindEvents(){
 
 document.getElementById('nextStep1')?.addEventListener('click', () => this.nextStep());
 document.getElementById('nextStep2')?.addEventListener('click', () => this.nextStep());
 document.getElementById('prevStep2')?.addEventListener('click', () => this.prevStep());
 document.getElementById('prevStep3')?.addEventListener('click', () => this.prevStep());
 
 
 document.getElementById('calculateButton')?.addEventListener('click', () => this.calculate());
 
 
 document.getElementById('newCalculation')?.addEventListener('click', () => this.resetCalculator());
 
 
 this.setupFieldValidation();
}

 nextStep(){
 if (this.validateCurrentStep()){
 this.currentStep = Math.min(this.currentStep + 1, this.totalSteps);
 this.updateUI();
}
}

 prevStep(){
 this.currentStep = Math.max(this.currentStep - 1, 1);
 this.updateUI();
}

 validateCurrentStep(){
 switch (this.currentStep){
 case 1:
 return this.validateRoute();
 case 2:
 return this.validateCargo();
 default:
 return true;
}
}

 validateRoute(){
 const fromCity = document.getElementById('fromCity').value.trim();
 const toCity = document.getElementById('toCity').value.trim();
 
 if (!fromCity){
 this.showError('fromCity', '–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
 return false;
}
 
 if (!toCity){
 this.showError('toCity', '–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è');
 return false;
}
 
 if (fromCity.toLowerCase() === toCity.toLowerCase()){
 this.showError('toCity', '–ì–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å');
 return false;
}
 
 this.clearErrors();
 return true;
}

 validateCargo(){
 const weight = document.getElementById('weight').value;
 
 if (!weight || weight <= 0){
 this.showError('weight', '–£–∫–∞–∂–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞');
 return false;
}
 
 if (weight > 20000){
 this.showError('weight', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å: 20 —Ç–æ–Ω–Ω. –î–ª—è –±–æ–ª—å—à–∏—Ö –≥—Ä—É–∑–æ–≤ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º');
 return false;
}
 
 this.clearErrors();
 return true;
}

 showError(fieldId, message){
 const field = document.getElementById(fieldId);
 const errorDiv = document.createElement('div');
 errorDiv.className = 'field-error';
 errorDiv.textContent = message;
 errorDiv.style.cssText = 'color: #dc2626;font-size: 0.875rem;margin-top: 0.25rem;';
 
 
 const existingError = field.parentNode.querySelector('.field-error');
 if (existingError){
 existingError.remove();
}
 
 field.parentNode.appendChild(errorDiv);
 field.style.borderColor = '#dc2626';
 
 
 field.style.animation = 'shake 0.5s ease-in-out';
 setTimeout(() =>{
 field.style.animation = '';
}, 500);
}

 clearErrors(){
 document.querySelectorAll('.field-error').forEach(error => error.remove());
 document.querySelectorAll('.form-control').forEach(field =>{
 field.style.borderColor = '#e5e7eb';
});
}

 updateUI(){
 
 document.querySelectorAll('.calc-step').forEach((step, index) =>{
 step.classList.toggle('active', index + 1 === this.currentStep);
});
 
 
 document.querySelectorAll('.progress-step').forEach((step, index) =>{
 const stepNumber = index + 1;
 step.classList.remove('active', 'completed');
 
 if (stepNumber < this.currentStep){
 step.classList.add('completed');
}else if (stepNumber === this.currentStep){
 step.classList.add('active');
}
});
 
 this.updateProgress();
 
 
 this.updateButtons();
}

 updateProgress(){
 const progress = ((this.currentStep - 1) / (this.totalSteps - 1)) * 100;
 const progressFill = document.getElementById('progressFill');
 if (progressFill){
 progressFill.style.width = `${progress}%`;
}
}

 updateButtons(){
 
 const calculateBtn = document.getElementById('calculateButton');
 if (calculateBtn){
 const btnText = calculateBtn.querySelector('.btn-text');
 if (btnText){
 btnText.textContent = '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å';
}
}
}

 async calculate(){
 const calculateBtn = document.getElementById('calculateButton');
 const btnText = calculateBtn.querySelector('.btn-text');
 const btnLoading = calculateBtn.querySelector('.btn-loading');
 
 
 btnText.style.display = 'none';
 btnLoading.style.display = 'inline-flex';
 calculateBtn.disabled = true;
 
 try{
 
 const formData = this.getFormData();
 
 
 if (window.calculator){
 const result = await window.calculator.calculatePrice(formData);
 this.showResult(result);
}else{
 throw new Error('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
}
}catch (error){
 this.showError('calculateButton', '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
}finally{
 
 btnText.style.display = 'inline';
 btnLoading.style.display = 'none';
 calculateBtn.disabled = false;
}
}

 getFormData(){
 return{
 from: document.getElementById('fromCity').value.trim(),
 to: document.getElementById('toCity').value.trim(),
 weight: parseFloat(document.getElementById('weight').value) || 0,
 volume: parseFloat(document.getElementById('volume').value) || 0,
 isConsolidated: document.getElementById('isConsolidated').checked
};
}

 showResult(result){
 const resultContainer = document.getElementById('calculatorResult');
 const resultPrice = document.getElementById('resultPrice');
 const resultSubtitle = document.getElementById('resultSubtitle');
 const resultDetails = document.getElementById('resultDetails');
 
 
 resultPrice.textContent = this.formatPrice(result.price);
 
 
 const route = `${result.from}‚Üí ${result.to}`;
 resultSubtitle.textContent = `${route}‚Ä¢ ${result.weight}–∫–≥`;
 
 
 resultDetails.innerHTML = this.generateResultDetails(result);
 
 
 resultContainer.classList.add('show');
 
 
 resultContainer.scrollIntoView({behavior: 'smooth', block: 'center'});
 
 
 resultContainer.style.animation = 'fadeInScale 0.4s ease-out';
}

 formatPrice(price){
 return new Intl.NumberFormat('ru-RU',{
 style: 'currency',
 currency: 'RUB',
 minimumFractionDigits: 0,
 maximumFractionDigits: 0
}).format(price);
}

 generateResultDetails(result){
 const details = [];
 
 if (result.transport){
 details.push(`
 <div class="detail-item">
 <div class="detail-label">–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç</div>
 <div class="detail-value">${result.transport}</div>
 </div>
 `);
}
 
 if (result.distance){
 details.push(`
 <div class="detail-item">
 <div class="detail-label">–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ</div>
 <div class="detail-value">${result.distance}–∫–º</div>
 </div>
 `);
}
 
 if (result.deliveryTime){
 details.push(`
 <div class="detail-item">
 <div class="detail-label">–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏</div>
 <div class="detail-value">${result.deliveryTime}</div>
 </div>
 `);
}
 
 if (result.pricePerKm){
 details.push(`
 <div class="detail-item">
 <div class="detail-label">–¢–∞—Ä–∏—Ñ –∑–∞ –∫–º</div>
 <div class="detail-value">${result.pricePerKm}‚ÇΩ/–∫–º</div>
 </div>
 `);
}
 
 return details.join('');
}

 resetCalculator(){
 
 document.getElementById('calculatorForm').reset();
 
 
 document.getElementById('calculatorResult').classList.remove('show');
 
 
 this.currentStep = 1;
 this.updateUI();
 
 
 this.clearErrors();
 
 
 document.getElementById('calculator').scrollIntoView({behavior: 'smooth'});
}

 setupFieldValidation(){
 
 const fields = ['fromCity', 'toCity', 'weight'];
 fields.forEach(fieldId =>{
 const field = document.getElementById(fieldId);
 if (field){
 field.addEventListener('input', () =>{
 const error = field.parentNode.querySelector('.field-error');
 if (error){
 error.remove();
 field.style.borderColor = '#e5e7eb';
}
});
}
});
}
}


document.addEventListener('DOMContentLoaded', function(){
 
 setTimeout(() =>{
 window.calculatorUI = new CalculatorUI();
}, 100);
});


const style = document.createElement('style');
style.textContent = `
 @keyframes shake{
 0%, 100%{transform: translateX(0)}
 25%{transform: translateX(-5px)}
 75%{transform: translateX(5px)}
}
`;
document.head.appendChild(style);




document.addEventListener('DOMContentLoaded', function(){
 
 
 const contactForm = document.getElementById('contactForm');
 if (contactForm){
 contactForm.addEventListener('submit', async function(e){
 e.preventDefault();
 
 
 const formData = new FormData(this);
 const data ={
 name: formData.get('name') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
 phone: formData.get('phone') || '–ù–µ —É–∫–∞–∑–∞–Ω',
 email: formData.get('email') || '–ù–µ —É–∫–∞–∑–∞–Ω',
 message: formData.get('message') || '–ë–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è',
 timestamp: new Date().toLocaleString('ru-RU')
};
 
 
 const source = data.name === '–ù–µ —É–∫–∞–∑–∞–Ω–æ' && data.email === '–ù–µ —É–∫–∞–∑–∞–Ω' ? 'services-form' : 'contact-form';
 
 
 const text = `
üöõ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –° –°–ê–ô–¢–ê!

üë§ –ò–º—è: ${data.name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}
üìß Email: ${data.email}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message}
üïê –í—Ä–µ–º—è: ${data.timestamp}
 `.trim();
 
 
 showNotification('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.', 'success');
 
 
 this.reset();
 
 
 try{
 const success = await sendToTelegram(text, source);
 
 
 if (success){
 
}else{
}
}catch (error){
}
});
}else{
}
 
 
 const leadForm = document.getElementById('calculatorLeadForm');
 if (leadForm){
 leadForm.addEventListener('submit', async function(e){
 e.preventDefault();
 
 
 const formData = new FormData(this);
 const data ={
 name: formData.get('name') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
 phone: formData.get('phone') || '–ù–µ —É–∫–∞–∑–∞–Ω',
 email: formData.get('email') || '–ù–µ —É–∫–∞–∑–∞–Ω',
 comment: formData.get('comment') || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è',
 timestamp: new Date().toLocaleString('ru-RU')
};
 
 
 const text = `
üéØ –ù–û–í–´–ô –õ–ò–î –° –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê!

üë§ –ò–º—è: ${data.name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}
üìß Email: ${data.email}
üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${data.comment}
üïê –í—Ä–µ–º—è: ${data.timestamp}
üéÅ –ü—Ä–æ–º–æ–∫–æ–¥: GOST10 (-10%)
 `.trim();
 
 
 showNotification('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.', 'success');
 
 
 this.reset();
 
 
 const leadFormContainer = document.getElementById('leadForm');
 if (leadFormContainer){
 leadFormContainer.style.display = 'none';
}
 
 
 try{
 const success = await sendToTelegram(text, 'calculator-lead');
 
 if (success){
}else{
}
}catch (error){
}
});
}else{
}
 
 
 initPrivacyConsent();
});


async function sendToTelegram(message, source = 'form'){
 try{
 const botToken = '7999458907:AAGOAjQLmEZuT4SFx4Upl1GjuXO0yFuWok8';
 const chatId = '399711407';
 
 const response = await fetch(`https:
 method: 'POST',
 headers:{
 'Content-Type': 'application/json',
},
 body: JSON.stringify({
 chat_id: chatId,
 text: message,
 parse_mode: 'HTML'
})
});
 
 if (!response.ok){
 throw new Error(`HTTP error! status: ${response.status}`);
}
 
 return true;
}catch (error){
 return false;
}
}


function showNotification(message, type = 'success'){
 const notification = document.createElement('div');
 notification.className = `notification notification-${type}`;
 notification.style.cssText = `
 position: fixed;
 top: 20px;
 right: 20px;
 background: ${type === 'success' ? '#10b981' : '#ef4444'};
 color: white;
 padding: 15px 25px;
 border-radius: 8px;
 box-shadow: 0 4px 6px rgba(0,0,0,0.1);
 z-index: 9999;
 animation: slideIn 0.3s ease;
 `;
 notification.textContent = message;
 
 document.body.appendChild(notification);
 
 setTimeout(() =>{
 notification.style.animation = 'slideOut 0.3s ease';
 setTimeout(() => notification.remove(), 300);
}, 5000);
}


function initPrivacyConsent(){
 const consentCheckbox = document.getElementById('privacyConsent');
 const submitBtn = document.getElementById('leadSubmitBtn') || document.getElementById('contactSubmitBtn');
 
 if (consentCheckbox && submitBtn){
 
 submitBtn.disabled = !consentCheckbox.checked;
 
 
 consentCheckbox.addEventListener('change', function(){
 submitBtn.disabled = !this.checked;
 
 if (this.checked){
 submitBtn.classList.remove('btn-disabled');
 submitBtn.classList.add('btn-primary');
}else{
 submitBtn.classList.add('btn-disabled');
 submitBtn.classList.remove('btn-primary');
}
});
}else{
}
}


const style = document.createElement('style');
style.textContent = `
 @keyframes slideIn{
 from{transform: translateX(100%);opacity: 0}
 to{transform: translateX(0);opacity: 1}
}
 @keyframes slideOut{
 from{transform: translateX(0);opacity: 1}
 to{transform: translateX(100%);opacity: 0}
}
`;
document.head.appendChild(style);







class StickyCTA{
 constructor(){
 this.config ={
 showOnScroll: 100, 
 showOnTime: 15000, 
 showOnExit: true, 
 progressBar: true, 
 animationDuration: 300, 
 zIndex: 9999 
};
 
 this.isVisible = false;
 this.progress = 0;
 this.init();
}

 init(){
 this.createCTA();
 this.bindEvents();
 this.startProgressBar();
}

 createCTA(){
 
 const ctaContainer = document.createElement('div');
 ctaContainer.className = 'sticky-cta-container';
 ctaContainer.id = 'stickyCTA';
 ctaContainer.style.cssText = `
 position: fixed;
 bottom: 0;
 left: 0;
 right: 0;
 background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
 color: white;
 padding: 12px 20px;
 box-shadow: 0 -4px 20px rgba(0,0,0,0.15);
 transform: translateY(100%);
 transition: transform 0.3s ease-out;
 z-index: ${this.config.zIndex};
 border-top: 3px solid #3b82f6;
 `;

 
 const progressBar = document.createElement('div');
 progressBar.className = 'sticky-progress-bar';
 progressBar.style.cssText = `
 position: absolute;
 top: 0;
 left: 0;
 height: 3px;
 background: linear-gradient(90deg, #3b82f6, #8b5cf6);
 width: 0%;
 transition: width 0.3s ease;
 `;

 
 const content = document.createElement('div');
 content.className = 'sticky-cta-content';
 content.style.cssText = `
 display: flex;
 align-items: center;
 justify-content: space-between;
 max-width: 1200px;
 margin: 0 auto;
 gap: 20px;
 `;

 
 const textSection = document.createElement('div');
 textSection.className = 'sticky-cta-text';
 textSection.style.cssText = `
 display: flex;
 align-items: center;
 gap: 12px;
 flex: 1;
 `;

 const icon = document.createElement('span');
 icon.innerHTML = 'üöõ';
 icon.style.cssText = `
 font-size: 24px;
 animation: bounce 2s infinite;
 `;

 const text = document.createElement('div');
 text.innerHTML = `
 <div style="font-weight: 600;font-size: 16px;">–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏</div>
 <div style="font-size: 14px;opacity: 0.9;">–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ—á–Ω—É—é —Ü–µ–Ω—É –∑–∞ 30 —Å–µ–∫—É–Ω–¥</div>
 `;

 textSection.appendChild(icon);
 textSection.appendChild(text);

 
 const actionsSection = document.createElement('div');
 actionsSection.className = 'sticky-cta-actions';
 actionsSection.style.cssText = `
 display: flex;
 gap: 12px;
 align-items: center;
 `;

 
 const calcButton = document.createElement('button');
 calcButton.className = 'sticky-calc-btn';
 calcButton.innerHTML = '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å';
 calcButton.style.cssText = `
 background: linear-gradient(135deg, #3b82f6, #1d4ed8);
 color: white;
 border: none;
 padding: 12px 24px;
 border-radius: 8px;
 font-weight: 600;
 font-size: 14px;
 cursor: pointer;
 transition: all 0.2s ease;
 box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
 `;

 
 const phoneButton = document.createElement('a');
 phoneButton.href = 'tel:+79162720932';
 phoneButton.className = 'sticky-phone-btn';
 phoneButton.innerHTML = 'üìû +7 916 272-09-32';
 phoneButton.style.cssText = `
 background: rgba(255,255,255,0.1);
 color: white;
 border: 1px solid rgba(255,255,255,0.2);
 padding: 12px 16px;
 border-radius: 8px;
 text-decoration: none;
 font-weight: 500;
 font-size: 14px;
 transition: all 0.2s ease;
 `;

 
 const closeButton = document.createElement('button');
 closeButton.className = 'sticky-close-btn';
 closeButton.innerHTML = '√ó';
 closeButton.style.cssText = `
 background: none;
 border: none;
 color: rgba(255,255,255,0.7);
 font-size: 24px;
 cursor: pointer;
 padding: 4px 8px;
 border-radius: 4px;
 transition: all 0.2s ease;
 `;

 
 actionsSection.appendChild(calcButton);
 actionsSection.appendChild(phoneButton);
 actionsSection.appendChild(closeButton);

 content.appendChild(textSection);
 content.appendChild(actionsSection);

 ctaContainer.appendChild(progressBar);
 ctaContainer.appendChild(content);

 
 const style = document.createElement('style');
 style.textContent = `
 @keyframes bounce{
 0%, 20%, 50%, 80%, 100%{transform: translateY(0)}
 40%{transform: translateY(-5px)}
 60%{transform: translateY(-3px)}
}
 
 .sticky-calc-btn:hover{
 transform: translateY(-2px);
 box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
}
 
 .sticky-phone-btn:hover{
 background: rgba(255,255,255,0.2);
 transform: translateY(-1px);
}
 
 .sticky-close-btn:hover{
 background: rgba(255,255,255,0.1);
 color: white;
}
 
 @media (max-width: 768px){
 .sticky-cta-content{
 flex-direction: column;
 gap: 12px;
 text-align: center;
}
 
 .sticky-cta-actions{
 width: 100%;
 justify-content: center;
}
}
 `;

 document.head.appendChild(style);
 document.body.appendChild(ctaContainer);

 
 this.container = ctaContainer;
 this.progressBar = progressBar;
 this.calcButton = calcButton;
 this.closeButton = closeButton;
}

 bindEvents(){
 
 window.addEventListener('scroll', () =>{
 if (window.scrollY > this.config.showOnScroll && !this.isVisible){
 this.show();
}
});

 
 setTimeout(() =>{
 if (!this.isVisible){
 this.show();
}
}, this.config.showOnTime);

 
 if (this.config.showOnExit){
 document.addEventListener('mouseleave', (e) =>{
 if (e.clientY <= 0 && !this.isVisible){
 this.show();
}
});
}

 
 this.calcButton.addEventListener('click', () =>{
 this.trackEvent('sticky_calc_click');
 this.scrollToCalculator();
});

 this.closeButton.addEventListener('click', () =>{
 this.hide();
 this.trackEvent('sticky_close_click');
});

 
 this.calcButton.addEventListener('mouseenter', () =>{
 this.calcButton.style.transform = 'translateY(-2px)';
});

 this.calcButton.addEventListener('mouseleave', () =>{
 this.calcButton.style.transform = 'translateY(0)';
});
}

 show(){
 if (this.isVisible) return;
 
 this.isVisible = true;
 this.container.style.transform = 'translateY(0)';
 this.trackEvent('sticky_cta_show');
}

 hide(){
 if (!this.isVisible) return;
 
 this.isVisible = false;
 this.container.style.transform = 'translateY(100%)';
}

 scrollToCalculator(){
 const calculator = document.getElementById('calculator');
 if (calculator){
 calculator.scrollIntoView({
 behavior: 'smooth', 
 block: 'start' 
});
 
 
 calculator.style.boxShadow = '0 0 20px rgba(59, 130, 246, 0.5)';
 setTimeout(() =>{
 calculator.style.boxShadow = '';
}, 2000);
}
}

 startProgressBar(){
 if (!this.config.progressBar) return;

 const duration = 30000;
 const interval = 100;
 const increment = (interval / duration) * 100;

 this.progressInterval = setInterval(() =>{
 this.progress += increment;
 if (this.progress >= 100){
 this.progress = 100;
 clearInterval(this.progressInterval);
}
 this.progressBar.style.width = this.progress + '%';
}, interval);
}

 trackEvent(eventName, data ={}){
 
 if (typeof gtag !== 'undefined'){
 gtag('event', eventName,{
 event_category: 'sticky_cta',
 event_label: window.location.pathname,
 ...data
});
}

 
 if (typeof ym !== 'undefined'){
 ym(103413788, 'reachGoal', eventName,{
 page: window.location.pathname,
 ...data
});
}

 console.log('Sticky CTA Event:', eventName, data);
}

 
 updateProgress(percent){
 this.progress = Math.min(100, Math.max(0, percent));
 this.progressBar.style.width = this.progress + '%';
}

 setText(title, subtitle){
 const textElement = this.container.querySelector('.sticky-cta-text div');
 if (textElement){
 textElement.innerHTML = `
 <div style="font-weight: 600;font-size: 16px;">${title}</div>
 <div style="font-size: 14px;opacity: 0.9;">${subtitle}</div>
 `;
}
}
}


document.addEventListener('DOMContentLoaded', () =>{
 window.stickyCTA = new StickyCTA();
});


if (typeof module !== 'undefined' && module.exports){
 module.exports = StickyCTA;
}








class ABTestHeaders{
 constructor(){
 this.config ={
 testName: 'header_variants',
 variants: [
{
 id: 'A',
 title: '–ê–≤—Ç–æ–ì–û–°–¢ - –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ | –ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏ –ø–æ –†–æ—Å—Å–∏–∏',
 h1: '–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞',
 subtitle: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏ –ø–æ –†–æ—Å—Å–∏–∏ —Å –ø–æ–¥–∞—á–µ–π –æ—Ç 2 —á–∞—Å–æ–≤',
 cta: '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 30 —Å–µ–∫—É–Ω–¥'
},
{
 id: 'B',
 title: '–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏ –ø–æ –†–æ—Å—Å–∏–∏ –æ—Ç 2 —á–∞—Å–æ–≤ | –ê–≤—Ç–æ–ì–û–°–¢ - –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞',
 h1: '–î–æ—Å—Ç–∞–≤–∫–∞ –≥—Ä—É–∑–æ–≤ –ø–æ –†–æ—Å—Å–∏–∏ –æ—Ç 2 —á–∞—Å–æ–≤',
 subtitle: '–ë—ã—Å—Ç—Ä–∞—è –ø–æ–¥–∞—á–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
 cta: '–ü–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—É—é —Ü–µ–Ω—É —Å–µ–π—á–∞—Å'
},
{
 id: 'C',
 title: '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ | –ê–≤—Ç–æ–ì–û–°–¢ - –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏',
 h1: '–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞ 30 —Å–µ–∫—É–Ω–¥',
 subtitle: '–£–º–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å —Ç–æ—á–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏. –ü–æ–¥–∞—á–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –æ—Ç 2 —á–∞—Å–æ–≤',
 cta: '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞ 30 —Å–µ–∫'
}
 ],
 trafficSplit: 0.5, 
 duration: 14, 
 minSample: 1000, 
 goals: ['scroll_to_calculator', 'calculator_complete', 'phone_click', 'form_submit']
};
 
 this.currentVariant = null;
 this.init();
}

 init(){
 
 if (!this.shouldShowTest()){
 return;
}

 
 this.currentVariant = this.selectVariant();
 
 
 this.applyVariant(this.currentVariant);
 
 
 this.setupTracking();
 
 
 this.saveVariant();
 
 console.log(`A/B Test: Applied variant ${this.currentVariant.id}`);
}

 shouldShowTest(){
 
 const testStart = localStorage.getItem('ab_test_start');
 if (testStart){
 const daysPassed = (Date.now() - parseInt(testStart)) / (1000 * 60 * 60 * 24);
 if (daysPassed > this.config.duration){
 return false;
}
}else{
 localStorage.setItem('ab_test_start', Date.now().toString());
}

 
 const testCount = parseInt(localStorage.getItem('ab_test_count') || '0');
 if (testCount < this.config.minSample){
 localStorage.setItem('ab_test_count', (testCount + 1).toString());
}

 
 return Math.random() < this.config.trafficSplit;
}

 selectVariant(){
 
 const savedVariant = localStorage.getItem('ab_test_variant');
 if (savedVariant){
 const variant = this.config.variants.find(v => v.id === savedVariant);
 if (variant){
 return variant;
}
}

 
 const randomIndex = Math.floor(Math.random() * this.config.variants.length);
 return this.config.variants[randomIndex];
}

 applyVariant(variant){
 
 document.title = variant.title;

 
 const metaDescription = document.querySelector('meta[name="description"]');
 if (metaDescription){
 metaDescription.setAttribute('content', variant.subtitle);
}

 
 const ogTitle = document.querySelector('meta[property="og:title"]');
 if (ogTitle){
 ogTitle.setAttribute('content', variant.h1);
}

 const ogDescription = document.querySelector('meta[property="og:description"]');
 if (ogDescription){
 ogDescription.setAttribute('content', variant.subtitle);
}

 
 const twitterTitle = document.querySelector('meta[name="twitter:title"]');
 if (twitterTitle){
 twitterTitle.setAttribute('content', variant.h1);
}

 const twitterDescription = document.querySelector('meta[name="twitter:description"]');
 if (twitterDescription){
 twitterDescription.setAttribute('content', variant.subtitle);
}

 
 const h1Element = document.querySelector('h1');
 if (h1Element){
 h1Element.textContent = variant.h1;
}

 
 const subtitleElement = document.querySelector('.hero-subtitle, .hero p, .hero-description');
 if (subtitleElement){
 subtitleElement.textContent = variant.subtitle;
}

 
 const ctaButtons = document.querySelectorAll('.btn-primary, .hero-cta, .main-cta');
 ctaButtons.forEach(button =>{
 if (button.textContent.includes('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å') || button.textContent.includes('–ü–æ–ª—É—á–∏—Ç—å')){
 button.textContent = variant.cta;
}
});

 
 if (window.stickyCTA){
 window.stickyCTA.setText('–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏', variant.subtitle);
}
}

 setupTracking(){
 
 this.trackEvent('variant_shown',{
 variant: this.currentVariant.id,
 test_name: this.config.testName
});

 
 this.config.goals.forEach(goal =>{
 this.trackGoal(goal);
});

 
 this.trackTimeOnPage();
}

 trackGoal(goalName){
 switch (goalName){
 case 'scroll_to_calculator':
 this.trackScrollToCalculator();
 break;
 case 'calculator_complete':
 this.trackCalculatorComplete();
 break;
 case 'phone_click':
 this.trackPhoneClick();
 break;
 case 'form_submit':
 this.trackFormSubmit();
 break;
}
}

 trackScrollToCalculator(){
 const calculator = document.getElementById('calculator');
 if (calculator){
 const observer = new IntersectionObserver((entries) =>{
 entries.forEach(entry =>{
 if (entry.isIntersecting){
 this.trackEvent('scroll_to_calculator',{
 variant: this.currentVariant.id,
 test_name: this.config.testName
});
 observer.disconnect();
}
});
});
 observer.observe(calculator);
}
}

 trackCalculatorComplete(){
 
 document.addEventListener('calculator_complete', (e) =>{
 this.trackEvent('calculator_complete',{
 variant: this.currentVariant.id,
 test_name: this.config.testName,
 calculation_data: e.detail
});
});
}

 trackPhoneClick(){
 const phoneLinks = document.querySelectorAll('a[href^="tel:"]');
 phoneLinks.forEach(link =>{
 link.addEventListener('click', () =>{
 this.trackEvent('phone_click',{
 variant: this.currentVariant.id,
 test_name: this.config.testName,
 phone_number: link.href.replace('tel:', '')
});
});
});
}

 trackFormSubmit(){
 const forms = document.querySelectorAll('form');
 forms.forEach(form =>{
 form.addEventListener('submit', () =>{
 this.trackEvent('form_submit',{
 variant: this.currentVariant.id,
 test_name: this.config.testName,
 form_id: form.id || 'unknown'
});
});
});
}

 trackTimeOnPage(){
 let startTime = Date.now();
 
 window.addEventListener('beforeunload', () =>{
 const timeOnPage = Date.now() - startTime;
 this.trackEvent('time_on_page',{
 variant: this.currentVariant.id,
 test_name: this.config.testName,
 time_seconds: Math.round(timeOnPage / 1000)
});
});
}

 trackEvent(eventName, data ={}){
 
 if (typeof gtag !== 'undefined'){
 gtag('event', eventName,{
 event_category: 'ab_test',
 event_label: this.config.testName,
 custom_parameter_variant: this.currentVariant.id,
 ...data
});
}

 
 if (typeof ym !== 'undefined'){
 ym(103413788, 'reachGoal', eventName,{
 test_name: this.config.testName,
 variant: this.currentVariant.id,
 ...data
});
}

 
 console.log('A/B Test Event:', eventName,{
 variant: this.currentVariant.id,
 test_name: this.config.testName,
 ...data
});
}

 saveVariant(){
 localStorage.setItem('ab_test_variant', this.currentVariant.id);
 localStorage.setItem('ab_test_name', this.config.testName);
}

 
 getTestResults(){
 const results ={
 test_name: this.config.testName,
 variant: this.currentVariant.id,
 start_time: localStorage.getItem('ab_test_start'),
 sample_size: localStorage.getItem('ab_test_count'),
 goals:{}
};

 
 if (typeof gtag !== 'undefined'){
 
 console.log('GA4 data available for analysis');
}

 return results;
}

 
 forceVariant(variantId){
 const variant = this.config.variants.find(v => v.id === variantId);
 if (variant){
 this.currentVariant = variant;
 this.applyVariant(variant);
 console.log(`Forced variant ${variantId}`);
}
}
}


document.addEventListener('DOMContentLoaded', () =>{
 window.abTestHeaders = new ABTestHeaders();
});


if (typeof module !== 'undefined' && module.exports){
 module.exports = ABTestHeaders;
}



/**
 * –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è hero-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 * –ü–ª–∞–≤–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
 */
class AnimatedCounter{
 constructor(){
 this.counters = [];
 this.init();
}

 init(){
 
 const counterElements = document.querySelectorAll('.stat-number[data-target]');
 
 counterElements.forEach(element =>{
 const target = parseFloat(element.getAttribute('data-target'));
 const duration = 2000;
 const step = target / (duration / 16);
 
 this.counters.push({
 element,
 target,
 current: 0,
 step,
 isAnimating: false
});
});

 
 this.setupScrollAnimation();
}

 setupScrollAnimation(){
 const observer = new IntersectionObserver((entries) =>{
 entries.forEach(entry =>{
 if (entry.isIntersecting){
 const counter = this.counters.find(c => c.element === entry.target);
 if (counter && !counter.isAnimating){
 this.animateCounter(counter);
}
}
});
},{
 threshold: 0.5
});

 this.counters.forEach(counter =>{
 observer.observe(counter.element);
});
}

 animateCounter(counter){
 counter.isAnimating = true;
 counter.element.classList.add('animated');

 const animate = () =>{
 counter.current += counter.step;
 
 if (counter.current >= counter.target){
 counter.current = counter.target;
 counter.element.textContent = this.formatNumber(counter.target);
 counter.isAnimating = false;
 return;
}

 counter.element.textContent = this.formatNumber(counter.current);
 requestAnimationFrame(animate);
};

 animate();
}

 formatNumber(num){
 if (num % 1 === 0){
 return Math.floor(num).toString();
}else{
 return num.toFixed(1);
}
}
}


document.addEventListener('DOMContentLoaded', () =>{
 new AnimatedCounter();
});



document.addEventListener('DOMContentLoaded',()=>{
 const range=document.getElementById('benefit-range');
 const out=document.getElementById('benefit-output');
 if(!range||!out) return;
 function calc(){
 const v=parseInt(range.value||0,10);
 const saving=Math.min(10+0.8*v,30);
 out.innerHTML=`–í–∞—à –æ–±—ä—ë–º: <strong>${v}—Ä–µ–π—Å–æ–≤/–º–µ—Å</strong> &nbsp;‚Üí —ç–∫–æ–Ω–æ–º–∏—è –¥–æ <strong>${saving.toFixed(0)}%</strong>`;
}
 range.addEventListener('input',calc);
 calc();
});





document.addEventListener('DOMContentLoaded', function(){
 
 const collapsibleSections = document.querySelectorAll('[data-collapse="mobile"]');
 
 collapsibleSections.forEach(section =>{
 
 const toggle = document.createElement('button');
 toggle.className = 'mobile-toggle';
 toggle.setAttribute('aria-label', '–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Å–µ–∫—Ü–∏—é');
 
 
 const sectionTitle = section.querySelector('h2, h3, h4') || 
 section.querySelector('.section-title') ||
 section.getAttribute('data-title') ||
 '–ü–æ–¥—Ä–æ–±–Ω–µ–µ';
 
 toggle.textContent = sectionTitle.textContent || sectionTitle;
 
 
 section.parentNode.insertBefore(toggle, section);
 
 
 toggle.addEventListener('click', function(){
 const isExpanded = section.classList.contains('expanded');
 
 if (isExpanded){
 
 section.classList.remove('expanded');
 toggle.classList.remove('expanded');
 toggle.setAttribute('aria-expanded', 'false');
}else{
 
 section.classList.add('expanded');
 toggle.classList.add('expanded');
 toggle.setAttribute('aria-expanded', 'true');
 
 
 section.style.display = 'block';
 section.style.opacity = '0';
 section.style.transform = 'translateY(-10px)';
 
 setTimeout(() =>{
 section.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
 section.style.opacity = '1';
 section.style.transform = 'translateY(0)';
}, 10);
}
});
 
 
 function handleResize(){
 if (window.innerWidth > 768){
 section.style.display = 'block';
 section.style.opacity = '1';
 section.style.transform = 'none';
 toggle.style.display = 'none';
}else{
 if (!section.classList.contains('expanded')){
 section.style.display = 'none';
}
 toggle.style.display = 'flex';
}
}
 
 
 handleResize();
 
 
 window.addEventListener('resize', handleResize);
});
 
 
 const mobileToggles = document.querySelectorAll('.mobile-toggle');
 
 
 mobileToggles.forEach(toggle =>{
 toggle.addEventListener('keydown', function(e){
 if (e.key === 'Enter' || e.key === ' '){
 e.preventDefault();
 toggle.click();
}
});
});
 
 
 if (window.location.hash){
 const targetSection = document.querySelector(window.location.hash);
 if (targetSection && targetSection.hasAttribute('data-collapse')){
 const toggle = targetSection.previousElementSibling;
 if (toggle && toggle.classList.contains('mobile-toggle')){
 setTimeout(() =>{
 toggle.click();
 targetSection.scrollIntoView({behavior: 'smooth', block: 'start'});
}, 100);
}
}
}
});


window.MobileCollapse ={
 init: function(){
 
 this.handleResize();
},
 
 handleResize: function(){
 const collapsibleSections = document.querySelectorAll('[data-collapse="mobile"]');
 const mobileToggles = document.querySelectorAll('.mobile-toggle');
 
 collapsibleSections.forEach(section =>{
 if (window.innerWidth > 768){
 section.style.display = 'block';
 section.style.opacity = '1';
 section.style.transform = 'none';
}
});
 
 mobileToggles.forEach(toggle =>{
 if (window.innerWidth > 768){
 toggle.style.display = 'none';
}else{
 toggle.style.display = 'flex';
}
});
}
};






const CITIES=["–ú–æ—Å–∫–≤–∞","–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥","–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥","–ö–∞–∑–∞–Ω—å","–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥","–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫","–°–∞–º–∞—Ä–∞","–í–æ—Ä–æ–Ω–µ–∂","–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä","–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É","–í–æ–ª–≥–æ–≥—Ä–∞–¥","–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å","–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å","–°–æ—á–∏","–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫","WB –ö–æ–ª–µ–¥–∏–Ω–æ","Ozon –•–æ—Ä—É–≥–≤–∏–Ω–æ","X5 –í–æ—Ä—Å–∏–Ω–æ","–°–î–≠–ö-–©–µ—Ä–±–∏–Ω–∫–∞","–ö–∞–∑–∞–Ω—å-–õ–∞–∏—à–µ–≤–æ"];
const VEHICLES=[ 
{name:"–ì–∞–∑–µ–ª—å",min:1,max:2.5}, 
{name:"–í–∞–ª–¥–∞–π",min:2.6,max:3}, 
{name:"–ë—ã—á–æ–∫ 5 —Ç",min:3,max:5}, 
{name:"MAN 10 —Ç",min:6,max:10}, 
{name:"–ö–∞–º–ê–ó 20 —Ç",min:12,max:20}, 
{name:"DAF + Krone 20 —Ç",min:12,max:20}, 
{name:"–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä 5 —Ç",min:3,max:5}, 
{name:"–ò–∑–æ—Ç–µ—Ä–º 3 —Ç",min:2,max:3}
];
function rand(arr){return arr[Math.floor(Math.random()*arr.length)]}
function randNum(min,max){return Math.random()*(max-min)+min}
function nextTickerText(){
 const veh=rand(VEHICLES);
 const weight=randNum(veh.min,veh.max).toFixed(1);
 let from=rand(CITIES);
 let to;
 do{to=rand(CITIES)}while(to===from);
 const mins=Math.floor(Math.random()*9)+1;
 return `${mins}–º–∏–Ω –Ω–∞–∑–∞–¥: ${veh.name}¬∑ ${weight}—Ç ¬∑ ${from}‚Üí ${to}`;
}
function updateTicker(){
 const span=document.querySelector('.live-ticker span');
 if(span){span.textContent=nextTickerText()}
}
document.addEventListener('DOMContentLoaded',()=>{
 const ticker=document.querySelector('.live-ticker span');
 if(!ticker)return;
 updateTicker();
 setInterval(updateTicker,12000);
});


/**
 * UX –£–õ–£–ß–®–ï–ù–ò–Ø - TL;DR, –ê–ö–ö–û–†–î–ï–û–ù–´, STICKY TOC
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞
 */

class UXImprovements{
 constructor(){
 this.init();
}

 init(){
 this.setupAccordions();
 this.setupStickyTOC();
 this.setupTLDR();
 this.setupLazyLoading();
 this.setupScrollAnimations();
 this.setupCalculatorEnhancements();
 this.setupMobileStickyActions();
}

 
 setupAccordions(){
 const accordions = document.querySelectorAll('.accordion');
 
 accordions.forEach(accordion =>{
 const trigger = accordion.querySelector('.accordion-trigger');
 const content = accordion.querySelector('.accordion-content');
 
 if (trigger && content){
 trigger.addEventListener('click', () =>{
 const isOpen = accordion.classList.contains('open');
 
 
 accordions.forEach(acc =>{
 if (acc !== accordion){
 acc.classList.remove('open');
 const accContent = acc.querySelector('.accordion-content');
 if (accContent){
 accContent.style.maxHeight = '0px';
}
}
});
 
 
 if (isOpen){
 accordion.classList.remove('open');
 content.style.maxHeight = '0px';
}else{
 accordion.classList.add('open');
 content.style.maxHeight = content.scrollHeight + 'px';
}
});
}
});
}

 
 setupCalculatorEnhancements(){
 const btn = document.getElementById('downloadPdf');
 if (btn){
 btn.addEventListener('click', () =>{
 if (window.calculatorV2 && typeof window.calculatorV2.downloadPDF === 'function'){
 window.calculatorV2.downloadPDF();
}else if (window.pdfLeadMagnet){
 window.pdfLeadMagnet.showContactModal();
}
});
}
}

 
 setupMobileStickyActions(){
 if (window.matchMedia('(max-width: 768px)').matches){
 const exists = document.querySelector('.mobile-sticky-actions');
 if (exists) return;
 const bar = document.createElement('div');
 bar.className = 'mobile-sticky-actions';
 bar.innerHTML = `
 <a href="tel:+79162720932" class="msa-item">üìû –ó–≤–æ–Ω–æ–∫</a>
 <a href="https:
 <a href="#calculator" class="msa-item">üßÆ –†–∞—Å—á–µ—Ç</a>
 `;
 document.body.appendChild(bar);
}
}

 
 setupStickyTOC(){
 const toc = document.querySelector('.sticky-toc');
 if (!toc) return;

 const headings = document.querySelectorAll('h2, h3');
 const tocList = toc.querySelector('.toc-list');
 
 if (!tocList) return;

 
 headings.forEach((heading, index) =>{
 const id = heading.id || `heading-${index}`;
 heading.id = id;
 
 const tocItem = document.createElement('li');
 tocItem.className = `toc-item toc-${heading.tagName.toLowerCase()}`;
 
 const tocLink = document.createElement('a');
 tocLink.href = `#${id}`;
 tocLink.textContent = heading.textContent;
 tocLink.addEventListener('click', (e) =>{
 e.preventDefault();
 heading.scrollIntoView({behavior: 'smooth'});
});
 
 tocItem.appendChild(tocLink);
 tocList.appendChild(tocItem);
});

 
 let isSticky = false;
 const tocOffset = toc.offsetTop;

 window.addEventListener('scroll', () =>{
 if (window.pageYOffset > tocOffset && !isSticky){
 toc.classList.add('sticky');
 isSticky = true;
}else if (window.pageYOffset <= tocOffset && isSticky){
 toc.classList.remove('sticky');
 isSticky = false;
}
});
}

 
 setupTLDR(){
 const tldr = document.querySelector('.tldr');
 if (!tldr) return;

 const content = tldr.querySelector('.tldr-content');
 const toggle = tldr.querySelector('.tldr-toggle');
 
 if (!content || !toggle) return;

 toggle.addEventListener('click', () =>{
 const isExpanded = tldr.classList.contains('expanded');
 
 if (isExpanded){
 tldr.classList.remove('expanded');
 toggle.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏';
}else{
 tldr.classList.add('expanded');
 toggle.textContent = '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏';
}
});
}

 
 setupLazyLoading(){
 const images = document.querySelectorAll('img[data-src]');
 
 const imageObserver = new IntersectionObserver((entries, observer) =>{
 entries.forEach(entry =>{
 if (entry.isIntersecting){
 const img = entry.target;
 img.src = img.dataset.src;
 img.classList.remove('lazy');
 img.classList.add('loaded');
 observer.unobserve(img);
}
});
});

 images.forEach(img =>{
 img.classList.add('lazy');
 imageObserver.observe(img);
});
}

 
 setupScrollAnimations(){
 const elements = document.querySelectorAll('.animate-on-scroll');
 
 const observer = new IntersectionObserver((entries) =>{
 entries.forEach(entry =>{
 if (entry.isIntersecting){
 entry.target.classList.add('visible');
}
});
},{
 threshold: 0.1,
 rootMargin: '0px 0px -50px 0px'
});

 elements.forEach(el =>{
 observer.observe(el);
});
}

 
 createAccordion(title, content, isOpen = false){
 const accordion = document.createElement('div');
 accordion.className = `accordion ${isOpen ? 'open' : ''}`;
 
 accordion.innerHTML = `
 <div class="accordion-trigger">
 <span class="accordion-title">${title}</span>
 <span class="accordion-icon">${isOpen ? '‚àí' : '+'}</span>
 </div>
 <div class="accordion-content" style="max-height: ${isOpen ? 'none' : '0px'}">
 <div class="accordion-body">
 ${content}
 </div>
 </div>
 `;
 
 return accordion;
}

 
 createTLDR(summary, details){
 const tldr = document.createElement('div');
 tldr.className = 'tldr';
 
 tldr.innerHTML = `
 <div class="tldr-header">
 <h3>üìã –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</h3>
 <button class="tldr-toggle">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏</button>
 </div>
 <div class="tldr-content">
 <div class="tldr-summary">
 ${summary}
 </div>
 <div class="tldr-details">
 ${details}
 </div>
 </div>
 `;
 
 return tldr;
}

 
 createStickyTOC(){
 const toc = document.createElement('div');
 toc.className = 'sticky-toc';
 
 toc.innerHTML = `
 <div class="toc-header">
 <h3>üìë –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</h3>
 </div>
 <ul class="toc-list"></ul>
 `;
 
 return toc;
}

 
 createBenefitCard(icon, title, description){
 const card = document.createElement('div');
 card.className = 'benefit-card animate-on-scroll';
 
 card.innerHTML = `
 <div class="benefit-icon">${icon}</div>
 <h4 class="benefit-title">${title}</h4>
 <p class="benefit-description">${description}</p>
 `;
 
 return card;
}

 
 createMiniCase(title, stats, description){
 const caseCard = document.createElement('div');
 caseCard.className = 'mini-case animate-on-scroll';
 
 caseCard.innerHTML = `
 <div class="case-header">
 <h4>${title}</h4>
 </div>
 <div class="case-stats">
 ${stats.map(stat => `<div class="case-stat"><span class="stat-value">${stat.value}</span><span class="stat-label">${stat.label}</span></div>`).join('')}
 </div>
 <p class="case-description">${description}</p>
 `;
 
 return caseCard;
}
}


document.addEventListener('DOMContentLoaded', () =>{
 window.uxImprovements = new UXImprovements();
});








class SchemaOptimizer{
 constructor(){
 this.config ={
 ratingValue: "4.8",
 reviewCount: "1250",
 priceRange: "‚ÇΩ‚ÇΩ",
 companyName: "–ê–≤—Ç–æ–ì–û–°–¢"
};
 this.init();
}

 init(){
 this.optimizeSchema();
 this.removeDuplicateRatings();
 this.consolidateOrganizationData();
}

 
 optimizeSchema(){
 const scripts = document.querySelectorAll('script[type="application/ld+json"]');
 
 scripts.forEach(script =>{
 try{
 const data = JSON.parse(script.textContent);
 
 
 if (data["@type"] === "Organization"){
 this.optimizeOrganization(data);
}
 
 
 if (data["@type"] === "Service"){
 this.optimizeService(data);
}
 
 
 if (data["@type"] === "WebSite"){
 this.optimizeWebSite(data);
}
 
 script.textContent = JSON.stringify(data, null, 2);
}catch (e){
 console.warn('Schema optimization error:', e);
}
});
}

 
 optimizeOrganization(org){
 
 if (org.aggregateRating){
 org.aggregateRating ={
 "@type": "AggregateRating",
 "ratingValue": this.config.ratingValue,
 "reviewCount": this.config.reviewCount
};
}
 
 
 if (org.name){
 org.name = this.config.companyName;
}
 
 
 if (!org.priceRange){
 org.priceRange = this.config.priceRange;
}
}

 
 optimizeService(service){
 
 if (service.aggregateRating){
 service.aggregateRating ={
 "@type": "AggregateRating",
 "ratingValue": this.config.ratingValue,
 "reviewCount": this.config.reviewCount
};
}
 
 
 if (service.provider && service.provider["@type"] === "Organization"){
 this.optimizeOrganization(service.provider);
}
}

 
 optimizeWebSite(website){
 
 if (website.aggregateRating){
 website.aggregateRating ={
 "@type": "AggregateRating",
 "ratingValue": this.config.ratingValue,
 "reviewCount": this.config.reviewCount
};
}
}

 
 removeDuplicateRatings(){
 const ratings = document.querySelectorAll('[itemtype*="AggregateRating"]');
 let processedRatings = new Set();
 
 ratings.forEach(rating =>{
 const ratingValue = rating.querySelector('[itemprop="ratingValue"]');
 const reviewCount = rating.querySelector('[itemprop="reviewCount"]');
 
 if (ratingValue && reviewCount){
 const key = `${ratingValue.textContent}-${reviewCount.textContent}`;
 
 if (processedRatings.has(key)){
 rating.remove();
}else{
 processedRatings.add(key);
}
}
});
}

 
 consolidateOrganizationData(){
 const organizations = document.querySelectorAll('[itemtype*="Organization"]');
 
 organizations.forEach(org =>{
 const name = org.querySelector('[itemprop="name"]');
 if (name && name.textContent !== this.config.companyName){
 name.textContent = this.config.companyName;
}
});
}

 
 getOptimizationStats(){
 const scripts = document.querySelectorAll('script[type="application/ld+json"]');
 const ratings = document.querySelectorAll('[itemtype*="AggregateRating"]');
 
 return{
 schemaScripts: scripts.length,
 ratings: ratings.length,
 optimizationDate: new Date().toISOString()
};
}
}


document.addEventListener('DOMContentLoaded', () =>{
 window.schemaOptimizer = new SchemaOptimizer();
 
 
 console.log('Schema optimization completed:', window.schemaOptimizer.getOptimizationStats());
});



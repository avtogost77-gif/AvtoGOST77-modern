// =======================================================
// üöõ MAIN.JS - –û–°–ù–û–í–ù–û–ô –°–ö–†–ò–ü–¢ –ê–í–¢–û–ì–û–°–¢
// =======================================================

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
let smartCalculatorV2;

// ===============================================
// –í–û–†–û–ù–ö–ê –ü–†–û–î–ê–ñ - –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê –ò –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–°–¢–¨
// ===============================================

// –ê–Ω–∏–º–∞—Ü–∏—è –∂–∏–≤–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
function animateActiveUsers() {
    const counter = document.getElementById('activeUsers');
    if (!counter) return;
    
    const minUsers = 3;
    const maxUsers = 12;
    
    setInterval(() => {
        const currentValue = parseInt(counter.textContent);
        const change = Math.random() > 0.7 ? (Math.random() > 0.5 ? 1 : -1) : 0;
        let newValue = currentValue + change;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        newValue = Math.max(minUsers, Math.min(maxUsers, newValue));
        
        if (newValue !== currentValue) {
            counter.style.transform = 'scale(1.1)';
            setTimeout(() => {
                counter.textContent = newValue;
                counter.style.transform = 'scale(1)';
            }, 150);
        }
    }, Math.random() * 10000 + 5000); // 5-15 —Å–µ–∫—É–Ω–¥
}

// –°—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑
function openUrgentModal() {
    const modal = createModal('urgent', {
        title: '‚ö° –°—Ä–æ—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ 2 —á–∞—Å–∞',
        subtitle: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–∏–Ω—É—Ç',
        fields: [
            { name: 'urgentName', type: 'text', placeholder: '–í–∞—à–µ –∏–º—è', required: true },
            { name: 'urgentPhone', type: 'tel', placeholder: '+7 (999) 123-45-67', required: true },
            { name: 'urgentFrom', type: 'text', placeholder: '–û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å –≥—Ä—É–∑', required: true },
            { name: 'urgentTo', type: 'text', placeholder: '–ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å', required: true },
            { name: 'urgentCargo', type: 'text', placeholder: '–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞', required: true }
        ],
        buttonText: '–ó–∞–∫–∞–∑–∞—Ç—å —Å—Ä–æ—á–Ω–æ',
        source: 'urgent-delivery'
    });
}

// –ê—É–¥–∏—Ç —ç–∫–æ–Ω–æ–º–∏–∏
function openSavingsModal() {
    const modal = createModal('savings', {
        title: 'üí∞ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞—É–¥–∏—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤',
        subtitle: '–£–∑–Ω–∞–π—Ç–µ, —Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –∑–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É',
        fields: [
            { name: 'savingsName', type: 'text', placeholder: '–í–∞—à–µ –∏–º—è', required: true },
            { name: 'savingsPhone', type: 'tel', placeholder: '+7 (999) 123-45-67', required: true },
            { name: 'savingsCompany', type: 'text', placeholder: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏', required: true },
            { name: 'savingsMonthlySpend', type: 'number', placeholder: '–¢—Ä–∞—Ç–∏—Ç–µ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É –≤ –º–µ—Å—è—Ü (‚ÇΩ)', required: true },
            { name: 'savingsRoutes', type: 'text', placeholder: '–û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã', required: false }
        ],
        buttonText: '–ü–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏—Ç',
        source: 'savings-audit',
        extraInfo: '–ê—É–¥–∏—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤'
    });
}

// –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
function openConsultationModal() {
    const modal = createModal('consultation', {
        title: 'ü§ù –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞',
        subtitle: '15 –º–∏–Ω—É—Ç —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –ø–æ –ª–æ–≥–∏—Å—Ç–∏–∫–µ',
        fields: [
            { name: 'consultName', type: 'text', placeholder: '–í–∞—à–µ –∏–º—è', required: true },
            { name: 'consultPhone', type: 'tel', placeholder: '+7 (999) 123-45-67', required: true },
            { name: 'consultEmail', type: 'email', placeholder: 'email@company.ru', required: false },
            { name: 'consultTopic', type: 'select', placeholder: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É', options: [
                '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤',
                '–í—ã–±–æ—Ä –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞', 
                '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏',
                '–°—Ä–æ—á–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏',
                '–î—Ä—É–≥–æ–µ'
            ], required: true },
            { name: 'consultTime', type: 'select', placeholder: '–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è', options: [
                '–°–µ–≥–æ–¥–Ω—è –¥–æ 18:00',
                '–ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º',
                '–ó–∞–≤—Ç—Ä–∞ –≤–µ—á–µ—Ä–æ–º',
                '–í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏'
            ], required: true }
        ],
        buttonText: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é',
        source: 'consultation',
        extraInfo: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ'
    });
}

// –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
function openComparisonModal() {
    const modal = createModal('comparison', {
        title: 'üìä –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ö–ü',
        subtitle: '–ü–æ–ª—É—á–∏—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞',
        fields: [
            { name: 'companyName', type: 'text', placeholder: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏', required: true },
            { name: 'contactName', type: 'text', placeholder: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ', required: true },
            { name: 'contactPhone', type: 'tel', placeholder: '+7 (999) 123-45-67', required: true },
            { name: 'contactEmail', type: 'email', placeholder: 'email@company.ru', required: true },
            { name: 'cargoTypes', type: 'text', placeholder: '–¢–∏–ø—ã –≥—Ä—É–∑–æ–≤', required: true },
            { name: 'monthlyVolume', type: 'text', placeholder: '–û–±—ä–µ–º –ø–µ—Ä–µ–≤–æ–∑–æ–∫ –≤ –º–µ—Å—è—Ü', required: true },
            { name: 'currentProvider', type: 'text', placeholder: '–¢–µ–∫—É—â–∏–π –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)', required: false }
        ],
        buttonText: '–ü–æ–ª—É—á–∏—Ç—å –ö–ü',
        source: 'commercial-offer',
        extraInfo: '–ö–ü –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤'
    });
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function createModal(type, config) {
    // –°–æ–∑–¥–∞–µ–º HTML –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const modalHTML = `
        <div class="modal-overlay" id="modal-${type}">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>${config.title}</h3>
                    <button class="modal-close" onclick="closeModal('${type}')">&times;</button>
                </div>
                <div class="modal-body">
                    <p class="modal-subtitle">${config.subtitle}</p>
                    <form class="modal-form" onsubmit="submitModal(event, '${type}', '${config.source}')">
                        ${config.fields.map(field => {
                            if (field.type === 'select') {
                                return `
                                    <div class="form-group">
                                        <select name="${field.name}" ${field.required ? 'required' : ''}>
                                            <option value="">${field.placeholder}</option>
                                            ${field.options.map(option => `<option value="${option}">${option}</option>`).join('')}
                                        </select>
                                    </div>
                                `;
                            } else {
                                return `
                                    <div class="form-group">
                                        <input type="${field.type}" name="${field.name}" placeholder="${field.placeholder}" ${field.required ? 'required' : ''}>
                                    </div>
                                `;
                            }
                        }).join('')}
                        ${config.extraInfo ? `<p class="modal-info">${config.extraInfo}</p>` : ''}
                        <button type="submit" class="btn btn-primary btn-lg">
                            ${config.buttonText}
                        </button>
                    </form>
                </div>
            </div>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.getElementById(`modal-${type}`);
    modal.style.display = 'flex';
    document.body.style.overflow = 'hidden';
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(type);
        }
    });
    
    return modal;
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal(type) {
    const modal = document.getElementById(`modal-${type}`);
    if (modal) {
        modal.remove();
        document.body.style.overflow = '';
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
async function submitModal(event, type, source) {
    event.preventDefault();
    
    const form = event.target;
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    const button = form.querySelector('button[type="submit"]');
    const originalText = button.textContent;
    button.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
    button.disabled = true;
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        const success = await sendToTelegram({
            ...data,
            source: source,
            timestamp: new Date().toLocaleString('ru-RU')
        });
        
        if (success) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
            form.innerHTML = `
                <div class="success-message">
                    <div class="success-icon">‚úÖ</div>
                    <h4>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</h4>
                    <p>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç</p>
                    <button class="btn btn-outline" onclick="closeModal('${type}')">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            `;
            
            // –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => closeModal(type), 5000);
            
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
        }
        
    } catch (error) {
        button.textContent = '–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑';
        button.disabled = false;
        
        setTimeout(() => {
            button.textContent = originalText;
        }, 2000);
    }
}

// CSS —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
const modalStyles = `
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10000;
        backdrop-filter: blur(4px);
    }
    
    .modal-content {
        background: white;
        border-radius: 16px;
        max-width: 500px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
    }
    
    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 2rem 2rem 0;
    }
    
    .modal-header h3 {
        margin: 0;
        font-size: 1.5rem;
        color: var(--neutral-900);
    }
    
    .modal-close {
        background: none;
        border: none;
        font-size: 2rem;
        cursor: pointer;
        color: var(--neutral-500);
        padding: 0;
        width: 2rem;
        height: 2rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .modal-body {
        padding: 2rem;
    }
    
    .modal-subtitle {
        color: var(--neutral-600);
        margin-bottom: 1.5rem;
    }
    
    .modal-form .form-group {
        margin-bottom: 1rem;
    }
    
    .modal-form input,
    .modal-form select {
        width: 100%;
        padding: 0.75rem;
        border: 2px solid var(--neutral-200);
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color var(--transition-fast);
    }
    
    .modal-form input:focus,
    .modal-form select:focus {
        outline: none;
        border-color: var(--primary-500);
    }
    
    .modal-info {
        font-size: 0.875rem;
        color: var(--neutral-600);
        background: var(--neutral-50);
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    
    .success-message {
        text-align: center;
        padding: 2rem;
    }
    
    .success-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
    }
    
    .success-message h4 {
        color: var(--success);
        margin-bottom: 1rem;
    }
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
if (!document.getElementById('modal-styles')) {
    const styleSheet = document.createElement('style');
    styleSheet.id = 'modal-styles';
    styleSheet.textContent = modalStyles;
    document.head.appendChild(styleSheet);
}

// ========================================================
// üéØ EXIT-INTENT POPUP SYSTEM V2.0
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –±–∞–≥–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
// ========================================================

let exitIntentShown = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è exit-intent —Å–∏—Å—Ç–µ–º—ã
function initExitIntent() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ª–∏ —É–∂–µ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
    if (sessionStorage.getItem('exitIntentShown') === 'true') {
        exitIntentShown = true;
        return;
    }
    
    // –ú–û–ë–ò–õ–¨–ù–´–ï –£–°–¢–†–û–ô–°–¢–í–ê - –¥—Ä—É–≥–∞—è –ª–æ–≥–∏–∫–∞
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth <= 768;
    
    if (isMobile) {
        // –ú–û–ë–ò–õ–¨–ù–´–ï: –ú–∏–Ω–∏–º—É–º 2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        let isEarlySession = true;
        setTimeout(() => {
            isEarlySession = false;
        }, 120000); // 2 –º–∏–Ω—É—Ç—ã
        
        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ –≤–≤–µ—Ä—Ö –∏–ª–∏ –¥–æ–ª–≥–æ–º –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–∏
        let lastScrollY = window.scrollY;
        let scrollUpCount = 0;
        
        window.addEventListener('scroll', () => {
            const currentScrollY = window.scrollY;
            
            // –ï—Å–ª–∏ —Å–∫—Ä–æ–ª–ª–∏–º –≤–≤–µ—Ä—Ö –∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–µ –≤ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É
            if (currentScrollY < lastScrollY && currentScrollY > 200) {
                scrollUpCount++;
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ 5—Ö —Å–∫—Ä–æ–ª–ª–æ–≤ –≤–≤–µ—Ä—Ö (–±–æ–ª—å—à–µ —Ç–µ—Ä–ø–µ–Ω–∏—è)
                if (scrollUpCount >= 5 && !exitIntentShown && !isEarlySession) {
                    // showExitIntentPopup(); // –û–¢–ö–õ–Æ–ß–ï–ù–û
                }
            } else {
                scrollUpCount = Math.max(0, scrollUpCount - 1);
            }
            
            lastScrollY = currentScrollY;
        });
        
        // –î–æ–ª–≥–æ–µ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö (10 –º–∏–Ω—É—Ç)
        setTimeout(() => {
            if (!exitIntentShown && !isEarlySession) {
                // showExitIntentPopup(); // –û–¢–ö–õ–Æ–ß–ï–ù–û
            }
        }, 600000); // 10 –º–∏–Ω—É—Ç
        
    } else {
        // –î–ï–°–ö–¢–û–ü - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
        
        // –î–ï–°–ö–¢–û–ü: –ú–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        let isEarlyDesktopSession = true;
        setTimeout(() => {
            isEarlyDesktopSession = false;
        }, 30000); // 30 —Å–µ–∫—É–Ω–¥
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –¥–ª—è desktop
        document.addEventListener('mouseleave', function(e) {
            // –ï—Å–ª–∏ –º—ã—à—å —É—à–ª–∞ –∑–∞ –≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π —ç–∫—Ä–∞–Ω–∞ (–∫ –∑–∞–∫—Ä—ã—Ç–∏—é/–∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ)
            if (e.clientY <= 0 && !exitIntentShown && !isEarlyDesktopSession) {
                // showExitIntentPopup(); // –û–¢–ö–õ–Æ–ß–ï–ù–û
            }
        });
        
        // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É (—Ç–æ–ª—å–∫–æ desktop)
        window.addEventListener('beforeunload', function(e) {
            if (!exitIntentShown && !isEarlyDesktopSession) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º popup (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ)
                // showExitIntentPopup(); // –û–¢–ö–õ–Æ–ß–ï–ù–û
            }
        });
        
        // –ë–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ desktop (5 –º–∏–Ω—É—Ç)
        let inactivityTimer = setTimeout(() => {
            if (!exitIntentShown && !isEarlyDesktopSession) {
                // showExitIntentPopup(); // –û–¢–ö–õ–Æ–ß–ï–ù–û
            }
        }, 300000); // 5 –º–∏–Ω—É—Ç
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        document.addEventListener('mousemove', () => {
            clearTimeout(inactivityTimer);
            inactivityTimer = setTimeout(() => {
                if (!exitIntentShown && !isEarlyDesktopSession) {
                    // showExitIntentPopup(); // –û–¢–ö–õ–Æ–ß–ï–ù–û
                }
            }, 300000); // 5 –º–∏–Ω—É—Ç
        });
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å exit-intent popup
function showExitIntentPopup() {
    if (exitIntentShown) return;
    
    exitIntentShown = true;
    sessionStorage.setItem('exitIntentShown', 'true');
    
    // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π popup –≤ HTML
    const popup = document.getElementById('exitIntentPopup');
    if (!popup) {
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    popup.style.display = 'flex';
    setTimeout(() => {
        popup.classList.add('show');
    }, 10);
    
    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
    startExitCountdown();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    animateExitProof();
}

// –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è popup
window.closeExitPopup = function() {
    const popup = document.getElementById('exitIntentPopup');
    if (popup) {
        popup.classList.remove('show');
        setTimeout(() => {
            popup.style.display = 'none';
        }, 300);
    }
};

// –°–æ–∑–¥–∞–Ω–∏–µ exit-intent popup
function createExitIntentPopup(discount) {
    const popupHTML = `
        <div class="exit-intent-overlay" id="exitIntentPopup">
            <div class="exit-intent-content">
                <div class="exit-intent-header">
                    <div class="exit-emoji">üõë</div>
                    <h3>–ü–æ–¥–æ–∂–¥–∏—Ç–µ! –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</h3>
                    <button class="exit-close" onclick="closeExitIntent()">&times;</button>
                </div>
                
                <div class="exit-intent-body">
                    <div class="discount-badge">
                        <span class="discount-percent">${discount}%</span>
                        <span class="discount-text">–°–ö–ò–î–ö–ê</span>
                    </div>
                    
                    <h4>–ü–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–æ —Å–∫–∏–¥–∫–æ–π ${discount}%</h4>
                    <p>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å!</p>
                    
                    <div class="urgency-timer-exit">
                        <span class="timer-text">–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑:</span>
                        <div class="countdown" id="exitCountdown">
                            <span id="exitMinutes">14</span>:<span id="exitSeconds">59</span>
                        </div>
                    </div>
                    
                    <form class="exit-form" onsubmit="submitExitForm(event, ${discount})">
                        <input type="text" name="exitName" placeholder="–í–∞—à–µ –∏–º—è" required>
                        <input type="tel" name="exitPhone" placeholder="+7 (999) 123-45-67" required>
                        <input type="text" name="exitRoute" placeholder="–ú–∞—Ä—à—Ä—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞ - –°–ü–±)" required>
                        
                        <button type="submit" class="btn btn-success btn-lg exit-btn">
                            üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á–µ—Ç —Å–æ —Å–∫–∏–¥–∫–æ–π ${discount}%
                        </button>
                        
                        <p class="exit-guarantee">
                            ‚úÖ –†–∞—Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç<br>
                            ‚úÖ –ë–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –¥–æ–ø–ª–∞—Ç<br>
                            ‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥: <strong>EXIT${discount}</strong>
                        </p>
                    </form>
                    
                    <div class="exit-social-proof">
                        <span class="proof-text">üî• –£–∂–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å:</span>
                        <span class="proof-count" id="exitProofCount">127</span>
                        <span class="proof-label">—á–µ–ª–æ–≤–µ–∫ —Å–µ–≥–æ–¥–Ω—è</span>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', popupHTML);
    
    const popup = document.getElementById('exitIntentPopup');
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
    popup.addEventListener('click', (e) => {
        if (e.target === popup) {
            closeExitIntent();
        }
    });
    
    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
    startExitCountdown();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    animateExitProof();
    
    return popup;
}

// –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –≤ exit popup
function startExitCountdown() {
    let totalSeconds = 15 * 60 - 1; // 14:59
    
    const countdown = setInterval(() => {
        const minutes = Math.floor(totalSeconds / 60);
        const seconds = totalSeconds % 60;
        
        const minutesEl = document.getElementById('exitMinutes');
        const secondsEl = document.getElementById('exitSeconds');
        
        if (minutesEl && secondsEl) {
            minutesEl.textContent = minutes.toString().padStart(2, '0');
            secondsEl.textContent = seconds.toString().padStart(2, '0');
            
            // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –∫–æ–≥–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏
            if (totalSeconds <= 60) {
                const countdownEl = document.getElementById('exitCountdown');
                if (countdownEl) {
                    countdownEl.classList.add('urgent');
                }
            }
        } else {
            // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            clearInterval(countdown);
            return;
        }
        
        totalSeconds--;
        
        if (totalSeconds < 0) {
            clearInterval(countdown);
            // –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
            if (minutesEl && secondsEl) {
                minutesEl.textContent = '00';
                secondsEl.textContent = '00';
            }
        }
    }, 1000);
    
    return countdown;
}

// –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ "–≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è"
function animateExitProof() {
    const counter = document.getElementById('exitProofCount');
    if (!counter) return;
    
    // –°–ª—É—á–∞–π–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞–∂–¥—ã–µ 10-30 —Å–µ–∫—É–Ω–¥
    setInterval(() => {
        const current = parseInt(counter.textContent) || 23;
        const increase = Math.floor(Math.random() * 3) + 1; // +1-3
        counter.textContent = current + increase;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        counter.style.transform = 'scale(1.2)';
        counter.style.color = '#10b981';
        setTimeout(() => {
            counter.style.transform = 'scale(1)';
            counter.style.color = '#10b981';
        }, 200);
    }, Math.random() * 20000 + 10000); // 10-30 —Å–µ–∫—É–Ω–¥
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã exit-intent
async function submitExitForm(event, discount) {
    event.preventDefault();
    
    const form = event.target;
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());
    
    const button = form.querySelector('button[type="submit"]');
    const originalText = button.innerHTML;
    button.innerHTML = 'üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
    button.disabled = true;
    
    try {
        const success = await sendToTelegram({
            ...data,
            source: 'exit-intent',
            discount: `${discount}%`,
            promoCode: `EXIT${discount}`,
            timestamp: new Date().toLocaleString('ru-RU')
        });
        
        if (success) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
            form.innerHTML = `
                <div class="exit-success">
                    <div class="success-icon">üéâ</div>
                    <h4>–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</h4>
                    <p>–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: <strong>EXIT${discount}</strong></p>
                    <p>–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç</p>
                    
                    <div class="success-actions">
                        <a href="https://wa.me/79162720932" class="btn btn-whatsapp btn-sm" target="_blank">
                            üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp
                        </a>
                        <button class="btn btn-outline btn-sm" onclick="closeExitIntent()">
                            –ó–∞–∫—Ä—ã—Ç—å
                        </button>
                    </div>
                </div>
            `;
            
            // –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                closeExitIntent();
            }, 10000);
            
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
        }
        
    } catch (error) {
        button.innerHTML = '‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑';
        button.disabled = false;
        
        setTimeout(() => {
            button.innerHTML = originalText;
        }, 3000);
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ exit-intent popup
function closeExitIntent() {
    const popup = document.getElementById('exitIntentPopup');
    if (popup) {
        popup.classList.add('hiding');
        setTimeout(() => {
            popup.remove();
        }, 300);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    initCalculator();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
    initMobileMenu();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≤–∞—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫
    initFloatingButtons();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º
    initForms();

    // –°–∂–∏–º–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
    collapseLongSectionsOnMobile();

    // –°–æ–∫—Ä–∞—â–∞–µ–º —Ç–∞–π–º–ª–∞–π–Ω –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º 3 —à–∞–≥–∞)
    collapseProcessStepsOnMobile();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å—á–µ—Ç—á–∏–∫–∞
    animateActiveUsers();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Å–ª–æ—Ç–æ–≤ (—É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 10-20 –º–∏–Ω—É—Ç)
    const slotsCounter = document.querySelector('.slots-counter');
    if (slotsCounter) {
        setInterval(() => {
            const current = parseInt(slotsCounter.textContent);
            if (current > 1 && Math.random() > 0.8) {
                slotsCounter.textContent = current - 1;
                slotsCounter.style.animation = 'none';
                setTimeout(() => {
                    slotsCounter.style.animation = 'pulse-red 2s infinite';
                }, 100);
            }
        }, Math.random() * 600000 + 600000); // 10-20 –º–∏–Ω—É—Ç
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è exit-intent
    // initExitIntent(); // –û–¢–ö–õ–Æ–ß–ï–ù–û - –ø–æ–ø–∞–ø —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
function initCalculator() {
    try {
        if (typeof SmartCalculatorV2 !== 'undefined') {
            smartCalculatorV2 = new SmartCalculatorV2();
            window.smartCalculatorV2 = smartCalculatorV2; // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
        } else {
            // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            setTimeout(initCalculator, 1000);
        }
    } catch (error) {
    }
}
// –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–π –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
function collapseLongSectionsOnMobile() {
    try {
        const isMobile = window.matchMedia('(max-width: 768px)').matches;
        if (!isMobile) return;
        document.querySelectorAll('[data-collapse="mobile"]').forEach(function(section){
            const maxHeight = 480; // px
            const currentHeight = section.scrollHeight;
            if (currentHeight > maxHeight) {
                section.style.maxHeight = maxHeight + 'px';
                section.style.overflow = 'hidden';
                const expander = document.createElement('button');
                expander.className = 'btn btn-outline btn-sm show-more';
                expander.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ';
                expander.style.margin = '16px auto';
                expander.onclick = function(){
                    section.style.maxHeight = 'none';
                    section.style.overflow = 'visible';
                    expander.remove();
                };
                section.appendChild(expander);
            }
        });
    } catch (e) {
    }
}

// –°–æ–∫—Ä–∞—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ 3 —à–∞–≥–æ–≤ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
function collapseProcessStepsOnMobile() {
    try {
        const isMobile = window.matchMedia('(max-width: 768px)').matches;
        if (!isMobile) return;
        const process = document.querySelector('.work-process .process-timeline');
        if (!process) return;
        const steps = Array.from(process.querySelectorAll('.process-step'));
        if (steps.length <= 3) return;
        // —Å–∫—Ä—ã–≤–∞–µ–º –Ω–∞—á–∏–Ω–∞—è —Å 4-–≥–æ
        steps.slice(3).forEach(step => step.style.display = 'none');
        const expander = document.createElement('button');
        expander.className = 'btn btn-outline btn-sm show-more';
        expander.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —ç—Ç–∞–ø—ã';
        expander.style.marginTop = '12px';
        process.parentElement.appendChild(expander);
        expander.addEventListener('click', function(){
            steps.slice(3).forEach(step => step.style.display = '');
            expander.remove();
        });
    } catch (e) {
    }
}


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º
function initForms() {
    // –§–æ—Ä–º–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    const calcForm = document.getElementById('calculatorForm');
    if (calcForm) {
        calcForm.addEventListener('submit', function(e) {
            e.preventDefault();
            handleCalculation();
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –ø–æ ID
    const calcButton = document.getElementById('calculateButton');
    if (calcButton) {
        calcButton.addEventListener('click', function(e) {
            e.preventDefault();
            handleCalculation();
        });
    } else {
    }
    
    // –†–µ–∑–µ—Ä–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö onclick
    const oldButton = document.querySelector('button[onclick*="handleCalculation"]');
    if (oldButton) {
        oldButton.addEventListener('click', function(e) {
            e.preventDefault();
            handleCalculation();
        });
    }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞
function handleCalculation() {
    
    if (smartCalculatorV2 && typeof smartCalculatorV2.handleCalculation === 'function') {
        try {
            smartCalculatorV2.handleCalculation();
        } catch (error) {
            alert('–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞: ' + error.message);
        }
    } else {
        alert('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É');
        
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        setTimeout(() => {
            initCalculator();
            setTimeout(handleCalculation, 500);
        }, 1000);
    }
}

// –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
function initMobileMenu() {
    const mobileMenuToggle = document.getElementById('mobileMenuToggle');
    const mobileNav = document.getElementById('mobileNav');
    
    if (mobileMenuToggle && mobileNav) {
        mobileMenuToggle.addEventListener('click', function() {
            mobileNav.classList.toggle('active');
            mobileMenuToggle.classList.toggle('active');
        });
    }
}

// –ü–ª–∞–≤–∞—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
function initFloatingButtons() {
    // –ö–Ω–æ–ø–∫–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ HTML
}

// –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —è–∫–æ—Ä—è–º
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
window.smartCalculatorV2 = smartCalculatorV2;
window.handleCalculation = handleCalculation;/**
 * –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è hero-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 * –ü–ª–∞–≤–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
 */
class AnimatedCounter {
  constructor() {
    this.counters = [];
    this.init();
  }

  init() {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏
    const counterElements = document.querySelectorAll('.stat-number[data-target]');
    
    counterElements.forEach(element => {
      const target = parseFloat(element.getAttribute('data-target'));
      const duration = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã
      const step = target / (duration / 16); // 60 FPS
      
      this.counters.push({
        element,
        target,
        current: 0,
        step,
        isAnimating: false
      });
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
    this.setupScrollAnimation();
  }

  setupScrollAnimation() {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const counter = this.counters.find(c => c.element === entry.target);
          if (counter && !counter.isAnimating) {
            this.animateCounter(counter);
          }
        }
      });
    }, {
      threshold: 0.5
    });

    this.counters.forEach(counter => {
      observer.observe(counter.element);
    });
  }

  animateCounter(counter) {
    counter.isAnimating = true;
    counter.element.classList.add('animated');

    const animate = () => {
      counter.current += counter.step;
      
      if (counter.current >= counter.target) {
        counter.current = counter.target;
        counter.element.textContent = this.formatNumber(counter.target);
        counter.isAnimating = false;
        return;
      }

      counter.element.textContent = this.formatNumber(counter.current);
      requestAnimationFrame(animate);
    };

    animate();
  }

  formatNumber(num) {
    if (num % 1 === 0) {
      return Math.floor(num).toString();
    } else {
      return num.toFixed(1);
    }
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
  new AnimatedCounter();
});
/**
 * –ê–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –±–ª–æ–∫–æ–≤ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
 * v1.0.0 - 2025-08
 */

document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è –±–ª–æ–∫–æ–≤ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
    initBenefitAnimations();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
    initCompactBenefitAnimations();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
    initTechFeatureAnimations();
});

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
 */
function initBenefitAnimations() {
    const benefitCards = document.querySelectorAll('.benefit-card');
    
    if (!benefitCards.length) return;
    
    benefitCards.forEach(card => {
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        card.addEventListener('mouseenter', function() {
            const icon = this.querySelector('.benefit-icon');
            if (icon) {
                icon.style.transform = 'scale(1.1) rotate(5deg)';
                icon.style.transition = 'transform 0.3s ease';
            }
        });
        
        card.addEventListener('mouseleave', function() {
            const icon = this.querySelector('.benefit-icon');
            if (icon) {
                icon.style.transform = 'scale(1) rotate(0)';
            }
        });
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è IntersectionObserver)
        if ('IntersectionObserver' in window) {
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('animated');
                        observer.unobserve(entry.target);
                    }
                });
            }, { threshold: 0.2 });
            
            observer.observe(card);
        } else {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            card.classList.add('animated');
        }
    });
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
 */
function initCompactBenefitAnimations() {
    const compactBenefits = document.querySelectorAll('.compact-benefit');
    
    if (!compactBenefits.length) return;
    
    compactBenefits.forEach(benefit => {
        benefit.addEventListener('mouseenter', function() {
            const icon = this.querySelector('.compact-benefit-icon');
            if (icon) {
                icon.style.transform = 'scale(1.2)';
                icon.style.transition = 'transform 0.2s ease';
            }
        });
        
        benefit.addEventListener('mouseleave', function() {
            const icon = this.querySelector('.compact-benefit-icon');
            if (icon) {
                icon.style.transform = 'scale(1)';
            }
        });
    });
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
 */
function initTechFeatureAnimations() {
    const techFeatures = document.querySelectorAll('.tech-feature');
    
    if (!techFeatures.length) return;
    
    techFeatures.forEach(feature => {
        feature.addEventListener('mouseenter', function() {
            const icon = this.querySelector('.tech-icon');
            if (icon) {
                icon.style.transform = 'scale(1.1) translateY(-5px)';
                icon.style.transition = 'transform 0.3s ease';
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ "–ø–∞—Ä–µ–Ω–∏—è"
                icon.style.boxShadow = '0 8px 15px rgba(0, 0, 0, 0.1)';
            }
        });
        
        feature.addEventListener('mouseleave', function() {
            const icon = this.querySelector('.tech-icon');
            if (icon) {
                icon.style.transform = 'scale(1) translateY(0)';
                icon.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.05)';
            }
        });
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
        if ('IntersectionObserver' in window) {
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('fade-in');
                        observer.unobserve(entry.target);
                    }
                });
            }, { threshold: 0.2 });
            
            observer.observe(feature);
        } else {
            feature.classList.add('fade-in');
        }
    });
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ DOM
 * –í—ã–∑—ã–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ –±–ª–æ–∫–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
 */
function refreshBenefitAnimations() {
    initBenefitAnimations();
    initCompactBenefitAnimations();
    initTechFeatureAnimations();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.refreshBenefitAnimations = refreshBenefitAnimations;
// –ê–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è Hero —Å–µ–∫—Ü–∏–∏

document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
    initCounters();
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–∞–∫—Å-—ç—Ñ—Ñ–µ–∫—Ç–∞
    initParallax();
});

// –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
function initCounters() {
    const statNumbers = document.querySelectorAll('.stat-number');
    
    if (statNumbers.length === 0) return;
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞
    function startCounter(element) {
        const target = parseInt(element.getAttribute('data-target'));
        const duration = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã
        const startTime = performance.now();
        const startValue = 0;
        
        function updateCounter(timestamp) {
            const elapsed = timestamp - startTime;
            const progress = Math.min(elapsed / duration, 1);
            
            // –≠—Ñ—Ñ–µ–∫—Ç –∑–∞–º–µ–¥–ª–µ–Ω–∏—è –∫ –∫–æ–Ω—Ü—É –∞–Ω–∏–º–∞—Ü–∏–∏ (easeOutQuad)
            const easeProgress = 1 - (1 - progress) * (1 - progress);
            
            const currentValue = Math.floor(startValue + (target - startValue) * easeProgress);
            element.textContent = currentValue;
            
            if (progress < 1) {
                requestAnimationFrame(updateCounter);
            } else {
                element.textContent = target;
                
                // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—É–ª—å—Å–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
                element.classList.add('counted');
            }
        }
        
        requestAnimationFrame(updateCounter);
    }
    
    // –ó–∞–ø—É—Å–∫ —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                startCounter(entry.target);
                observer.unobserve(entry.target); // –ù–∞–±–ª—é–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            }
        });
    }, { threshold: 0.5 });
    
    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏
    statNumbers.forEach(number => {
        observer.observe(number);
    });
}

// –ü–∞—Ä–∞–ª–ª–∞–∫—Å-—ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ñ–æ–Ω–∞
function initParallax() {
    const hero = document.querySelector('.hero');
    
    if (!hero) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–ª–ª–∞–∫—Å –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    // (–æ—Ç–∫–ª—é—á–∞–µ–º –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
    if (window.innerWidth < 992) return;
    
    window.addEventListener('scroll', function() {
        const scrollPosition = window.scrollY;
        const heroHeight = hero.offsetHeight;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–∞—Ä–∞–ª–ª–∞–∫—Å–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ–∫—Ü–∏—è –≤ –∑–æ–Ω–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏
        if (scrollPosition <= heroHeight) {
            const translateY = scrollPosition * 0.3; // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–∞—Ä–∞–ª–ª–∞–∫—Å–∞
            hero.style.backgroundPositionY = `calc(30% + ${translateY}px)`;
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏ (—Ç–æ–Ω–∫–∏–π –ø–∞—Ä–∞–ª–ª–∞–∫—Å)
    hero.addEventListener('mousemove', function(e) {
        // –¢–æ–ª—å–∫–æ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–∞—Ö
        if (window.innerWidth < 992) return;
        
        const mouseX = e.clientX / window.innerWidth - 0.5;
        const mouseY = e.clientY / window.innerHeight - 0.5;
        
        const translateX = mouseX * 20; // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
        const translateY = mouseY * 20; // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
        
        hero.style.backgroundPositionX = `calc(50% + ${translateX}px)`;
        hero.style.backgroundPositionY = `calc(30% + ${translateY}px)`;
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—É–ª—å—Å–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫
function pulseButtons() {
    const primaryButton = document.querySelector('.hero-actions .btn-primary');
    
    if (!primaryButton) return;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø—É–ª—å—Å–∞—Ü–∏–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    setInterval(() => {
        primaryButton.classList.add('pulse-animation');
        
        // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            primaryButton.classList.remove('pulse-animation');
        }, 1000);
    }, 5000); // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—É–ª—å—Å–∞—Ü–∏—é –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', function() {
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(pulseButtons, 3000);
});
// üé® –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –ò–ù–§–û–ì–†–ê–§–ò–ö–ê –ê–í–¢–û–ì–û–°–¢77
// –°–∏—Å—Ç–µ–º–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏

class InteractiveInfographic {
    constructor() {
        this.currentStep = 'start';
        this.selectedService = null;
        this.counters = {};
        this.initInfographic();
        this.startCounters();
    }

    initInfographic() {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏
        const container = document.getElementById('interactive-infographic');
        if (!container) return;

        container.innerHTML = this.getInfographicHTML();
        this.attachEventListeners();
        this.animateEntrance();
    }

    getInfographicHTML() {
        return `
            <div class="infographic-container">
                <div class="infographic-header">
                    <h2>üöõ –ö–∞–∫ –º—ã –¥–æ—Å—Ç–∞–≤–∏–º –≤–∞—à –≥—Ä—É–∑?</h2>
                    <p>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏ —É–∑–Ω–∞–π—Ç–µ –¥–µ—Ç–∞–ª–∏</p>
                </div>
                
                <div class="cargo-flowchart">
                    <div class="flow-start" id="flow-start">
                        <div class="cargo-box">
                            <div class="cargo-icon">üì¶</div>
                            <div class="cargo-title">–í–ê–® –ì–†–£–ó</div>
                            <div class="cargo-subtitle">–ö–∞–∫–æ–π –æ–±—ä–µ–º?</div>
                        </div>
                    </div>
                    
                    <div class="flow-arrows">
                        <div class="arrow arrow-1"></div>
                        <div class="arrow arrow-2"></div>
                        <div class="arrow arrow-3"></div>
                        <div class="arrow arrow-4"></div>
                    </div>
                    
                    <div class="service-options">
                        <div class="service-card gazelle" data-service="gazelle">
                            <div class="service-icon">üöê</div>
                            <div class="service-title">–ì–ê–ó–ï–õ–¨</div>
                            <div class="service-subtitle">–î–æ 1.5 —Ç–æ–Ω–Ω</div>
                            <div class="service-price">–æ—Ç 3,000‚ÇΩ</div>
                            <div class="service-badge">–ë—ã—Å—Ç—Ä–æ</div>
                        </div>
                        
                        <div class="service-card truck" data-service="truck">
                            <div class="service-icon">üöõ</div>
                            <div class="service-title">–û–¢–î–ï–õ–¨–ù–ê–Ø –ú–ê–®–ò–ù–ê</div>
                            <div class="service-subtitle">1.5-20 —Ç–æ–Ω–Ω</div>
                            <div class="service-price">–æ—Ç 25‚ÇΩ/–∫–º</div>
                            <div class="service-badge">–ù–∞–¥–µ–∂–Ω–æ</div>
                        </div>
                        
                        <div class="service-card consolidated" data-service="consolidated">
                            <div class="service-icon">üè≠</div>
                            <div class="service-title">–°–ë–û–†–ù–´–ô –ì–†–£–ó</div>
                            <div class="service-subtitle">–≠–∫–æ–Ω–æ–º–∏—è 70%</div>
                            <div class="service-price">–æ—Ç 15‚ÇΩ/–∫–≥</div>
                            <div class="service-badge">–í—ã–≥–æ–¥–Ω–æ</div>
                        </div>
                        
                        <div class="service-card calculator" data-service="calculator">
                            <div class="service-icon">‚ö°</div>
                            <div class="service-title">–ù–ï –ó–ù–ê–Æ</div>
                            <div class="service-subtitle">–†–∞—Å—á–µ—Ç –∑–∞ 30 —Å–µ–∫</div>
                            <div class="service-price">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</div>
                            <div class="service-badge">–¢–æ—á–Ω–æ</div>
                        </div>
                    </div>
                    
                    <div class="benefits-section" id="benefits-section" style="display: none;">
                        <div class="benefits-arrow"></div>
                        <div class="benefits-title">‚úÖ –í–ê–®–ò –í–´–ì–û–î–´</div>
                        <div class="benefits-grid">
                            <div class="benefit-item">
                                <div class="benefit-icon">‚è∞</div>
                                <div class="benefit-text">–ü–æ–¥–∞—á–∞ –∑–∞ 2 —á–∞—Å–∞</div>
                            </div>
                            <div class="benefit-item">
                                <div class="benefit-icon">üí∞</div>
                                <div class="benefit-text">–ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è —Ü–µ–Ω–∞</div>
                            </div>
                            <div class="benefit-item">
                                <div class="benefit-icon">üìû</div>
                                <div class="benefit-text">–ú–µ–Ω–µ–¥–∂–µ—Ä 24/7</div>
                            </div>
                            <div class="benefit-item">
                                <div class="benefit-icon">üõ°Ô∏è</div>
                                <div class="benefit-text">–ü–æ–ª–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å</div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="live-stats">
                    <div class="stat-item">
                        <div class="stat-number" id="today-orders">47</div>
                        <div class="stat-label">–∑–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number" id="total-clients">12,247</div>
                        <div class="stat-label">–¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">99.2%</div>
                        <div class="stat-label">–¥–æ—Å—Ç–∞–≤–æ–∫ –≤ —Å—Ä–æ–∫</div>
                    </div>
                </div>
            </div>
        `;
    }

    attachEventListeners() {
        // –ö–ª–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏
        document.querySelectorAll('.service-card').forEach(card => {
            card.addEventListener('click', (e) => {
                this.selectService(e.currentTarget.dataset.service);
            });
            
            // –≠—Ñ—Ñ–µ–∫—Ç –Ω–∞–≤–µ–¥–µ–Ω–∏—è
            card.addEventListener('mouseenter', (e) => {
                this.highlightService(e.currentTarget);
            });
            
            card.addEventListener('mouseleave', (e) => {
                this.unhighlightService(e.currentTarget);
            });
        });

        // –ö–ª–∏–∫–∏ –ø–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º
        document.querySelectorAll('.benefit-item').forEach(benefit => {
            benefit.addEventListener('click', (e) => {
                this.showBenefitDetails(e.currentTarget);
            });
        });
    }

    selectService(serviceType) {
        this.selectedService = serviceType;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞
        document.querySelectorAll('.service-card').forEach(card => {
            card.classList.remove('selected', 'dimmed');
            if (card.dataset.service === serviceType) {
                card.classList.add('selected');
            } else {
                card.classList.add('dimmed');
            }
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        setTimeout(() => {
            const benefitsSection = document.getElementById('benefits-section');
            benefitsSection.style.display = 'block';
            setTimeout(() => benefitsSection.classList.add('visible'), 50);
        }, 300);

        // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        if (typeof ym !== 'undefined') {
            ym(103413788, 'reachGoal', `infographic_${serviceType}_selected`);
        }

        // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–æ—Ä–æ–Ω–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            this.redirectToFunnel(serviceType);
        }, 2000);
    }

    redirectToFunnel(serviceType) {
        const funnels = {
            'gazelle': '#calculator',
            'truck': '#calculator', 
            'consolidated': '#calculator',
            'calculator': '#calculator'
        };

        const targetElement = document.querySelector(funnels[serviceType]);
        if (targetElement) {
            targetElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            
            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
            setTimeout(() => {
                targetElement.classList.add('highlighted');
                setTimeout(() => targetElement.classList.remove('highlighted'), 2000);
            }, 500);
        }
    }

    highlightService(card) {
        if (!card.classList.contains('selected')) {
            card.style.transform = 'translateY(-5px) scale(1.02)';
            card.style.boxShadow = '0 8px 25px rgba(37, 99, 235, 0.3)';
        }
    }

    unhighlightService(card) {
        if (!card.classList.contains('selected')) {
            card.style.transform = '';
            card.style.boxShadow = '';
        }
    }

    showBenefitDetails(benefit) {
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ
        benefit.classList.add('pulsing');
        setTimeout(() => benefit.classList.remove('pulsing'), 1000);
    }

    startCounters() {
        // –ê–Ω–∏–º–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        this.animateCounter('today-orders', 47, 52, 5000);
        this.animateCounter('total-clients', 12247, 12253, 10000);
    }

    animateCounter(elementId, startValue, endValue, duration) {
        const element = document.getElementById(elementId);
        if (!element) return;

        const startTime = Date.now();
        const updateCounter = () => {
            const elapsed = Date.now() - startTime;
            const progress = Math.min(elapsed / duration, 1);
            
            const current = Math.floor(startValue + (endValue - startValue) * progress);
            element.textContent = current.toLocaleString();
            
            if (progress < 1) {
                requestAnimationFrame(updateCounter);
            } else {
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª
                setTimeout(() => {
                    this.animateCounter(elementId, endValue, startValue, duration);
                }, 2000);
            }
        };
        
        requestAnimationFrame(updateCounter);
    }

    animateEntrance() {
        // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const elements = [
            '.infographic-header',
            '.flow-start',
            '.service-card',
            '.live-stats'
        ];

        elements.forEach((selector, index) => {
            setTimeout(() => {
                document.querySelectorAll(selector).forEach(el => {
                    el.classList.add('animate-in');
                });
            }, index * 200);
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    window.interactiveInfographic = new InteractiveInfographic();
});

// Lazy Loading –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
document.addEventListener('DOMContentLoaded', function() {
    // Native lazy loading –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    if ('loading' in HTMLImageElement.prototype) {
        const images = document.querySelectorAll('img[loading="lazy"]');
        images.forEach(img => {
            img.src = img.dataset.src || img.src;
        });
    } else {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const script = document.createElement('script');
        script.src = '/assets/js/lazysizes.min.js';
        document.body.appendChild(script);
    }
    
    // Intersection Observer –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src || img.src;
                img.classList.add('loaded');
                observer.unobserve(img);
            }
        });
    }, {
        rootMargin: '50px 0px',
        threshold: 0.01
    });
    
    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Å data-src
    document.querySelectorAll('img[data-src]').forEach(img => {
        imageObserver.observe(img);
    });
});
/* ===== LOADING STATES GOD MODE ===== */
/* –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ loading —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ –≤—Å–µ —Ñ–æ—Ä–º—ã */

document.addEventListener('DOMContentLoaded', function() {
    
    // üéØ –£–õ–£–ß–®–ï–ù–ò–ï UX: Loading States –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º
    const forms = document.querySelectorAll('form');
    
    forms.forEach(form => {
        const submitButton = form.querySelector('button[type="submit"], input[type="submit"]');
        
        if (submitButton) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            const originalText = submitButton.textContent || submitButton.value;
            
            form.addEventListener('submit', function(e) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loading —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if (submitButton.tagName === 'BUTTON') {
                    submitButton.innerHTML = '<span class="loading-spinner"></span> –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
                } else {
                    submitButton.value = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
                }
                
                submitButton.disabled = true;
                submitButton.classList.add('loading-state');
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã (–µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –Ω–µ —É—à–ª–∞ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É)
                setTimeout(() => {
                    if (submitButton.tagName === 'BUTTON') {
                        submitButton.innerHTML = originalText;
                    } else {
                        submitButton.value = originalText;
                    }
                    submitButton.disabled = false;
                    submitButton.classList.remove('loading-state');
                }, 3000);
            });
        }
    });
    
    // üéØ –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†: Loading State –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
    const calcButtons = document.querySelectorAll('.btn-calculate, .btn-calc, [onclick*="calculate"]');
    
    calcButtons.forEach(button => {
        const originalText = button.textContent;
        
        button.addEventListener('click', function() {
            if (!button.disabled) {
                button.innerHTML = '<span class="loading-spinner"></span> –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º...';
                button.disabled = true;
                button.classList.add('loading-state');
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞
                setTimeout(() => {
                    button.innerHTML = originalText;
                    button.disabled = false;
                    button.classList.remove('loading-state');
                }, 2000);
            }
        });
    });
    
    // üéØ –§–ê–ô–õ–û–í–´–ï –ó–ê–ì–†–£–ó–ö–ò: Progress Bar
    const fileInputs = document.querySelectorAll('input[type="file"]');
    
    fileInputs.forEach(input => {
        input.addEventListener('change', function() {
            if (this.files.length > 0) {
                const fileName = this.files[0].name;
                const statusDiv = document.createElement('div');
                statusDiv.className = 'file-upload-status';
                statusDiv.innerHTML = `
                    <div class="upload-progress">
                        <div class="progress-bar" style="width: 0%"></div>
                    </div>
                    <span class="file-name">üìé ${fileName}</span>
                `;
                
                this.parentNode.appendChild(statusDiv);
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
                let progress = 0;
                const progressBar = statusDiv.querySelector('.progress-bar');
                const interval = setInterval(() => {
                    progress += Math.random() * 30;
                    if (progress >= 100) {
                        progress = 100;
                        clearInterval(interval);
                        statusDiv.innerHTML = `<span class="file-success">‚úÖ ${fileName} –∑–∞–≥—Ä—É–∂–µ–Ω</span>`;
                    }
                    progressBar.style.width = progress + '%';
                }, 200);
            }
        });
    });
    
    console.log('üöÄ Loading States –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤!');
});

/* ===== CSS –î–õ–Ø LOADING STATES ===== */
const loadingCSS = `
.loading-spinner {
    display: inline-block;
    width: 16px;
    height: 16px;
    border: 2px solid #ffffff;
    border-radius: 50%;
    border-top-color: transparent;
    animation: spin 1s linear infinite;
    margin-right: 8px;
}

@keyframes spin {
    to { transform: rotate(360deg); }
}

.loading-state {
    opacity: 0.7;
    cursor: not-allowed !important;
    position: relative;
}

.file-upload-status {
    margin-top: 10px;
    padding: 10px;
    background: #f8f9fa;
    border-radius: 6px;
    font-size: 14px;
}

.upload-progress {
    width: 100%;
    height: 6px;
    background: #e9ecef;
    border-radius: 3px;
    overflow: hidden;
    margin-bottom: 8px;
}

.progress-bar {
    height: 100%;
    background: linear-gradient(90deg, #2563eb, #3b82f6);
    transition: width 0.3s ease;
}

.file-success {
    color: #059669;
    font-weight: 600;
}

.file-name {
    color: #64748b;
}
`;

// –î–æ–±–∞–≤–ª—è–µ–º CSS –≤ head
const style = document.createElement('style');
style.textContent = loadingCSS;
document.head.appendChild(style);


// Mobile Collapse Functionality
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–∫—Ü–∏–π —Å data-collapse="mobile"

document.addEventListener('DOMContentLoaded', function() {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ —Å data-collapse="mobile"
    const collapsibleSections = document.querySelectorAll('[data-collapse="mobile"]');
    
    collapsibleSections.forEach(section => {
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
        const toggle = document.createElement('button');
        toggle.className = 'mobile-toggle';
        toggle.setAttribute('aria-label', '–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Å–µ–∫—Ü–∏—é');
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏
        const sectionTitle = section.querySelector('h2, h3, h4') || 
                           section.querySelector('.section-title') ||
                           section.getAttribute('data-title') ||
                           '–ü–æ–¥—Ä–æ–±–Ω–µ–µ';
        
        toggle.textContent = sectionTitle.textContent || sectionTitle;
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–¥ —Å–µ–∫—Ü–∏–µ–π
        section.parentNode.insertBefore(toggle, section);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        toggle.addEventListener('click', function() {
            const isExpanded = section.classList.contains('expanded');
            
            if (isExpanded) {
                // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é
                section.classList.remove('expanded');
                toggle.classList.remove('expanded');
                toggle.setAttribute('aria-expanded', 'false');
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é
                section.classList.add('expanded');
                toggle.classList.add('expanded');
                toggle.setAttribute('aria-expanded', 'true');
                
                // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
                section.style.display = 'block';
                section.style.opacity = '0';
                section.style.transform = 'translateY(-10px)';
                
                setTimeout(() => {
                    section.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
                    section.style.opacity = '1';
                    section.style.transform = 'translateY(0)';
                }, 10);
            }
        });
        
        // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
        function handleResize() {
            if (window.innerWidth > 768) {
                section.style.display = 'block';
                section.style.opacity = '1';
                section.style.transform = 'none';
                toggle.style.display = 'none';
            } else {
                if (!section.classList.contains('expanded')) {
                    section.style.display = 'none';
                }
                toggle.style.display = 'flex';
            }
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        handleResize();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', handleResize);
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
    const mobileToggles = document.querySelectorAll('.mobile-toggle');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    mobileToggles.forEach(toggle => {
        toggle.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                toggle.click();
            }
        });
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —Å–µ–∫—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —è–∫–æ—Ä—é
    if (window.location.hash) {
        const targetSection = document.querySelector(window.location.hash);
        if (targetSection && targetSection.hasAttribute('data-collapse')) {
            const toggle = targetSection.previousElementSibling;
            if (toggle && toggle.classList.contains('mobile-toggle')) {
                setTimeout(() => {
                    toggle.click();
                    targetSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }, 100);
            }
        }
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.MobileCollapse = {
    init: function() {
        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        this.handleResize();
    },
    
    handleResize: function() {
        const collapsibleSections = document.querySelectorAll('[data-collapse="mobile"]');
        const mobileToggles = document.querySelectorAll('.mobile-toggle');
        
        collapsibleSections.forEach(section => {
            if (window.innerWidth > 768) {
                section.style.display = 'block';
                section.style.opacity = '1';
                section.style.transform = 'none';
            }
        });
        
        mobileToggles.forEach(toggle => {
            if (window.innerWidth > 768) {
                toggle.style.display = 'none';
            } else {
                toggle.style.display = 'flex';
            }
        });
    }
};
/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * v1.0.0 - 2025-08
 */

document.addEventListener('DOMContentLoaded', function() {
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —è–∫–æ—Ä–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º —Å–µ–∫—Ü–∏–π
    addSectionAnchors();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    createPageNavigation();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á—Ç–µ–Ω–∏—è
    initReadingProgress();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–≤–µ—Ä—Ö"
    initBackToTop();
});

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —è–∫–æ—Ä–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º —Å–µ–∫—Ü–∏–π
 */
function addSectionAnchors() {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π
    const sectionHeaders = document.querySelectorAll('section h2, section h3');
    
    sectionHeaders.forEach(header => {
        // –°–æ–∑–¥–∞–µ–º ID –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!header.id) {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            let id = header.textContent
                .toLowerCase()
                .replace(/[^\w–∞-—è—ë]+/g, '-') // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–µ –±—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å
                .replace(/^-+|-+$/g, ''); // –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'section-' –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            header.id = 'section-' + id;
        }
        
        // –°–æ–∑–¥–∞–µ–º —è–∫–æ—Ä–Ω—É—é —Å—Å—ã–ª–∫—É
        const anchor = document.createElement('a');
        anchor.href = '#' + header.id;
        anchor.className = 'anchor-link';
        anchor.innerHTML = '#';
        anchor.title = '–°—Å—ã–ª–∫–∞ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª';
        
        // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ div –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —è–∫–æ—Ä–Ω–æ–π —Å—Å—ã–ª–∫–∏
        if (!header.parentElement.classList.contains('section-header')) {
            const headerWrapper = document.createElement('div');
            headerWrapper.className = 'section-header';
            header.parentNode.insertBefore(headerWrapper, header);
            headerWrapper.appendChild(header);
            headerWrapper.appendChild(anchor);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–π —è–∫–æ—Ä—å –ø–µ—Ä–µ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        const anchorTarget = document.createElement('span');
        anchorTarget.className = 'section-anchor';
        anchorTarget.id = header.id + '-anchor';
        header.parentNode.insertBefore(anchorTarget, header.parentNode.firstChild);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º ID –∑–∞–≥–æ–ª–æ–≤–∫–∞, —á—Ç–æ–±—ã –æ–Ω —É–∫–∞–∑—ã–≤–∞–ª –Ω–∞ —è–∫–æ—Ä—å
        header.id = '';
    });
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 */
function createPageNavigation() {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π
    const sectionHeaders = document.querySelectorAll('section h2');
    
    // –ï—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–µ–Ω—å—à–µ 3 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    if (sectionHeaders.length < 3) return;
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navigation = document.createElement('div');
    navigation.className = 'page-navigation';
    navigation.innerHTML = `
        <div class="page-navigation-title">
            –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            <button class="page-navigation-toggle">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="6 9 12 15 18 9"></polyline>
                </svg>
            </button>
        </div>
        <ul class="page-navigation-list"></ul>
    `;
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navigationList = navigation.querySelector('.page-navigation-list');
    
    sectionHeaders.forEach(header => {
        // –ü–æ–ª—É—á–∞–µ–º ID —è–∫–æ—Ä—è
        const anchorId = header.parentElement.previousSibling.id;
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
        const listItem = document.createElement('li');
        listItem.className = 'page-navigation-item';
        
        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É
        const link = document.createElement('a');
        link.href = '#' + anchorId;
        link.className = 'page-navigation-link';
        link.textContent = header.textContent;
        link.dataset.target = anchorId;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const targetId = this.getAttribute('href').substring(1);
            const targetElement = document.getElementById(targetId);
            
            if (targetElement) {
                window.scrollTo({
                    top: targetElement.offsetTop,
                    behavior: 'smooth'
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º URL –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                history.pushState(null, null, '#' + targetId);
                
                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
                document.querySelectorAll('.page-navigation-link').forEach(link => {
                    link.classList.remove('active');
                });
                this.classList.add('active');
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
        listItem.appendChild(link);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        navigationList.appendChild(listItem);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–≤–æ–π —Å–µ–∫—Ü–∏–∏
    const firstSection = document.querySelector('section');
    if (firstSection) {
        firstSection.parentNode.insertBefore(navigation, firstSection);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    const toggleButton = navigation.querySelector('.page-navigation-toggle');
    toggleButton.addEventListener('click', function() {
        navigationList.classList.toggle('expanded');
        
        // –ò–∑–º–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏
        if (navigationList.classList.contains('expanded')) {
            this.innerHTML = `
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="18 15 12 9 6 15"></polyline>
                </svg>
            `;
        } else {
            this.innerHTML = `
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="6 9 12 15 18 9"></polyline>
                </svg>
            `;
        }
    });
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    window.addEventListener('scroll', function() {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
        if (window.scrollY > 100) {
            navigation.classList.add('shadow-active');
        } else {
            navigation.classList.remove('shadow-active');
        }
        
        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –≤–∏–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª
        const current = findCurrentSection();
        if (current) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Å—ã–ª–∫—É
            document.querySelectorAll('.page-navigation-link').forEach(link => {
                link.classList.remove('active');
                if (link.dataset.target === current) {
                    link.classList.add('active');
                }
            });
        }
    });
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–π –≤–∏–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª
 * @returns {string|null} - ID —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –∏–ª–∏ null
 */
function findCurrentSection() {
    const anchors = document.querySelectorAll('.section-anchor');
    let current = null;
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —è–∫–æ—Ä—å, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∏–∂–µ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –æ–∫–Ω–∞
    // —Å –Ω–µ–±–æ–ª—å—à–∏–º –æ—Ç—Å—Ç—É–ø–æ–º –¥–ª—è –ª—É—á—à–µ–≥–æ UX
    const scrollPosition = window.scrollY + 100;
    
    for (let i = 0; i < anchors.length; i++) {
        const anchor = anchors[i];
        const nextAnchor = anchors[i + 1];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –∏ —Å–ª–µ–¥—É—é—â–∏–º —è–∫–æ—Ä–µ–º
        if (anchor.offsetTop <= scrollPosition && 
            (!nextAnchor || nextAnchor.offsetTop > scrollPosition)) {
            current = anchor.id;
            break;
        }
    }
    
    // –ï—Å–ª–∏ –º—ã –≤ —Å–∞–º–æ–º –Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –≤—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —è–∫–æ—Ä—å
    if (!current && anchors.length > 0 && 
        window.innerHeight + window.scrollY >= document.body.offsetHeight - 100) {
        current = anchors[anchors.length - 1].id;
    }
    
    return current;
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á—Ç–µ–Ω–∏—è
 */
function initReadingProgress() {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const progressContainer = document.createElement('div');
    progressContainer.className = 'reading-progress-container';
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const progressBar = document.createElement('div');
    progressBar.className = 'reading-progress-bar';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    progressContainer.appendChild(progressBar);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –Ω–∞—á–∞–ª–æ body
    document.body.insertBefore(progressContainer, document.body.firstChild);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
    window.addEventListener('scroll', function() {
        updateReadingProgress(progressBar);
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', function() {
        updateReadingProgress(progressBar);
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    updateReadingProgress(progressBar);
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á—Ç–µ–Ω–∏—è
 * @param {HTMLElement} progressBar - –≠–ª–µ–º–µ–Ω—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */
function updateReadingProgress(progressBar) {
    const scrollTop = window.scrollY;
    const scrollHeight = document.documentElement.scrollHeight;
    const clientHeight = document.documentElement.clientHeight;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    const scrollPercentage = (scrollTop / (scrollHeight - clientHeight)) * 100;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
    progressBar.style.width = scrollPercentage + '%';
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–≤–µ—Ä—Ö"
 */
function initBackToTop() {
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
    const backToTopButton = document.createElement('div');
    backToTopButton.className = 'back-to-top';
    backToTopButton.innerHTML = `
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="18 15 12 9 6 15"></polyline>
        </svg>
    `;
    backToTopButton.title = '–ù–∞–≤–µ—Ä—Ö';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–æ–Ω–µ—Ü body
    document.body.appendChild(backToTopButton);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –Ω–∞–≤–µ—Ä—Ö
    backToTopButton.addEventListener('click', function() {
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
    window.addEventListener('scroll', function() {
        if (window.scrollY > 300) {
            backToTopButton.classList.add('visible');
        } else {
            backToTopButton.classList.remove('visible');
        }
    });
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ DOM
 * –í—ã–∑—ã–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
 */
function refreshPageNavigation() {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    const existingNavigation = document.querySelector('.page-navigation');
    if (existingNavigation) {
        existingNavigation.remove();
    }
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —è–∫–æ—Ä—è
    document.querySelectorAll('.section-anchor').forEach(anchor => {
        anchor.remove();
    });
    
    document.querySelectorAll('.section-header').forEach(header => {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –æ–±–µ—Ä—Ç–∫–∏
        const h2 = header.querySelector('h2, h3');
        if (h2) {
            header.parentNode.insertBefore(h2, header);
            header.remove();
        }
    });
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    addSectionAnchors();
    createPageNavigation();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.refreshPageNavigation = refreshPageNavigation;
/**
 * Sticky CTA Panel –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 * –î–æ–∫-–ø–∞–Ω–µ–ª—å —Å–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
 */
class StickyCTA {
  constructor() {
    this.isVisible = false;
    this.isMobile = window.innerWidth <= 768;
    this.init();
  }

  init() {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å
    this.createPanel();
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
    window.addEventListener('resize', () => {
      this.isMobile = window.innerWidth <= 768;
      this.updateVisibility();
    });

    // –°–ª—É—à–∞–µ–º —Å–∫—Ä–æ–ª–ª –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è
    window.addEventListener('scroll', () => {
      this.handleScroll();
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    setTimeout(() => {
      this.show();
    }, 3000);
  }

  createPanel() {
    const panel = document.createElement('div');
    panel.id = 'sticky-cta-panel';
    panel.innerHTML = `
      <div class="sticky-cta-container">
        <button class="sticky-cta-btn sticky-cta-calc" onclick="stickyCTA.scrollToCalculator()">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"/>
          </svg>
          <span>–†–∞—Å—Å—á–∏—Ç–∞—Ç—å</span>
        </button>
        
        <button class="sticky-cta-btn sticky-cta-whatsapp" onclick="stickyCTA.openWhatsApp()">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 11.5a8.38 8.38 0 01-.9 3.8 8.5 8.5 0 01-7.6 4.7 8.38 8.38 0 01-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 01-.9-3.8 8.5 8.5 0 014.7-7.6 8.38 8.38 0 013.8-.9h.5a8.48 8.48 0 018 8v.5z"/>
          </svg>
          <span>WhatsApp</span>
        </button>
        
        <button class="sticky-cta-btn sticky-cta-phone" onclick="stickyCTA.callPhone()">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M22 16.92v3a2 2 0 01-2.18 2 19.79 19.79 0 01-8.63-3.07 19.5 19.5 0 01-6-6 19.79 19.79 0 01-3.07-8.67A2 2 0 014.11 2h3a2 2 0 012 1.72 12.84 12.84 0 00.7 2.81 2 2 0 01-.45 2.11L8.09 9.91a16 16 0 006 6l1.27-1.27a2 2 0 012.11-.45 12.84 12.84 0 002.81.7A2 2 0 0122 16.92z"/>
          </svg>
          <span>–ü–æ–∑–≤–æ–Ω–∏—Ç—å</span>
        </button>
      </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
    const styles = document.createElement('style');
    styles.textContent = `
      #sticky-cta-panel {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        z-index: 1000;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-top: 1px solid rgba(0, 0, 0, 0.1);
        transform: translateY(100%);
        transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        padding: 8px 16px;
        padding-bottom: calc(8px + env(safe-area-inset-bottom));
      }

      #sticky-cta-panel.show {
        transform: translateY(0);
      }

      .sticky-cta-container {
        display: flex;
        gap: 8px;
        max-width: 400px;
        margin: 0 auto;
      }

      .sticky-cta-btn {
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 4px;
        padding: 12px 8px;
        border: none;
        border-radius: 12px;
        background: #f8f9fa;
        color: #495057;
        font-size: 12px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
        min-height: 60px;
        justify-content: center;
      }

      .sticky-cta-btn:hover {
        background: #e9ecef;
        transform: translateY(-1px);
      }

      .sticky-cta-btn:active {
        transform: translateY(0);
      }

      .sticky-cta-calc {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
      }

      .sticky-cta-calc:hover {
        background: linear-gradient(135deg, #0056b3, #004085);
      }

      .sticky-cta-whatsapp {
        background: linear-gradient(135deg, #25d366, #128c7e);
        color: white;
      }

      .sticky-cta-whatsapp:hover {
        background: linear-gradient(135deg, #128c7e, #075e54);
      }

      .sticky-cta-phone {
        background: linear-gradient(135deg, #dc3545, #c82333);
        color: white;
      }

      .sticky-cta-phone:hover {
        background: linear-gradient(135deg, #c82333, #a71e2a);
      }

      .sticky-cta-btn svg {
        flex-shrink: 0;
      }

      .sticky-cta-btn span {
        font-size: 11px;
        line-height: 1.2;
        text-align: center;
      }

      /* –¢–æ–ª—å–∫–æ –Ω–∞ –º–æ–±–∏–ª–µ */
      @media (min-width: 769px) {
        #sticky-cta-panel {
          display: none;
        }
      }

      /* –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è */
      @keyframes slideUp {
        from {
          transform: translateY(100%);
        }
        to {
          transform: translateY(0);
        }
      }

      #sticky-cta-panel.show {
        animation: slideUp 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }
    `;

    document.head.appendChild(styles);
    document.body.appendChild(panel);
    this.panel = panel;
  }

  show() {
    if (!this.isMobile) return;
    
    this.panel.classList.add('show');
    this.isVisible = true;
    
    // –¢—Ä–µ–∫–∏–Ω–≥ –ø–æ–∫–∞–∑–∞
    if (window.ym) {
      window.ym(103413788, 'reachGoal', 'sticky_cta_show');
    }
  }

  hide() {
    this.panel.classList.remove('show');
    this.isVisible = false;
  }

  updateVisibility() {
    if (this.isMobile && !this.isVisible) {
      this.show();
    } else if (!this.isMobile && this.isVisible) {
      this.hide();
    }
  }

  handleScroll() {
    if (!this.isMobile) return;
    
    const scrollY = window.scrollY;
    const windowHeight = window.innerHeight;
    const documentHeight = document.documentElement.scrollHeight;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –ø—Ä–æ–∫—Ä—É—Ç–∏–ª–∏ –±–æ–ª—å—à–µ 50% —ç–∫—Ä–∞–Ω–∞
    if (scrollY > windowHeight * 0.5) {
      if (!this.isVisible) {
        this.show();
      }
    } else {
      if (this.isVisible) {
        this.hide();
      }
    }
  }

  scrollToCalculator() {
    const calculator = document.getElementById('calculator');
    if (calculator) {
      calculator.scrollIntoView({ 
        behavior: 'smooth',
        block: 'start'
      });
      
      // –¢—Ä–µ–∫–∏–Ω–≥ –∫–ª–∏–∫–∞
      if (window.ym) {
        window.ym(103413788, 'reachGoal', 'sticky_cta_calc_click');
      }
    }
  }

  openWhatsApp() {
    const message = encodeURIComponent('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—á—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏.');
    const url = `https://wa.me/79162720932?text=${message}`;
    window.open(url, '_blank');
    
    // –¢—Ä–µ–∫–∏–Ω–≥ –∫–ª–∏–∫–∞
    if (window.ym) {
      window.ym(103413788, 'reachGoal', 'sticky_cta_whatsapp_click');
    }
  }

  callPhone() {
    window.location.href = 'tel:+79162720932';
    
    // –¢—Ä–µ–∫–∏–Ω–≥ –∫–ª–∏–∫–∞
    if (window.ym) {
      window.ym(103413788, 'reachGoal', 'sticky_cta_phone_click');
    }
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
  window.stickyCTA = new StickyCTA();
});
/**
 * –°–ª–∞–π–¥–µ—Ä –æ—Ç–∑—ã–≤–æ–≤ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
 * v1.0.0 - 2025-08
 */

document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–µ—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤
    initTestimonialsSlider();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
    initStatCounters();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
    initClientLogos();
});

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–µ—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤
 */
function initTestimonialsSlider() {
    const slider = document.querySelector('.testimonials-slider');
    if (!slider) return;
    
    const prevButton = document.querySelector('.testimonials-nav-prev');
    const nextButton = document.querySelector('.testimonials-nav-next');
    const cards = slider.querySelectorAll('.testimonial-card');
    
    if (!prevButton || !nextButton) return;
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞
    const getVisibleCount = () => {
        if (window.innerWidth < 768) return 1;
        if (window.innerWidth < 1024) return 2;
        return 3;
    };
    
    // –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    let currentIndex = 0;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const updateNavButtons = () => {
        prevButton.disabled = currentIndex === 0;
        nextButton.disabled = currentIndex >= cards.length - getVisibleCount();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫
        if (prevButton.disabled) {
            prevButton.style.opacity = '0.5';
            prevButton.style.cursor = 'not-allowed';
        } else {
            prevButton.style.opacity = '1';
            prevButton.style.cursor = 'pointer';
        }
        
        if (nextButton.disabled) {
            nextButton.style.opacity = '0.5';
            nextButton.style.cursor = 'not-allowed';
        } else {
            nextButton.style.opacity = '1';
            nextButton.style.cursor = 'pointer';
        }
    };
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É
    const scrollToIndex = (index) => {
        if (index < 0) index = 0;
        if (index > cards.length - getVisibleCount()) {
            index = cards.length - getVisibleCount();
        }
        
        currentIndex = index;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        const card = cards[index];
        const scrollLeft = card.offsetLeft - slider.offsetLeft;
        
        // –ü–ª–∞–≤–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        slider.scrollTo({
            left: scrollLeft,
            behavior: 'smooth'
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        updateNavButtons();
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    prevButton.addEventListener('click', () => {
        scrollToIndex(currentIndex - 1);
    });
    
    nextButton.addEventListener('click', () => {
        scrollToIndex(currentIndex + 1);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å–ª–∞–π–¥–µ—Ä–∞
    slider.addEventListener('scroll', () => {
        // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∫ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
        const scrollLeft = slider.scrollLeft;
        let closestIndex = 0;
        let minDistance = Infinity;
        
        cards.forEach((card, index) => {
            const distance = Math.abs(card.offsetLeft - slider.offsetLeft - scrollLeft);
            if (distance < minDistance) {
                minDistance = distance;
                closestIndex = index;
            }
        });
        
        currentIndex = closestIndex;
        updateNavButtons();
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', () => {
        // –ü–µ—Ä–µ–ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ç–µ–∫—É—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        scrollToIndex(currentIndex);
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    updateNavButtons();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å–ª–∞–π–¥–µ—Ä–∞
    let autoScrollInterval;
    
    const startAutoScroll = () => {
        autoScrollInterval = setInterval(() => {
            if (currentIndex < cards.length - getVisibleCount()) {
                scrollToIndex(currentIndex + 1);
            } else {
                scrollToIndex(0);
            }
        }, 5000); // –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏ - 5 —Å–µ–∫—É–Ω–¥
    };
    
    const stopAutoScroll = () => {
        clearInterval(autoScrollInterval);
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É
    startAutoScroll();
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    slider.addEventListener('mouseenter', stopAutoScroll);
    prevButton.addEventListener('mouseenter', stopAutoScroll);
    nextButton.addEventListener('mouseenter', stopAutoScroll);
    
    // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ö–æ–¥–∏—Ç
    slider.addEventListener('mouseleave', startAutoScroll);
    prevButton.addEventListener('mouseleave', startAutoScroll);
    nextButton.addEventListener('mouseleave', startAutoScroll);
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
 */
function initStatCounters() {
    const counters = document.querySelectorAll('.counter-value');
    
    if (!counters.length) return;
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞
    const animateCounter = (counter, targetValue) => {
        let startValue = 0;
        const duration = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã
        const increment = targetValue / (duration / 16); // 16–º—Å - –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω –∫–∞–¥—Ä –ø—Ä–∏ 60fps
        
        const updateCounter = () => {
            startValue += increment;
            if (startValue < targetValue) {
                counter.textContent = Math.floor(startValue).toLocaleString();
                requestAnimationFrame(updateCounter);
            } else {
                counter.textContent = targetValue.toLocaleString();
            }
        };
        
        updateCounter();
    };
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Intersection Observer –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤ –ø–æ–ª–µ –∑—Ä–µ–Ω–∏—è
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const counter = entry.target;
                const targetValue = parseInt(counter.getAttribute('data-value'));
                animateCounter(counter, targetValue);
                observer.unobserve(counter);
            }
        });
    }, { threshold: 0.1 });
    
    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏
    counters.forEach(counter => {
        observer.observe(counter);
    });
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
 */
function initClientLogos() {
    const logos = document.querySelectorAll('.client-logo');
    
    if (!logos.length) return;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
    const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry, index) => {
            if (entry.isIntersecting) {
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞
                setTimeout(() => {
                    entry.target.style.opacity = '0.7';
                    entry.target.style.transform = 'translateY(0)';
                }, index * 100);
                
                observer.unobserve(entry.target);
            }
        });
    }, { threshold: 0.1 });
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø—ã –∫ –∞–Ω–∏–º–∞—Ü–∏–∏
    logos.forEach(logo => {
        logo.style.opacity = '0';
        logo.style.transform = 'translateY(20px)';
        logo.style.transition = 'all 0.5s ease';
        
        observer.observe(logo);
    });
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
 * –í—ã–∑—ã–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
 */
function refreshSocialProof() {
    initTestimonialsSlider();
    initStatCounters();
    initClientLogos();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.refreshSocialProof = refreshSocialProof;
/**
 * UX –£–õ–£–ß–®–ï–ù–ò–Ø - TL;DR, –ê–ö–ö–û–†–î–ï–û–ù–´, STICKY TOC
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞
 */

class UXImprovements {
  constructor() {
    this.init();
  }

  init() {
    this.setupAccordions();
    this.setupStickyTOC();
    this.setupTLDR();
    this.setupLazyLoading();
    this.setupScrollAnimations();
    this.setupCalculatorEnhancements();
    this.setupMobileStickyActions();
  }

  // –ê–ö–ö–û–†–î–ï–û–ù–´
  setupAccordions() {
    const accordions = document.querySelectorAll('.accordion');
    
    accordions.forEach(accordion => {
      const trigger = accordion.querySelector('.accordion-trigger');
      const content = accordion.querySelector('.accordion-content');
      
      if (trigger && content) {
        trigger.addEventListener('click', () => {
          const isOpen = accordion.classList.contains('open');
          
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
          accordions.forEach(acc => {
            if (acc !== accordion) {
              acc.classList.remove('open');
              const accContent = acc.querySelector('.accordion-content');
              if (accContent) {
                accContent.style.maxHeight = '0px';
              }
            }
          });
          
          // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π
          if (isOpen) {
            accordion.classList.remove('open');
            content.style.maxHeight = '0px';
          } else {
            accordion.classList.add('open');
            content.style.maxHeight = content.scrollHeight + 'px';
          }
        });
      }
    });
  }

  // –î–û–ü. CTA –î–õ–Ø –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê
  setupCalculatorEnhancements() {
    const btn = document.getElementById('downloadPdf');
    if (btn) {
      btn.addEventListener('click', () => {
        if (window.calculatorV2 && typeof window.calculatorV2.downloadPDF === 'function') {
          window.calculatorV2.downloadPDF();
        } else if (window.pdfLeadMagnet) {
          window.pdfLeadMagnet.showContactModal();
        }
      });
    }
  }

  // –õ–ò–ü–ö–ò–ï –ö–ù–û–ü–ö–ò –î–õ–Ø –ú–û–ë–ò–õ–¨–ù–´–•
  setupMobileStickyActions() {
    if (window.matchMedia('(max-width: 768px)').matches) {
      const exists = document.querySelector('.mobile-sticky-actions');
      if (exists) return;
      const bar = document.createElement('div');
      bar.className = 'mobile-sticky-actions';
      bar.innerHTML = `
        <a href="tel:+79162720932" class="msa-item">üìû –ó–≤–æ–Ω–æ–∫</a>
        <a href="https://wa.me/79162720932" target="_blank" class="msa-item">üí¨ WhatsApp</a>
        <a href="#calculator" class="msa-item">üßÆ –†–∞—Å—á–µ—Ç</a>
      `;
      document.body.appendChild(bar);
    }
  }

  // STICKY TOC (–û–ì–õ–ê–í–õ–ï–ù–ò–ï)
  setupStickyTOC() {
    const toc = document.querySelector('.sticky-toc');
    if (!toc) return;

    const headings = document.querySelectorAll('h2, h3');
    const tocList = toc.querySelector('.toc-list');
    
    if (!tocList) return;

    // –°–æ–∑–¥–∞–µ–º –ø—É–Ω–∫—Ç—ã TOC
    headings.forEach((heading, index) => {
      const id = heading.id || `heading-${index}`;
      heading.id = id;
      
      const tocItem = document.createElement('li');
      tocItem.className = `toc-item toc-${heading.tagName.toLowerCase()}`;
      
      const tocLink = document.createElement('a');
      tocLink.href = `#${id}`;
      tocLink.textContent = heading.textContent;
      tocLink.addEventListener('click', (e) => {
        e.preventDefault();
        heading.scrollIntoView({ behavior: 'smooth' });
      });
      
      tocItem.appendChild(tocLink);
      tocList.appendChild(tocItem);
    });

    // Sticky –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    let isSticky = false;
    const tocOffset = toc.offsetTop;

    window.addEventListener('scroll', () => {
      if (window.pageYOffset > tocOffset && !isSticky) {
        toc.classList.add('sticky');
        isSticky = true;
      } else if (window.pageYOffset <= tocOffset && isSticky) {
        toc.classList.remove('sticky');
        isSticky = false;
      }
    });
  }

  // TL;DR (–ö–†–ê–¢–ö–û–ï –°–û–î–ï–†–ñ–ê–ù–ò–ï)
  setupTLDR() {
    const tldr = document.querySelector('.tldr');
    if (!tldr) return;

    const content = tldr.querySelector('.tldr-content');
    const toggle = tldr.querySelector('.tldr-toggle');
    
    if (!content || !toggle) return;

    toggle.addEventListener('click', () => {
      const isExpanded = tldr.classList.contains('expanded');
      
      if (isExpanded) {
        tldr.classList.remove('expanded');
        toggle.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏';
      } else {
        tldr.classList.add('expanded');
        toggle.textContent = '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏';
      }
    });
  }

  // LAZY LOADING –î–õ–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
  setupLazyLoading() {
    const images = document.querySelectorAll('img[data-src]');
    
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target;
          img.src = img.dataset.src;
          img.classList.remove('lazy');
          img.classList.add('loaded');
          observer.unobserve(img);
        }
      });
    });

    images.forEach(img => {
      img.classList.add('lazy');
      imageObserver.observe(img);
    });
  }

  // –ê–ù–ò–ú–ê–¶–ò–ò –ü–†–ò –°–ö–†–û–õ–õ–ï
  setupScrollAnimations() {
    const elements = document.querySelectorAll('.animate-on-scroll');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
        }
      });
    }, {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    });

    elements.forEach(el => {
      observer.observe(el);
    });
  }

  // –°–û–ó–î–ê–ù–ò–ï –ê–ö–ö–û–†–î–ï–û–ù–ê
  createAccordion(title, content, isOpen = false) {
    const accordion = document.createElement('div');
    accordion.className = `accordion ${isOpen ? 'open' : ''}`;
    
    accordion.innerHTML = `
      <div class="accordion-trigger">
        <span class="accordion-title">${title}</span>
        <span class="accordion-icon">${isOpen ? '‚àí' : '+'}</span>
      </div>
      <div class="accordion-content" style="max-height: ${isOpen ? 'none' : '0px'}">
        <div class="accordion-body">
          ${content}
        </div>
      </div>
    `;
    
    return accordion;
  }

  // –°–û–ó–î–ê–ù–ò–ï TL;DR
  createTLDR(summary, details) {
    const tldr = document.createElement('div');
    tldr.className = 'tldr';
    
    tldr.innerHTML = `
      <div class="tldr-header">
        <h3>üìã –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</h3>
        <button class="tldr-toggle">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏</button>
      </div>
      <div class="tldr-content">
        <div class="tldr-summary">
          ${summary}
        </div>
        <div class="tldr-details">
          ${details}
        </div>
      </div>
    `;
    
    return tldr;
  }

  // –°–û–ó–î–ê–ù–ò–ï STICKY TOC
  createStickyTOC() {
    const toc = document.createElement('div');
    toc.className = 'sticky-toc';
    
    toc.innerHTML = `
      <div class="toc-header">
        <h3>üìë –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</h3>
      </div>
      <ul class="toc-list"></ul>
    `;
    
    return toc;
  }

  // –ö–ê–†–¢–û–ß–ö–ò –ü–†–ï–ò–ú–£–©–ï–°–¢–í
  createBenefitCard(icon, title, description) {
    const card = document.createElement('div');
    card.className = 'benefit-card animate-on-scroll';
    
    card.innerHTML = `
      <div class="benefit-icon">${icon}</div>
      <h4 class="benefit-title">${title}</h4>
      <p class="benefit-description">${description}</p>
    `;
    
    return card;
  }

  // –ú–ò–ù–ò-–ö–ï–ô–°
  createMiniCase(title, stats, description) {
    const caseCard = document.createElement('div');
    caseCard.className = 'mini-case animate-on-scroll';
    
    caseCard.innerHTML = `
      <div class="case-header">
        <h4>${title}</h4>
      </div>
      <div class="case-stats">
        ${stats.map(stat => `<div class="case-stat"><span class="stat-value">${stat.value}</span><span class="stat-label">${stat.label}</span></div>`).join('')}
      </div>
      <p class="case-description">${description}</p>
    `;
    
    return caseCard;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
  window.uxImprovements = new UXImprovements();
});

// =======================================================
// üöõ MAIN.JS - –û–°–ù–û–í–ù–û–ô –°–ö–†–ò–ü–¢ –ê–í–¢–û–ì–û–°–¢
// =======================================================

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
let smartCalculatorV2;

// ===============================================
// –í–û–†–û–ù–ö–ê –ü–†–û–î–ê–ñ - –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê –ò –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–°–¢–¨
// ===============================================

// –ê–Ω–∏–º–∞—Ü–∏—è –∂–∏–≤–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
function animateActiveUsers() {
    const counter = document.getElementById('activeUsers');
    if (!counter) return;
    
    const minUsers = 3;
    const maxUsers = 12;
    
    setInterval(() => {
        const currentValue = parseInt(counter.textContent);
        const change = Math.random() > 0.7 ? (Math.random() > 0.5 ? 1 : -1) : 0;
        let newValue = currentValue + change;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        newValue = Math.max(minUsers, Math.min(maxUsers, newValue));
        
        if (newValue !== currentValue) {
            counter.style.transform = 'scale(1.1)';
            setTimeout(() => {
                counter.textContent = newValue;
                counter.style.transform = 'scale(1)';
            }, 150);
        }
    }, Math.random() * 10000 + 5000); // 5-15 —Å–µ–∫—É–Ω–¥
}

// –°—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑
function openUrgentModal() {
    const modal = createModal('urgent', {
        title: '‚ö° –°—Ä–æ—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ 2 —á–∞—Å–∞',
        subtitle: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–∏–Ω—É—Ç',
        fields: [
            { name: 'urgentName', type: 'text', placeholder: '–í–∞—à–µ –∏–º—è', required: true },
            { name: 'urgentPhone', type: 'tel', placeholder: '+7 (999) 123-45-67', required: true },
            { name: 'urgentFrom', type: 'text', placeholder: '–û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å –≥—Ä—É–∑', required: true },
            { name: 'urgentTo', type: 'text', placeholder: '–ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å', required: true },
            { name: 'urgentCargo', type: 'text', placeholder: '–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞', required: true }
        ],
        buttonText: '–ó–∞–∫–∞–∑–∞—Ç—å —Å—Ä–æ—á–Ω–æ',
        source: 'urgent-delivery'
    });
}

// –ê—É–¥–∏—Ç —ç–∫–æ–Ω–æ–º–∏–∏
function openSavingsModal() {
    const modal = createModal('savings', {
        title: 'üí∞ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞—É–¥–∏—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤',
        subtitle: '–£–∑–Ω–∞–π—Ç–µ, —Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –∑–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É',
        fields: [
            { name: 'savingsName', type: 'text', placeholder: '–í–∞—à–µ –∏–º—è', required: true },
            { name: 'savingsPhone', type: 'tel', placeholder: '+7 (999) 123-45-67', required: true },
            { name: 'savingsCompany', type: 'text', placeholder: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏', required: true },
            { name: 'savingsMonthlySpend', type: 'number', placeholder: '–¢—Ä–∞—Ç–∏—Ç–µ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É –≤ –º–µ—Å—è—Ü (‚ÇΩ)', required: true },
            { name: 'savingsRoutes', type: 'text', placeholder: '–û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã', required: false }
        ],
        buttonText: '–ü–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏—Ç',
        source: 'savings-audit',
        extraInfo: '–ê—É–¥–∏—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤'
    });
}

// –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
function openConsultationModal() {
    const modal = createModal('consultation', {
        title: 'ü§ù –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞',
        subtitle: '15 –º–∏–Ω—É—Ç —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –ø–æ –ª–æ–≥–∏—Å—Ç–∏–∫–µ',
        fields: [
            { name: 'consultName', type: 'text', placeholder: '–í–∞—à–µ –∏–º—è', required: true },
            { name: 'consultPhone', type: 'tel', placeholder: '+7 (999) 123-45-67', required: true },
            { name: 'consultEmail', type: 'email', placeholder: 'email@company.ru', required: false },
            { name: 'consultTopic', type: 'select', placeholder: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É', options: [
                '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤',
                '–í—ã–±–æ—Ä –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞', 
                '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏',
                '–°—Ä–æ—á–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏',
                '–î—Ä—É–≥–æ–µ'
            ], required: true },
            { name: 'consultTime', type: 'select', placeholder: '–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è', options: [
                '–°–µ–≥–æ–¥–Ω—è –¥–æ 18:00',
                '–ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º',
                '–ó–∞–≤—Ç—Ä–∞ –≤–µ—á–µ—Ä–æ–º',
                '–í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏'
            ], required: true }
        ],
        buttonText: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é',
        source: 'consultation',
        extraInfo: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ'
    });
}

// –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
function openComparisonModal() {
    const modal = createModal('comparison', {
        title: 'üìä –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ö–ü',
        subtitle: '–ü–æ–ª—É—á–∏—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞',
        fields: [
            { name: 'companyName', type: 'text', placeholder: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏', required: true },
            { name: 'contactName', type: 'text', placeholder: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ', required: true },
            { name: 'contactPhone', type: 'tel', placeholder: '+7 (999) 123-45-67', required: true },
            { name: 'contactEmail', type: 'email', placeholder: 'email@company.ru', required: true },
            { name: 'cargoTypes', type: 'text', placeholder: '–¢–∏–ø—ã –≥—Ä—É–∑–æ–≤', required: true },
            { name: 'monthlyVolume', type: 'text', placeholder: '–û–±—ä–µ–º –ø–µ—Ä–µ–≤–æ–∑–æ–∫ –≤ –º–µ—Å—è—Ü', required: true },
            { name: 'currentProvider', type: 'text', placeholder: '–¢–µ–∫—É—â–∏–π –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)', required: false }
        ],
        buttonText: '–ü–æ–ª—É—á–∏—Ç—å –ö–ü',
        source: 'commercial-offer',
        extraInfo: '–ö–ü –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤'
    });
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function createModal(type, config) {
    // –°–æ–∑–¥–∞–µ–º HTML –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const modalHTML = `
        <div class="modal-overlay" id="modal-${type}">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>${config.title}</h3>
                    <button class="modal-close" onclick="closeModal('${type}')">&times;</button>
                </div>
                <div class="modal-body">
                    <p class="modal-subtitle">${config.subtitle}</p>
                    <form class="modal-form" onsubmit="submitModal(event, '${type}', '${config.source}')">
                        ${config.fields.map(field => {
                            if (field.type === 'select') {
                                return `
                                    <div class="form-group">
                                        <select name="${field.name}" ${field.required ? 'required' : ''}>
                                            <option value="">${field.placeholder}</option>
                                            ${field.options.map(option => `<option value="${option}">${option}</option>`).join('')}
                                        </select>
                                    </div>
                                `;
                            } else {
                                return `
                                    <div class="form-group">
                                        <input type="${field.type}" name="${field.name}" placeholder="${field.placeholder}" ${field.required ? 'required' : ''}>
                                    </div>
                                `;
                            }
                        }).join('')}
                        ${config.extraInfo ? `<p class="modal-info">${config.extraInfo}</p>` : ''}
                        <button type="submit" class="btn btn-primary btn-lg">
                            ${config.buttonText}
                        </button>
                    </form>
                </div>
            </div>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.getElementById(`modal-${type}`);
    modal.style.display = 'flex';
    document.body.style.overflow = 'hidden';
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(type);
        }
    });
    
    return modal;
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal(type) {
    const modal = document.getElementById(`modal-${type}`);
    if (modal) {
        modal.remove();
        document.body.style.overflow = '';
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
async function submitModal(event, type, source) {
    event.preventDefault();
    
    const form = event.target;
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    const button = form.querySelector('button[type="submit"]');
    const originalText = button.textContent;
    button.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
    button.disabled = true;
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        const success = await sendToTelegram({
            ...data,
            source: source,
            timestamp: new Date().toLocaleString('ru-RU')
        });
        
        if (success) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
            form.innerHTML = `
                <div class="success-message">
                    <div class="success-icon">‚úÖ</div>
                    <h4>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</h4>
                    <p>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç</p>
                    <button class="btn btn-outline" onclick="closeModal('${type}')">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            `;
            
            // –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => closeModal(type), 5000);
            
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:', error);
        button.textContent = '–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑';
        button.disabled = false;
        
        setTimeout(() => {
            button.textContent = originalText;
        }, 2000);
    }
}

// CSS —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
const modalStyles = `
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10000;
        backdrop-filter: blur(4px);
    }
    
    .modal-content {
        background: white;
        border-radius: 16px;
        max-width: 500px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
    }
    
    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 2rem 2rem 0;
    }
    
    .modal-header h3 {
        margin: 0;
        font-size: 1.5rem;
        color: var(--neutral-900);
    }
    
    .modal-close {
        background: none;
        border: none;
        font-size: 2rem;
        cursor: pointer;
        color: var(--neutral-500);
        padding: 0;
        width: 2rem;
        height: 2rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .modal-body {
        padding: 2rem;
    }
    
    .modal-subtitle {
        color: var(--neutral-600);
        margin-bottom: 1.5rem;
    }
    
    .modal-form .form-group {
        margin-bottom: 1rem;
    }
    
    .modal-form input,
    .modal-form select {
        width: 100%;
        padding: 0.75rem;
        border: 2px solid var(--neutral-200);
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color var(--transition-fast);
    }
    
    .modal-form input:focus,
    .modal-form select:focus {
        outline: none;
        border-color: var(--primary-500);
    }
    
    .modal-info {
        font-size: 0.875rem;
        color: var(--neutral-600);
        background: var(--neutral-50);
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    
    .success-message {
        text-align: center;
        padding: 2rem;
    }
    
    .success-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
    }
    
    .success-message h4 {
        color: var(--success);
        margin-bottom: 1rem;
    }
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
if (!document.getElementById('modal-styles')) {
    const styleSheet = document.createElement('style');
    styleSheet.id = 'modal-styles';
    styleSheet.textContent = modalStyles;
    document.head.appendChild(styleSheet);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Main.js loaded');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    initCalculator();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
    initMobileMenu();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≤–∞—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫
    initFloatingButtons();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º
    initForms();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å—á–µ—Ç—á–∏–∫–∞
    animateActiveUsers();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Å–ª–æ—Ç–æ–≤ (—É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 10-20 –º–∏–Ω—É—Ç)
    const slotsCounter = document.querySelector('.slots-counter');
    if (slotsCounter) {
        setInterval(() => {
            const current = parseInt(slotsCounter.textContent);
            if (current > 1 && Math.random() > 0.8) {
                slotsCounter.textContent = current - 1;
                slotsCounter.style.animation = 'none';
                setTimeout(() => {
                    slotsCounter.style.animation = 'pulse-red 2s infinite';
                }, 100);
            }
        }, Math.random() * 600000 + 600000); // 10-20 –º–∏–Ω—É—Ç
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
function initCalculator() {
    try {
        if (typeof SmartCalculatorV2 !== 'undefined') {
            smartCalculatorV2 = new SmartCalculatorV2();
            window.smartCalculatorV2 = smartCalculatorV2; // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
            console.log('‚úÖ SmartCalculatorV2 initialized');
        } else {
            console.error('‚ùå SmartCalculatorV2 class not found');
            // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            setTimeout(initCalculator, 1000);
        }
    } catch (error) {
        console.error('‚ùå Calculator initialization error:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º
function initForms() {
    // –§–æ—Ä–º–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    const calcForm = document.getElementById('calculatorForm');
    if (calcForm) {
        calcForm.addEventListener('submit', function(e) {
            e.preventDefault();
            console.log('üìù Form submitted');
            handleCalculation();
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –ø–æ ID
    const calcButton = document.getElementById('calculateButton');
    if (calcButton) {
        calcButton.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('üîò Calculate button clicked');
            handleCalculation();
        });
        console.log('‚úÖ Calculate button listener added');
    } else {
        console.error('‚ùå Calculate button not found');
    }
    
    // –†–µ–∑–µ—Ä–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö onclick
    const oldButton = document.querySelector('button[onclick*="handleCalculation"]');
    if (oldButton) {
        oldButton.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('üîò Old button clicked');
            handleCalculation();
        });
    }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞
function handleCalculation() {
    console.log('üßÆ Starting calculation...');
    
    if (smartCalculatorV2 && typeof smartCalculatorV2.handleCalculation === 'function') {
        try {
            smartCalculatorV2.handleCalculation();
            console.log('‚úÖ Calculator method called');
        } catch (error) {
            console.error('‚ùå Calculator error:', error);
            alert('–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞: ' + error.message);
        }
    } else {
        console.error('‚ùå Calculator not ready');
        alert('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É');
        
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        setTimeout(() => {
            initCalculator();
            setTimeout(handleCalculation, 500);
        }, 1000);
    }
}

// –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
function initMobileMenu() {
    const mobileMenuToggle = document.getElementById('mobileMenuToggle');
    const mobileNav = document.getElementById('mobileNav');
    
    if (mobileMenuToggle && mobileNav) {
        mobileMenuToggle.addEventListener('click', function() {
            mobileNav.classList.toggle('active');
            mobileMenuToggle.classList.toggle('active');
        });
    }
}

// –ü–ª–∞–≤–∞—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
function initFloatingButtons() {
    // –ö–Ω–æ–ø–∫–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ HTML
}

// –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —è–∫–æ—Ä—è–º
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
window.smartCalculatorV2 = smartCalculatorV2;
window.handleCalculation = handleCalculation;
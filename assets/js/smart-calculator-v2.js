// ========================================================
// üöõ –£–ú–ù–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ê–í–¢–û–ì–û–°–¢ V2.0 - –õ–û–ì–ò–ö–ê –ò–õ–Æ–®–ò
// –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ CALCULATOR-LOGIC.md
// ========================================================

class SmartCalculatorV2 {
  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
    this.distanceAPI = new DistanceAPI();
    
    // –¢–ò–ü–´ –¢–†–ê–ù–°–ü–û–†–¢–ê —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ—Ç –ò–ª—é—à–∏
    this.transportTypes = {
      gazelle: {
        name: '–ì–∞–∑–µ–ª—å',
        maxWeight: 1500,    // –∫–≥ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!)
        maxVolume: 16,      // –º¬≥
        density: 94,        // –∫–≥/–º¬≥ (1500/16)
        minPrice: 10000,    // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ú–æ—Å–∫–≤–∞
        minPriceRegion: 7500, // –º–∏–Ω–∏–º–∞–ª–∫–∞ –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö
        coefficient: 1.0,   // –ì–ê–ó–ï–õ–¨ –±–∞–∑–æ–≤–∞—è (–±—ã–ª–æ 0.8)
        allowConsolidated: true,
        icon: 'üöê'
      },
      threeTon: {
        name: '3-—Ç–æ–Ω–Ω–∏–∫',
        maxWeight: 3000,
        maxVolume: 18,
        density: 167,
        minPrice: 13000,
        minPriceRegion: 9750,
        coefficient: 1.0,   // –¢–†–ï–®–ö–ê 25–∫ (–±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ 25‚ÇΩ/–∫–º)
        allowConsolidated: true,
        icon: 'üöõ'
      },
      fiveTon: {
        name: '5-—Ç–æ–Ω–Ω–∏–∫',
        maxWeight: 5000,
        maxVolume: 36,
        density: 139,
        minPrice: 20000,
        minPriceRegion: 15000,
        coefficient: 1.05,  // –ü–Ø–¢–ê–ö ~50–∫ (–±—ã–ª–æ 1.88)
        allowConsolidated: true,
        icon: 'üöõ'
      },
      tenTon: {
        name: '10-—Ç–æ–Ω–Ω–∏–∫',
        maxWeight: 10000,
        maxVolume: 50,
        density: 200,
        minPrice: 24000,
        minPriceRegion: 18000,
        coefficient: 1.08,  // –î–ï–°–Ø–¢–ö–ê ~63–∫ (–±—ã–ª–æ 1.84)
        allowConsolidated: true,
        icon: 'üöö'
      },
      truck: {
        name: '–§—É—Ä–∞ 20—Ç',
        maxWeight: 20000,
        maxVolume: 82,     // –º¬≥ (–º–∏–Ω–∏–º—É–º –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 82-92)
        density: 244,       // –∫–≥/–º¬≥ (20000/82)
        minPrice: 28000,
        minPriceRegion: 21000,
        coefficient: 0.95,  // –§–£–†–ê —ç–∫–æ–Ω–æ–º–∏—è –º–∞—Å—à—Ç–∞–±–∞ ~70–∫ (–±—ã–ª–æ 1.68)
        allowConsolidated: false, // –§–£–†–ê –ù–ï –°–ë–û–†–ù–´–ô!
        icon: 'üöö'
      }
    };

    // –†–ï–ê–õ–¨–ù–´–ï –ü–†–ò–ú–ï–†–´ –¶–ï–ù –æ—Ç –ò–ª—é—à–∏
    this.realPrices = {
      '–ì–æ–ª–∏—Ü—ã–Ω–æ-–ü–æ–≤–∞—Ä–æ–≤–æ': { distance: 40, price: 28000, pricePerKm: 700 },
      '–ì–æ–ª–∏—Ü—ã–Ω–æ-–í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫': { distance: 100, price: 28000, pricePerKm: 280 },
      '–ì–æ–ª–∏—Ü—ã–Ω–æ-–¢–≤–µ—Ä—å': { distance: 170, price: 35000, pricePerKm: 206 },
      '–ì–æ–ª–∏—Ü—ã–Ω–æ-–†—è–∑–∞–Ω—å': { distance: 180, price: 35000, pricePerKm: 194 },
      '–ì–æ–ª–∏—Ü—ã–Ω–æ-–ö–æ—Å—Ç—Ä–æ–º–∞': { distance: 340, price: 50000, pricePerKm: 147 },
      '–û–¥–∏–Ω—Ü–æ–≤–æ-–°–ü–±': { distance: 700, price: 70000, pricePerKm: 100 },
      '–°–ü–±-–û–¥–∏–Ω—Ü–æ–≤–æ': { distance: 700, price: 65000, pricePerKm: 93 }  // –æ–±—Ä–∞—Ç–∫–∞ –¥–µ—à–µ–≤–ª–µ!
    };

    // –í–ê–ñ–ù–û–ï –ü–†–ê–í–ò–õ–û: –í–ù–£–¢–†–ò –†–ï–ì–ò–û–ù–ê –°–ë–û–†–ù–´–• –ù–ï–¢!
    this.regions = {
      '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': [
        '–ú–æ—Å–∫–≤–∞', '–ü–æ–¥–æ–ª—å—Å–∫', '–•–∏–º–∫–∏', '–ë–∞–ª–∞—à–∏—Ö–∞', '–ú—ã—Ç–∏—â–∏', '–ö–æ—Ä–æ–ª—ë–≤',
        '–õ—é–±–µ—Ä—Ü—ã', '–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫', '–û–¥–∏–Ω—Ü–æ–≤–æ', '–ì–æ–ª–∏—Ü—ã–Ω–æ', '–ü–æ–≤–∞—Ä–æ–≤–æ',
        '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫', '–ö–æ–ª–æ–º–Ω–∞', '–°–µ—Ä–ø—É—Ö–æ–≤', '–©—ë–ª–∫–æ–≤–æ', '–î–æ–º–æ–¥–µ–¥–æ–≤–æ'
      ],
      '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –∏ –æ–±–ª–∞—Å—Ç—å': [
        '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ì–∞—Ç—á–∏–Ω–∞', '–í—ã–±–æ—Ä–≥', '–í—Å–µ–≤–æ–ª–æ–∂—Å–∫', '–ö–æ–ª–ø–∏–Ω–æ',
        '–ü—É—à–∫–∏–Ω', '–ü–µ—Ç–µ—Ä–≥–æ—Ñ', '–ö—Ä–æ–Ω—à—Ç–∞–¥—Ç'
      ],
      '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': [
        '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–î–∑–µ—Ä–∂–∏–Ω—Å–∫', '–ê—Ä–∑–∞–º–∞—Å', '–°–∞—Ä–æ–≤', '–ë–æ—Ä'
      ]
    };

    this.init();
  }

  // –ì–õ–ê–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –†–ê–°–ß–ï–¢–ê
  async calculatePrice(fromCity, toCity, weight, volume, cargoType = 'general') {
    console.log(`üîç –ù–ê–ß–ò–ù–ê–ï–ú –†–ê–°–ß–ï–¢: ${fromCity} ‚Üí ${toCity}, –≤–µ—Å: ${weight}–∫–≥, –æ–±—ä–µ–º: ${volume}–º¬≥, —Ç–∏–ø: ${cargoType}`);
    
    // –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º –∫–µ—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ä–∞—Å—á–µ—Ç–æ–º
    // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç "–∑–∞–ª–∏–ø–∞–Ω–∏–µ" —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log(`üßπ –û–ß–ò–©–ê–ï–ú –ö–ï–® –ø–µ—Ä–µ–¥ —Ä–∞—Å—á–µ—Ç–æ–º`);
    
    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–Ω—É—Ç—Ä–∏—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–≤–æ–∑–∫—É
      if (this.isSameRegion(fromCity, toCity)) {
        console.log(`‚ö†Ô∏è –í–ù–£–¢–†–ò–†–ï–ì–ò–û–ù–ê–õ–¨–ù–ê–Ø –ü–ï–†–ï–í–û–ó–ö–ê: ${fromCity} ‚Üí ${toCity}`);
        return {
          error: true,
          message: '–í–ù–ò–ú–ê–ù–ò–ï! –°–±–æ—Ä–Ω—ã–µ –≥—Ä—É–∑—ã —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏. –í–Ω—É—Ç—Ä–∏ —Ä–µ–≥–∏–æ–Ω–∞ - —Ç–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞!',
          alternativePrice: await this.calculateFullTruckPrice(fromCity, toCity)
        };
      }

      // 2. –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–û–ï —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ API  
      console.log(`üó∫Ô∏è –ó–ê–ü–†–ê–®–ò–í–ê–ï–ú –†–ê–°–°–¢–û–Ø–ù–ò–ï: ${fromCity} ‚Üí ${toCity}`);
      const distance = await this.distanceAPI.getDistance(fromCity, toCity);
      console.log(`üìè –ü–û–õ–£–ß–ò–õ–ò –†–ê–°–°–¢–û–Ø–ù–ò–ï: ${distance}–∫–º –¥–ª—è ${fromCity} ‚Üí ${toCity}`);
      
      // 3. –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –†–ê–ó–î–ï–õ–ï–ù–ò–Ø
      if (distance < 200) {
        // –õ–û–ö–ê–õ–¨–ù–´–ï –ò –ü–ï–†–ï–•–û–î–ù–ê–Ø –ó–û–ù–ê (–¥–æ 200–∫–º)
        console.log(`üè† –õ–û–ö–ê–õ–¨–ù–ê–Ø –ó–û–ù–ê: ${distance}–∫–º < 200–∫–º`);
        return this.calculateLocalPrice(fromCity, toCity, weight, volume, distance, cargoType);
      } else {
        // –ú–ï–ñ–†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ï –ü–ï–†–ï–í–û–ó–ö–ò (200–∫–º+)
        console.log(`üöõ –ú–ï–ñ–†–ï–ì–ò–û–ù–ê–õ–¨–ù–ê–Ø: ${distance}–∫–º >= 200–∫–º`);
        return this.calculateInterregionalPrice(fromCity, toCity, weight, volume, distance, cargoType);
      }
    } catch (error) {
      console.error('‚ùå Error in calculatePrice:', error);
      throw error;
    }
  }

  // –õ–û–ö–ê–õ–¨–ù–´–ï –ü–ï–†–ï–í–û–ó–ö–ò - –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –∫ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–º
  calculateLocalPrice(fromCity, toCity, weight, volume, distance, cargoType) {
    // –ü–æ–¥–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    const optimalTransport = this.selectOptimalTransport(weight, volume);
    const transport = this.transportTypes[optimalTransport];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±–æ—Ä–Ω—ã–π –≥—Ä—É–∑ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    const isConsolidated = (cargoType === '—Å–±–æ—Ä–Ω—ã–π' || cargoType === 'consolidated') && transport.allowConsolidated;

    let basePrice;
    let priceCategory = '';
    
    if (distance <= 70) {
      // –ì–û–†–û–î–°–ö–ê–Ø –ë–ê–ó–ê - –º–∏–Ω–∏–º–∞–ª–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
      basePrice = transport.minPrice;
      priceCategory = '–ì–æ—Ä–æ–¥—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ (–¥–æ 70–∫–º)';
    } else {
      // –ü–ï–†–ï–•–û–î–ù–ê–Ø –ó–û–ù–ê - –±–∞–∑–∞ + –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –¥–æ–ø–ª–∞—Ç–∞ –∑–∞ –∫–º –ø–æ —Ç–∏–ø—É –¢–°
      const excessKm = distance - 70; // –∫–º —Å–≤—ã—à–µ 70
      
      // –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï –¢–ê–†–ò–§–´ –ü–û –¢–ò–ü–ê–ú –¢–° (—á–µ–º –±–æ–ª—å—à–µ –º–∞—à–∏–Ω–∞, —Ç–µ–º –¥–æ—Ä–æ–∂–µ –∫–º)
      const kmRates = {
        gazelle: 20,   // 20‚ÇΩ/–∫–º –¥–ª—è –≥–∞–∑–µ–ª–∏
        threeTon: 25,  // 25‚ÇΩ/–∫–º –¥–ª—è 3-—Ç–æ–Ω–Ω–∏–∫–∞
        fiveTon: 35,   // 35‚ÇΩ/–∫–º –¥–ª—è 5-—Ç–æ–Ω–Ω–∏–∫–∞  
        tenTon: 45,    // 45‚ÇΩ/–∫–º –¥–ª—è 10-—Ç–æ–Ω–Ω–∏–∫–∞
        truck: 60      // 60‚ÇΩ/–∫–º –¥–ª—è —Ñ—É—Ä—ã
      };
      
      const kmRate = kmRates[optimalTransport] || 25; // fallback
      const extraCost = excessKm * kmRate;
      
      basePrice = transport.minPrice + extraCost;
      priceCategory = `–ü–µ—Ä–µ—Ö–æ–¥–Ω–∞—è –∑–æ–Ω–∞ (${distance}–∫–º, +${excessKm}–∫–º √ó ${kmRate}‚ÇΩ)`;
    }
    
    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ (—á–µ–º –º–µ–Ω—å—à–µ –≥—Ä—É–∑, —Ç–µ–º –¥–æ—Ä–æ–∂–µ)
    const loadFactor = this.calculateLoadFactor(weight, volume, transport);
    
    // –î–õ–Ø –õ–û–ö–ê–õ–¨–ù–´–• - –ù–ï–¢ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Ç–∏–ø–∞ –¢–° (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã)
    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
    const finalPrice = Math.round(basePrice * loadFactor);

    return {
      price: finalPrice,
      transport: transport.name,
      distance: distance,
      deliveryType: priceCategory,
      pricePerKm: Math.round(finalPrice / distance),
      deliveryTime: distance <= 100 ? '1 –¥–µ–Ω—å' : '1-2 –¥–Ω—è',
      details: {
        basePrice: transport.minPrice,
        distanceCoeff: loadFactor, // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏
        loadFactor: loadFactor,
        transportCoeff: 1.0, // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫ –≤—Å–µ–≥–¥–∞ 1.0
        weight: weight,
        volume: volume,
        loadPercent: Math.round((weight / transport.maxWeight) * 100),
        volumePercent: volume ? Math.round((volume / transport.maxVolume) * 100) : 0,
        density: volume ? Math.round(weight / volume) : 0,
        isLocal: true,
        noConsolidated: true // –°–±–æ—Ä–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
      }
    };
  }

  // –ú–ï–ñ–†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ï –ü–ï–†–ï–í–û–ó–ö–ò - –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
  calculateInterregionalPrice(fromCity, toCity, weight, volume, distance, cargoType) {
    // –ù–û–í–ê–Ø –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –ë–∞–∑–∞ = —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ √ó —Ç–∞—Ä–∏—Ñ, –ù–û –Ω–µ –º–µ–Ω–µ–µ –º–∏–Ω–∏–º–∞–ª–∫–∏ –¢–°
    let pricePerKm;
    let distanceCategory;
    
    if (distance < 200) {
      // –ë–õ–ò–ñ–ù–ò–ô –ü–û–î–ú–û–°–ö–û–í–ù–´–ô - —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π —Ç–∞—Ä–∏—Ñ
      pricePerKm = 35;
      distanceCategory = '–ë–ª–∏–∂–Ω–∏–π (–¥–æ 200–∫–º)';
    } else if (distance < 300) {
      // –ë–õ–ò–ó–ö–ò–ô –†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ô - –≤—ã—Å–æ–∫–∏–π —Ç–∞—Ä–∏—Ñ (–Ø—Ä–æ—Å–ª–∞–≤–ª—å, –¢—É–ª–∞)
      pricePerKm = 28;
      distanceCategory = '–ë–ª–∏–∑–∫–∏–π (200-300–∫–º)';
    } else if (distance < 500) {
      // –°–†–ï–î–ù–ò–ô –†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ô - —Å—Ä–µ–¥–Ω–∏–π —Ç–∞—Ä–∏—Ñ (–í–æ—Ä–æ–Ω–µ–∂, –ù–∏–∂–Ω–∏–π)
      pricePerKm = 22;
      distanceCategory = '–°—Ä–µ–¥–Ω–∏–π (300-500–∫–º)';
    } else if (distance < 800) {
      // –î–ê–õ–¨–ù–ò–ô –ú–ï–ñ–†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ô - —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π (–°–∞—Ä–∞–Ω—Å–∫, –ö–∞–∑–∞–Ω—å)
      pricePerKm = 18;
      distanceCategory = '–î–∞–ª—å–Ω–∏–π (500-800–∫–º)';
    } else {
      // –î–ê–õ–¨–ù–û–ë–û–ô–ù–´–ô - —Å–∞–º—ã–π —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π (–°–ü–±, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥)
      pricePerKm = 15;
      distanceCategory = '–î–∞–ª—å–Ω–æ–±–æ–π–Ω—ã–π (800–∫–º+)';
    }

    // –ü–æ–¥–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    const optimalTransport = this.selectOptimalTransport(weight, volume);
    const transport = this.transportTypes[optimalTransport];

    // –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ë–∞–∑–∞ = —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ √ó —Ç–∞—Ä–∏—Ñ + –¥–æ–ø–ª–∞—Ç–∞ –∑–∞ —Ç–∏–ø –¢–°
    let basePrice = distance * pricePerKm;

    // –ñ–ï–°–¢–ö–ò–ï –ú–ò–ù–ò–ú–ê–õ–ö–ò –ü–û –¢–ò–ü–ê–ú –¢–° —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–ª–µ—á (–¥–æ 200–∫–º)
    const transportMinPrices = {
      gazelle: distance < 200 ? 20000 : transport.minPriceRegion,
      threeTon: distance < 200 ? 25000 : transport.minPriceRegion,
      fiveTon: distance < 200 ? 30000 : transport.minPriceRegion,
      tenTon: distance < 200 ? 37000 : transport.minPriceRegion,
      truck: distance < 200 ? 42000 : transport.minPriceRegion
    };

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    const minPrice = transportMinPrices[optimalTransport];
    basePrice = Math.max(basePrice, minPrice);

    // –î–û–ë–ê–í–õ–Ø–ï–ú ‚ÇΩ/–ö–ú –î–û–ü–õ–ê–¢–´ –ü–û –¢–ò–ü–£ –¢–° –ö –ú–ï–ñ–†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ú
    const interregionalKmRates = {
      gazelle: 30,   // 30‚ÇΩ/–∫–º –¥–ª—è –≥–∞–∑–µ–ª–∏
      threeTon: 40,  // 40‚ÇΩ/–∫–º –¥–ª—è 3-—Ç–æ–Ω–Ω–∏–∫–∞
      fiveTon: 50,   // 50‚ÇΩ/–∫–º –¥–ª—è 5-—Ç–æ–Ω–Ω–∏–∫–∞  
      tenTon: 62,    // 62‚ÇΩ/–∫–º –¥–ª—è 10-—Ç–æ–Ω–Ω–∏–∫–∞
      truck: 70      // 70‚ÇΩ/–∫–º –¥–ª—è —Ñ—É—Ä—ã
    };
    
    const kmRate = interregionalKmRates[optimalTransport] || 15;
    const kmSurcharge = distance * kmRate;
    basePrice += kmSurcharge;

    // –°–ë–û–†–ù–´–ï –ì–†–£–ó–´ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–∂—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏ –ù–ï –¥–ª—è —Ñ—É—Ä!)
    const isConsolidated = (cargoType === '—Å–±–æ—Ä–Ω—ã–π' || cargoType === 'consolidated') && transport.allowConsolidated;
    if (isConsolidated) {
      basePrice = basePrice * 0.65; // –°–±–æ—Ä–Ω—ã–π –≥—Ä—É–∑ –¥–µ—à–µ–≤–ª–µ –Ω–∞ 35%!
    }

    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ –º–∞—Ä—à—Ä—É—Ç–∞
    const loadFactor = this.calculateLoadFactor(weight, volume, transport);
    const routeFactor = this.calculateRouteFactor(fromCity, toCity);
    const cargoFactor = this.getCargoFactor(cargoType);

    // –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢ –ó–û–ù–´ –î–û–°–¢–ê–í–ö–ò (–≤–º–µ—Å—Ç–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –¢–°)
    let zoneCoeff;
    if (distance < 70) {
      zoneCoeff = 1.6;  // –ì–æ—Ä–æ–¥—Å–∫–∏–µ - —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –∫–æ—ç—Ñ—Ñ
    } else if (distance < 200) {
      zoneCoeff = 1.4;  // –û–±–ª–∞—Å—Ç–Ω—ã–µ - –≤—ã—Å–æ–∫–∏–π –∫–æ—ç—Ñ—Ñ
    } else if (distance < 400) {
      zoneCoeff = 1.2;  // –ú–µ–∂—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ - –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π –∫–æ—ç—Ñ—Ñ
    } else if (distance < 800) {
      zoneCoeff = 1.0;  // –°—Ä–µ–¥–Ω–µ–µ –ø–ª–µ—á–æ - –±–µ–∑ –Ω–∞–¥–±–∞–≤–∫–∏
    } else {
      zoneCoeff = 0.95;  // –î–ª–∏–Ω–Ω–æ–µ –ø–ª–µ—á–æ - –Ω–µ–±–æ–ª—å—à–∞—è —Å–∫–∏–¥–∫–∞
    }
    
    const transportCoeff = zoneCoeff; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
    const finalPrice = Math.round(basePrice * loadFactor * routeFactor * cargoFactor * transportCoeff);

    return {
      price: finalPrice,
      transport: transport.name,
      distance: distance,
      deliveryType: distanceCategory,
      pricePerKm: Math.round(finalPrice / distance),
      deliveryTime: this.calculateDeliveryTime(distance, isConsolidated),
      details: {
        basePrice: basePrice,
        minPrice: minPrice,
        pricePerKm: pricePerKm,
        distanceCoeff: loadFactor, // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–∫ distanceCoeff
        loadFactor: loadFactor,
        routeFactor: routeFactor,
        cargoFactor: cargoFactor,
        transportCoeff: transportCoeff,
        weight: weight,
        volume: volume,
        loadPercent: Math.round((weight / transport.maxWeight) * 100),
        volumePercent: volume ? Math.round((volume / transport.maxVolume) * 100) : 0,
        density: volume ? Math.round(weight / volume) : 0,
        isLocal: false,
        isConsolidated: isConsolidated
      }
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–¥–∏–Ω —Ä–µ–≥–∏–æ–Ω
  isSameRegion(city1, city2) {
    for (const [region, cities] of Object.entries(this.regions)) {
      const hasBoth = cities.includes(city1) && cities.includes(city2);
      if (hasBoth) return true;
    }
    return false;
  }

  // –ü–æ–¥–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø–æ –≤–µ—Å—É –∏ –æ–±—ä–µ–º—É
  selectOptimalTransport(weight, volume) {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ø–æ –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç–∏ (–æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É)
    const sortedTransports = Object.entries(this.transportTypes)
      .sort((a, b) => a[1].maxWeight - b[1].maxWeight);

    for (const [key, transport] of sortedTransports) {
      if (weight <= transport.maxWeight) {
        if (volume && volume > 0) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–º, –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞
          if (volume <= transport.maxVolume) {
            return key; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
          }
        } else {
          // –ï—Å–ª–∏ –æ–±—ä–µ–º –Ω–µ —É–∫–∞–∑–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º –ø–æ –≤–µ—Å—É
          return key;
        }
      }
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É—Ä—É
    return 'truck';
  }

  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏
  calculateLoadFactor(weight, volume, transport) {
    const weightUsage = weight / transport.maxWeight;
    
    // –ï—Å–ª–∏ –æ–±—ä–µ–º —É–∫–∞–∑–∞–Ω, —É—á–∏—Ç—ã–≤–∞–µ–º –µ–≥–æ
    if (volume && volume > 0) {
      const volumeUsage = volume / transport.maxVolume;
      
      // –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –±–µ—Ä–µ–º —Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –ë–û–õ–¨–®–ï –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞—à–∏–Ω—É
      // –≠—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ª–∏–º–∏—Ç–∏—Ä—É–µ—Ç (–≤–µ—Å –∏–ª–∏ –æ–±—ä–µ–º)
      const limitingUsage = Math.max(weightUsage, volumeUsage);
      
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–≥—Ä—É–∑ –ø–æ –ª—é–±–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É - –¥–æ–ø–ª–∞—Ç–∞
      if (limitingUsage > 1.0) {
        return 1.0 + (limitingUsage - 1.0) * 0.3; // –¥–æ–ø–ª–∞—Ç–∞ –∑–∞ –ø–µ—Ä–µ–≥—Ä—É–∑
      }
      
      // –ß–µ–º –í–´–®–ï –∑–∞–≥—Ä—É–∑–∫–∞, —Ç–µ–º –î–ï–®–ï–í–õ–ï (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ)
      if (limitingUsage > 0.8) return 1.0;   // 80%+ - –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
      if (limitingUsage > 0.6) return 1.1;   // 60-80% - –Ω–µ–±–æ–ª—å—à–∞—è –¥–æ–ø–ª–∞—Ç–∞
      if (limitingUsage > 0.4) return 1.25;  // 40-60% - —Å—Ä–µ–¥–Ω—è—è –¥–æ–ø–ª–∞—Ç–∞
      if (limitingUsage > 0.2) return 1.4;   // 20-40% - –±–æ–ª—å—à–∞—è –¥–æ–ø–ª–∞—Ç–∞
      return 1.6;  // –º–µ–Ω–µ–µ 20% - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ø–ª–∞—Ç–∞
    } else {
      // –ï—Å–ª–∏ –æ–±—ä–µ–º –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –≤–µ—Å—É
      if (weightUsage > 1.0) return 1.0 + (weightUsage - 1.0) * 0.3; // –ø–µ—Ä–µ–≥—Ä—É–∑
      if (weightUsage > 0.8) return 1.0;   // 80%+ - –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
      if (weightUsage > 0.6) return 1.1;   // 60-80%
      if (weightUsage > 0.4) return 1.2;   // 40-60%
      if (weightUsage > 0.2) return 1.35;  // 20-40%
      return 1.5;  // –º–µ–Ω–µ–µ 20% - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ø–ª–∞—Ç–∞
    }
  }

  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞
  calculateRouteFactor(from, to) {
    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const popularRoutes = [
      ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'],
      ['–ú–æ—Å–∫–≤–∞', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥'],
      ['–ú–æ—Å–∫–≤–∞', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'],
      ['–ú–æ—Å–∫–≤–∞', '–ö–∞–∑–∞–Ω—å']
    ];

    for (const route of popularRoutes) {
      if ((route.includes(from) && route.includes(to))) {
        return 0.9;  // —Å–∫–∏–¥–∫–∞ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
      }
    }

    // –û–±—Ä–∞—Ç–∫–∞ –¥–µ—à–µ–≤–ª–µ
    if (to === '–ú–æ—Å–∫–≤–∞' || to === '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥') {
      return 0.95;
    }

    return 1.0;
  }

  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–∏–ø–∞ –≥—Ä—É–∑–∞
  getCargoFactor(cargoType) {
    const factors = {
      'general': 1.0,      // –æ–±—ã—á–Ω—ã–π
      'fragile': 1.3,      // —Ö—Ä—É–ø–∫–∏–π
      'valuable': 1.5,     // —Ü–µ–Ω–Ω—ã–π
      'dangerous': 1.8,    // –æ–ø–∞—Å–Ω—ã–π
      'perishable': 1.4,   // —Å–∫–æ—Ä–æ–ø–æ—Ä—Ç—è—â–∏–π—Å—è
      'oversized': 1.6     // –Ω–µ–≥–∞–±–∞—Ä–∏—Ç
    };
    return factors[cargoType] || 1.0;
  }

  // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
  calculateDeliveryTime(distance, isConsolidated = false) {
    let baseTime;
    if (distance < 500) baseTime = '1-2 –¥–Ω—è';
    else if (distance < 1000) baseTime = '2-3 –¥–Ω—è';
    else if (distance < 2000) baseTime = '3-4 –¥–Ω—è';
    else if (distance < 3000) baseTime = '4-5 –¥–Ω–µ–π';
    else baseTime = '5-7 –¥–Ω–µ–π';
    
    // –°–±–æ—Ä–Ω—ã–π –≥—Ä—É–∑ +30% –∫ –≤—Ä–µ–º–µ–Ω–∏
    if (isConsolidated) {
      const timeMap = {
        '1-2 –¥–Ω—è': '2-3 –¥–Ω—è',
        '2-3 –¥–Ω—è': '3-4 –¥–Ω—è', 
        '3-4 –¥–Ω—è': '4-5 –¥–Ω–µ–π',
        '4-5 –¥–Ω–µ–π': '5-7 –¥–Ω–µ–π',
        '5-7 –¥–Ω–µ–π': '7-9 –¥–Ω–µ–π'
      };
      return timeMap[baseTime] || baseTime;
    }
    
    return baseTime;
  }

  // –†–∞—Å—á–µ—Ç –ø–æ–ª–Ω–æ–π –º–∞—à–∏–Ω—ã –¥–ª—è –≤–Ω—É—Ç—Ä–∏—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö
  async calculateFullTruckPrice(from, to) {
    const distance = await this.distanceAPI.getDistance(from, to) || 50;
    const basePrice = 20000;  // –º–∏–Ω–∏–º—É–º –¥–ª—è —Ñ—É—Ä—ã
    const kmPrice = distance < 50 ? 500 : 200;
    return Math.max(basePrice, distance * kmPrice);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ API (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!)
  async getDistance(from, to) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –±–∞–∑—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      const staticRoutes = {
        // –û–°–ù–û–í–ù–´–ï –ú–ï–ñ–†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ï –ú–ê–†–®–†–£–¢–´
        '–ú–æ—Å–∫–≤–∞-–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 700,
        '–ú–æ—Å–∫–≤–∞-–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': 400,
        '–ú–æ—Å–∫–≤–∞-–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 1400,
        '–ú–æ—Å–∫–≤–∞-–ö–∞–∑–∞–Ω—å': 800,
        '–ú–æ—Å–∫–≤–∞-–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É': 1100,
        '–ú–æ—Å–∫–≤–∞-–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 3300,
        '–ú–æ—Å–∫–≤–∞-–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä': 1200,
        '–ú–æ—Å–∫–≤–∞-–¢—é–º–µ–Ω—å': 2100,
        '–ú–æ—Å–∫–≤–∞-–í–æ—Ä–æ–Ω–µ–∂': 500,
        '–ú–æ—Å–∫–≤–∞-–°–∞–º–∞—Ä–∞': 1000,
        '–ú–æ—Å–∫–≤–∞-–£—Ñ–∞': 1200,
        '–ú–æ—Å–∫–≤–∞-–ß–µ–ª—è–±–∏–Ω—Å–∫': 1800,
        '–ú–æ—Å–∫–≤–∞-–ü–µ—Ä–º—å': 1400,
        '–ú–æ—Å–∫–≤–∞-–í–æ–ª–≥–æ–≥—Ä–∞–¥': 900,
        '–°–ü–±-–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 1800,
        '–°–ü–±-–ö–∞–∑–∞–Ω—å': 1200,
        '–°–ü–±-–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': 1000,
        
        // WB –°–ö–õ–ê–î–´ - –ú–û–°–ö–û–í–°–ö–ò–ô –†–ï–ì–ò–û–ù
        '–ú–æ—Å–∫–≤–∞-–ö–æ–ª–µ–¥–∏–Ω–æ': 25,
        '–ú–æ—Å–∫–≤–∞-–ü–æ–¥–æ–ª—å—Å–∫': 40,
        '–ú–æ—Å–∫–≤–∞-–ë–µ–ª—ã–µ –°—Ç–æ–ª–±—ã': 50,
        '–ú–æ—Å–∫–≤–∞-–†–∞–¥—É–º–ª—è': 60,
        '–ú–æ—Å–∫–≤–∞-–ü—É—à–∫–∏–Ω–æ': 35,
        '–ú–æ—Å–∫–≤–∞-–í—ë—à–∫–∏': 30,
        '–ú–æ—Å–∫–≤–∞-–ß–µ—Ö–æ–≤': 55,
        '–ú–æ—Å–∫–≤–∞-–û–±—É—Ö–æ–≤–æ': 45,
        '–ú–æ—Å–∫–≤–∞-–°—ã–Ω–∫–æ–≤–æ': 50,
        
        // –†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ï –ú–ê–†–®–†–£–¢–´
        '–ú–æ—Å–∫–≤–∞-–¢–≤–µ—Ä—å': 170,
        '–ú–æ—Å–∫–≤–∞-–¢—É–ª–∞': 190,
        '–ú–æ—Å–∫–≤–∞-–†—è–∑–∞–Ω—å': 250,
        '–ú–æ—Å–∫–≤–∞-–ö–∞–ª—É–≥–∞': 160,
        '–ú–æ—Å–∫–≤–∞-–°–º–æ–ª–µ–Ω—Å–∫': 400,
        '–ú–æ—Å–∫–≤–∞-–Ø—Ä–æ—Å–ª–∞–≤–ª—å': 260,
        '–ú–æ—Å–∫–≤–∞-–í–ª–∞–¥–∏–º–∏—Ä': 190
      };

      const routeKey = `${from}-${to}`;
      const reverseKey = `${to}-${from}`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –±–∞–∑—É
      const staticDistance = staticRoutes[routeKey] || staticRoutes[reverseKey];
      if (staticDistance) {
        return staticDistance;
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –±–∞–∑–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º API
      console.log(`üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ API: ${from} ‚Üí ${to}`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –∞–≤—Ç–æ–¥–∏—Å–ø–µ—Ç—á–µ—Ä.—Ä—É
      const response = await fetch(`https://www.avtodispetcher.ru/distance/api/?from=${encodeURIComponent(from)}&to=${encodeURIComponent(to)}&format=json`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        if (data && data.distance && data.distance > 0) {
          console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ API: ${data.distance} –∫–º`);
          return Math.round(data.distance);
        }
      }

      // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
      console.log(`‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ${from}-${to}`);
      return this.calculateApproximateDistance(from, to);

    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ API —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π: ${error.message}`);
      return this.calculateApproximateDistance(from, to);
    }
  }

  // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º (fallback)
  calculateApproximateDistance(from, to) {
    // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –ø–æ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º –æ–∫—Ä—É–≥–∞–º
    const regionDistances = {
      '–ú–æ—Å–∫–≤–∞': { '–°–ü–±': 700, '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 1400, '–ö–∞–∑–∞–Ω—å': 800, '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä': 1200 },
      '–°–ü–±': { '–ú–æ—Å–∫–≤–∞': 700, '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 1800, '–ö–∞–∑–∞–Ω—å': 1200 },
      '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': { '–ú–æ—Å–∫–≤–∞': 1400, '–°–ü–±': 1800, '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 1800 },
      '–ö–∞–∑–∞–Ω—å': { '–ú–æ—Å–∫–≤–∞': 800, '–°–ü–±': 1200, '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 1000 },
      '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä': { '–ú–æ—Å–∫–≤–∞': 1200, '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É': 300 },
      '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': { '–ú–æ—Å–∫–≤–∞': 3300, '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 1800 }
    };

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤
    const normalizeCity = (city) => {
      if (city.includes('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥') || city.includes('–°–ü–±')) return '–°–ü–±';
      if (city.includes('–ú–æ—Å–∫–≤')) return '–ú–æ—Å–∫–≤–∞';
      if (city.includes('–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥')) return '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥';
      if (city.includes('–ö–∞–∑–∞–Ω')) return '–ö–∞–∑–∞–Ω—å';
      if (city.includes('–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä')) return '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä';
      if (city.includes('–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫')) return '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫';
      return city;
    };

    const fromNorm = normalizeCity(from);
    const toNorm = normalizeCity(to);

    if (regionDistances[fromNorm] && regionDistances[fromNorm][toNorm]) {
      return regionDistances[fromNorm][toNorm];
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    return 500;
  }

  // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø UI
  init() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const form = document.getElementById('calculatorForm');
    if (!form) {
      return;
    }

    // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ
    this.setupAutocomplete();
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
  handleCalculation() {
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const fromCity = document.getElementById('fromCity')?.value || '';
    const toCity = document.getElementById('toCity')?.value || '';
    const weight = parseFloat(document.getElementById('weight')?.value || 0);
    const volume = parseFloat(document.getElementById('volume')?.value || 0);
    const isConsolidated = document.getElementById('isConsolidated')?.checked || false;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!fromCity || !toCity || !weight) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –∏ –≤–µ—Å –≥—Ä—É–∑–∞!');
      return;
    }
    
    // –û–±—ä–µ–º –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π, –Ω–æ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω
    if (volume && volume <= 0) {
      alert('–û–±—ä–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0!');
      return;
    }

    // –†–∞—Å—á–µ—Ç
    const cargoType = isConsolidated ? 'consolidated' : 'general';
    this.calculatePrice(fromCity, toCity, weight, volume, cargoType)
      .then(result => {
        console.log(`üí∞ ${fromCity} ‚Üí ${toCity}: ${result.price.toLocaleString()} ‚ÇΩ`);
        this.showResult(result);
      })
      .catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞:', error);
        alert('–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞: ' + error.message);
      });
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  showResult(result) {
    const resultDiv = document.getElementById('calculatorResult') || this.createResultDiv();
    
    if (result.error) {
      resultDiv.innerHTML = `
        <div class="alert alert-warning">
          <h4>‚ö†Ô∏è ${result.message}</h4>
          ${result.alternativePrice ? 
            `<p>–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã: <strong>${result.alternativePrice.toLocaleString()} ‚ÇΩ</strong></p>` : ''
          }
          <p>–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è: <a href="tel:+79162720932">+7 (916) 272-09-32</a></p>
        </div>
      `;
    } else {
      resultDiv.innerHTML = `
        <div class="calc-success">
          <h3>üéØ –†–∞—Å—á–µ—Ç –≥–æ—Ç–æ–≤!</h3>
          
          <div class="price-block">
            <div class="price-main">
              <span class="price-label">–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫–∏:</span>
              <span class="price-value">${result.price.toLocaleString()} ‚ÇΩ</span>
            </div>
            <div class="price-info">
              <p>üöõ ${result.transport}</p>
              <p>üìÖ ${result.deliveryTime}</p>
            </div>
          </div>

          <div class="cta-buttons">
            <button class="btn btn-primary btn-lg" onclick="smartCalculatorV2.showLeadForm()">
              üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
            </button>
            <button class="btn btn-secondary" onclick="smartCalculatorV2.callManager()">
              üìû +7 (916) 272-09-32
            </button>
          </div>

          <div class="disclaimer">
            <p><small>* –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º</small></p>
          </div>
        </div>
      `;
    }

    // –°–∫—Ä–æ–ª–ª–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    resultDiv.style.display = 'block';
    resultDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ div –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  createResultDiv() {
    const div = document.createElement('div');
    div.id = 'calculatorResult';
    div.className = 'calculator-result';
    
    const form = document.getElementById('calculatorForm');
    if (form) {
      form.parentNode.insertBefore(div, form.nextSibling);
    } else {
      // Fallback - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
      const calcSection = document.querySelector('.calculator-section, #calculator');
      if (calcSection) {
        calcSection.appendChild(div);
      }
    }
    
    return div;
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Å–±–æ—Ä–∞ –ª–∏–¥–æ–≤
  showLeadForm() {
    const leadForm = document.getElementById('leadForm');
    if (leadForm) {
      leadForm.style.display = 'block';
      leadForm.scrollIntoView({ behavior: 'smooth', block: 'center' });
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
      this.fillLeadFormData();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
      this.setupLeadFormHandler();
    }
  }

  // –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
  fillLeadFormData() {
    const fromCity = document.getElementById('fromCity')?.value || '';
    const toCity = document.getElementById('toCity')?.value || '';
    const weight = document.getElementById('weight')?.value || '';
    const volume = document.getElementById('volume')?.value || '';
    const transport = document.getElementById('transport')?.value || '';
    
    const comment = document.getElementById('leadComment');
    if (comment) {
      comment.value = `–ú–∞—Ä—à—Ä—É—Ç: ${fromCity} ‚Üí ${toCity}\n–í–µ—Å: ${weight} –∫–≥\n–û–±—ä–µ–º: ${volume} –º¬≥\n–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${transport}`;
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–æ—Ä–º—ã –ª–∏–¥–æ–≤
  setupLeadFormHandler() {
    const form = document.getElementById('calculatorLeadForm');
    if (form) {
      form.addEventListener('submit', (e) => {
        e.preventDefault();
        this.handleLeadFormSubmit(e);
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –ª–∏–¥–æ–≤
  handleLeadFormSubmit(e) {
    const formData = new FormData(e.target);
    const data = {
      name: formData.get('name'),
      phone: formData.get('phone'),
      email: formData.get('email'),
      comment: formData.get('comment'),
      timestamp: new Date().toISOString(),
      source: 'calculator'
    };

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    const submitBtn = e.target.querySelector('button[type="submit"]');
    const btnText = submitBtn.querySelector('.btn-text');
    const btnLoading = submitBtn.querySelector('.btn-loading');
    
    btnText.style.display = 'none';
    btnLoading.style.display = 'inline';

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (–º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å form-handler.js)
    this.sendLeadData(data)
      .then(() => {
        this.showLeadSuccess();
      })
      .catch((error) => {
        this.showLeadError(error);
      })
      .finally(() => {
        btnText.style.display = 'inline';
        btnLoading.style.display = 'none';
      });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–∞
  async sendLeadData(data) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ telegram-sender.js
    if (window.sendToTelegram) {
      return window.sendToTelegram(data, 'calculator');
    }
    
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å father_bot.py —á–µ—Ä–µ–∑ Telegram
    const promoCode = document.getElementById('promoCode')?.textContent || 'GOST10';
    const message = `üéØ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:\n\nüë§ –ò–º—è: ${data.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}\nüìß Email: ${data.email}\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${data.comment}\nüéÅ –ü—Ä–æ–º–æ–∫–æ–¥: ${promoCode}\n‚è∞ –ò—Å—Ç–æ—á–Ω–∏–∫: —Ñ–æ—Ä–º–∞ –ª–∏–¥–æ–≤`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ father_bot –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    window.open(`https://t.me/father_bot?start=${encodeURIComponent(message)}`, '_blank');
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å (–±–µ–∑ –¥–∞–Ω–Ω—ã—Ö)
    return Promise.resolve();
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
  showLeadSuccess() {
    const leadForm = document.getElementById('leadForm');
    if (leadForm) {
      leadForm.innerHTML = `
        <div class="lead-success">
          <div class="success-icon">‚úÖ</div>
          <h3>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</h3>
          <p>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.</p>
          <button class="btn btn-primary" onclick="location.reload()">
            –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ—â–µ —Ä–∞–∑
          </button>
        </div>
      `;
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
  showLeadError(error) {
    const leadForm = document.getElementById('leadForm');
    if (leadForm) {
      leadForm.innerHTML = `
        <div class="lead-error">
          <div class="error-icon">‚ùå</div>
          <h3>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏</h3>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é: <a href="tel:+79162720932">+7 (916) 272-09-32</a></p>
          <button class="btn btn-primary" onclick="location.reload()">
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      `;
    }
  }

  // –ö–Ω–æ–ø–∫–∞ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  orderNow() {
    this.showLeadForm();
  }

  // –ö–Ω–æ–ø–∫–∞ –ø–æ–∑–≤–æ–Ω–∏—Ç—å
  callManager() {
    window.location.href = 'tel:+79162720932';
  }

  // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤
  setupAutocomplete() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ cities-simple.js
    if (typeof POPULAR_CITIES !== 'undefined') {
      // –î–æ–±–∞–≤–ª—è–µ–º datalist —Å –ø–æ–ª–Ω–æ–π –±–∞–∑–æ–π
      const datalist = document.createElement('datalist');
      datalist.id = 'cities-list';
      POPULAR_CITIES.forEach(city => {
        const option = document.createElement('option');
        option.value = city;
        datalist.appendChild(option);
      });
      document.body.appendChild(datalist);

      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∏–Ω–ø—É—Ç–∞–º
      document.getElementById('fromCity')?.setAttribute('list', 'cities-list');
      document.getElementById('toCity')?.setAttribute('list', 'cities-list');
    } else {
      // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –±–∞–∑—É –µ—Å–ª–∏ cities-simple.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
      const cities = [
        '–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
        '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ö–∞–∑–∞–Ω—å', '–ß–µ–ª—è–±–∏–Ω—Å–∫', '–°–∞–º–∞—Ä–∞', '–û–º—Å–∫',
        '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', '–£—Ñ–∞', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–í–æ—Ä–æ–Ω–µ–∂', '–ü–µ—Ä–º—å'
      ];

      const datalist = document.createElement('datalist');
      datalist.id = 'cities-list';
      cities.forEach(city => {
        const option = document.createElement('option');
        option.value = city;
        datalist.appendChild(option);
      });
      document.body.appendChild(datalist);

      document.getElementById('fromCity')?.setAttribute('list', 'cities-list');
      document.getElementById('toCity')?.setAttribute('list', 'cities-list');
    }
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
  window.smartCalculatorV2 = new SmartCalculatorV2();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Exit-Intent Pop-up
  initExitIntentPopup();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Sticky Header
  initStickyHeader();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ —Ç–∞–π–º–µ—Ä–∞
  initPromoTimer();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
  updatePromoTimer();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î
  initPrivacyConsent();
});

// Exit-Intent Pop-up –ª–æ–≥–∏–∫–∞
function initExitIntentPopup() {
  let hasShownPopup = false;
  let mouseLeaveCount = 0;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ª–∏ —É–∂–µ pop-up –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
  if (sessionStorage.getItem('exitPopupShown')) {
    return;
  }
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
  document.addEventListener('mouseleave', (e) => {
    if (e.clientY <= 0 && !hasShownPopup && mouseLeaveCount === 0) {
      mouseLeaveCount++;
      setTimeout(() => {
        showExitPopup();
      }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞
    }
  });
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ Escape
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !hasShownPopup) {
      showExitPopup();
    }
  });
}

// –ü–æ–∫–∞–∑–∞—Ç—å Exit-Intent Pop-up
function showExitPopup() {
  const popup = document.getElementById('exitIntentPopup');
  if (popup) {
    popup.classList.add('show');
    sessionStorage.setItem('exitPopupShown', 'true');
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–æ—Ä–º—ã
    setupExitFormHandler();
  }
}

// –ó–∞–∫—Ä—ã—Ç—å Exit-Intent Pop-up
function closeExitPopup() {
  const popup = document.getElementById('exitIntentPopup');
  if (popup) {
    popup.classList.remove('show');
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–æ—Ä–º—ã Exit-Intent
function setupExitFormHandler() {
  const form = document.getElementById('exitLeadForm');
  if (form) {
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      handleExitFormSubmit(e);
    });
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã Exit-Intent
function handleExitFormSubmit(e) {
  const formData = new FormData(e.target);
  const data = {
    name: formData.get('name'),
    phone: formData.get('phone'),
    email: formData.get('email'),
    promoCode: 'WELCOME10',
    source: 'exit-intent-popup',
    timestamp: new Date().toISOString()
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  const submitBtn = e.target.querySelector('button[type="submit"]');
  const originalText = submitBtn.textContent;
  submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
  submitBtn.disabled = true;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
  sendExitLeadData(data)
    .then(() => {
      showExitSuccess();
    })
    .catch((error) => {
      showExitError(error);
    })
    .finally(() => {
      submitBtn.textContent = originalText;
      submitBtn.disabled = false;
    });
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö Exit-Intent –ª–∏–¥–∞
async function sendExitLeadData(data) {
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –∫ –¥–∞–Ω–Ω—ã–º
  data.promoCode = 'WELCOME10';
  data.source = 'Exit-Intent Pop-up';
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ telegram-sender.js
  if (window.sendToTelegram) {
    return window.sendToTelegram(data, 'exitIntent');
  }
  
  // –ï—Å–ª–∏ telegram-sender.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
  try {
    const botToken = '7999458907:AAGOAjQLmEZuT4SFx4Upl1GjuXO0yFuWok8';
    const chatId = '399711407';
    
    const message = `üéÅ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å exit-intent:\n\nüë§ –ò–º—è: ${data.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}\nüìß Email: ${data.email}\nüéÅ –ü—Ä–æ–º–æ–∫–æ–¥: ${data.promoCode}\n‚è∞ –ò—Å—Ç–æ—á–Ω–∏–∫: ${data.source}`;
    
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: chatId, text: message })
    });
    
    if (response.ok) {
  
      return Promise.resolve();
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ exit-intent –∑–∞—è–≤–∫–∏');
  }
  
  return Promise.resolve();
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É Exit-Intent
function showExitSuccess() {
  const popup = document.getElementById('exitIntentPopup');
  if (popup) {
    popup.innerHTML = `
      <div class="exit-popup-content">
        <div class="exit-popup-header">
          <h3>‚úÖ –£—Å–ø–µ—à–Ω–æ!</h3>
          <button class="exit-popup-close" onclick="closeExitPopup()">√ó</button>
        </div>
        <div class="exit-popup-body">
          <div class="exit-popup-icon">üéâ</div>
          <h4>–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!</h4>
          <p>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º —Å–∫–∏–¥–∫—É 10% –Ω–∞ –ø–µ—Ä–≤—É—é –ø–µ—Ä–µ–≤–æ–∑–∫—É.</p>
          <div class="exit-popup-footer">
            <small>–ü—Ä–æ–º–æ–∫–æ–¥: <strong>WELCOME10</strong></small>
          </div>
        </div>
      </div>
    `;
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ Exit-Intent
function showExitError(error) {
  const popup = document.getElementById('exitIntentPopup');
  if (popup) {
    popup.innerHTML = `
      <div class="exit-popup-content">
        <div class="exit-popup-header">
          <h3>‚ùå –û—à–∏–±–∫–∞</h3>
          <button class="exit-popup-close" onclick="closeExitPopup()">√ó</button>
        </div>
        <div class="exit-popup-body">
          <div class="exit-popup-icon">üòî</div>
          <h4>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫</h4>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é: <a href="tel:+79162720932">+7 (916) 272-09-32</a></p>
          <p>–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ WhatsApp: <a href="https://wa.me/79162720932">–ù–∞–ø–∏—Å–∞—Ç—å</a></p>
        </div>
      </div>
    `;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = SmartCalculatorV2;
}

// Sticky Header –ª–æ–≥–∏–∫–∞
function initStickyHeader() {
  let lastScrollTop = 0;
  const stickyHeader = document.getElementById('stickyHeader');
  const header = document.getElementById('header');

  if (stickyHeader && header) {
    window.addEventListener('scroll', () => {
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      const headerHeight = header.offsetHeight;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º sticky header –ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∑–∞ –æ—Å–Ω–æ–≤–Ω–æ–π header
      if (scrollTop > headerHeight && scrollTop > lastScrollTop) {
        stickyHeader.classList.add('visible');
      } else if (scrollTop <= headerHeight || scrollTop < lastScrollTop) {
        stickyHeader.classList.remove('visible');
      }
    });
  }
}

// –ü—Ä–æ–º–æ–∫–æ–¥ –∏ —Ç–∞–π–º–µ—Ä –ª–æ–≥–∏–∫–∞
function initPromoTimer() {
  let timeLeft = 15 * 60; // 15 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  const timerMinutes = document.getElementById('timerMinutes');
  const timerSeconds = document.getElementById('timerSeconds');
  const promoSection = document.querySelector('.promo-section');

  if (!timerMinutes || !timerSeconds) {

    return;
  }

  const timer = setInterval(() => {
    const minutes = Math.floor(timeLeft / 60);
    const seconds = timeLeft % 60;

    timerMinutes.textContent = minutes.toString().padStart(2, '0');
    timerSeconds.textContent = seconds.toString().padStart(2, '0');

    timeLeft--;

    if (timeLeft < 0) {
      clearInterval(timer);
      hidePromoTimer();
    }
  }, 1000);
}

// –°–∫—Ä—ã—Ç—å —Ç–∞–π–º–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–∞
function hidePromoTimer() {
  const promoSection = document.querySelector('.promo-section');
  if (promoSection) {
    promoSection.style.display = 'none';
  }
}

// –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–∞
function updatePromoTimer() {
  const timerMinutes = document.getElementById('timerMinutes');
  const timerSeconds = document.getElementById('timerSeconds');
  
  if (timerMinutes && timerSeconds) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ localStorage
    const savedTime = localStorage.getItem('promoTimerEnd');
    if (savedTime) {
      const endTime = parseInt(savedTime);
      const now = Date.now();
      const timeLeft = Math.max(0, Math.floor((endTime - now) / 1000));
      
      if (timeLeft > 0) {
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        
        timerMinutes.textContent = minutes.toString().padStart(2, '0');
        timerSeconds.textContent = seconds.toString().padStart(2, '0');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        setTimeout(updatePromoTimer, 1000);
      } else {
        hidePromoTimer();
      }
    }
  }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function initPrivacyConsent() {
  const consentCheckbox = document.getElementById('privacyConsent');
  const submitBtn = document.getElementById('leadSubmitBtn') || document.getElementById('contactSubmitBtn');
  
  if (consentCheckbox && submitBtn) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    submitBtn.disabled = !consentCheckbox.checked;
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞
    consentCheckbox.addEventListener('change', function() {
      submitBtn.disabled = !this.checked;
      
      if (this.checked) {
        submitBtn.classList.remove('btn-disabled');
        submitBtn.classList.add('btn-primary');
      } else {
        submitBtn.classList.add('btn-disabled');
        submitBtn.classList.remove('btn-primary');
      }
    });
  }
}

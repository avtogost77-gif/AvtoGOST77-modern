// ========================================================
// üöõ –£–ú–ù–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ê–í–¢–û–ì–û–°–¢ V2.0 - –õ–û–ì–ò–ö–ê –ò–õ–Æ–®–ò
// –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ CALCULATOR-LOGIC.md
// ========================================================

class SmartCalculatorV2 {
  constructor() {
    // –¢–ò–ü–´ –¢–†–ê–ù–°–ü–û–†–¢–ê —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ—Ç –ò–ª—é—à–∏
    this.transportTypes = {
      gazelle: {
        name: '–ì–∞–∑–µ–ª—å',
        maxWeight: 2000,    // –∫–≥
        maxVolume: 16,      // –º¬≥
        density: 125,       // –∫–≥/–º¬≥
        minPrice: 5000,     // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
        icon: 'üöê'
      },
      fiveTon: {
        name: '5-—Ç–æ–Ω–Ω–∏–∫',
        maxWeight: 5000,
        maxVolume: 36,
        density: 139,
        minPrice: 8000,
        icon: 'üöõ'
      },
      tenTon: {
        name: '10-—Ç–æ–Ω–Ω–∏–∫',
        maxWeight: 10000,
        maxVolume: 50,
        density: 200,
        minPrice: 12000,
        icon: 'üöö'
      },
      truck: {
        name: '–§—É—Ä–∞ 20—Ç',
        maxWeight: 20000,
        maxVolume: 80,
        density: 250,
        minPrice: 20000,
        icon: 'üöö'
      }
    };

    // –†–ï–ê–õ–¨–ù–´–ï –ü–†–ò–ú–ï–†–´ –¶–ï–ù –æ—Ç –ò–ª—é—à–∏
    this.realPrices = {
      '–ì–æ–ª–∏—Ü—ã–Ω–æ-–ü–æ–≤–∞—Ä–æ–≤–æ': { distance: 40, price: 28000, pricePerKm: 700 },
      '–ì–æ–ª–∏—Ü—ã–Ω–æ-–í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫': { distance: 100, price: 28000, pricePerKm: 280 },
      '–ì–æ–ª–∏—Ü—ã–Ω–æ-–¢–≤–µ—Ä—å': { distance: 170, price: 35000, pricePerKm: 206 },
      '–ì–æ–ª–∏—Ü—ã–Ω–æ-–†—è–∑–∞–Ω—å': { distance: 180, price: 35000, pricePerKm: 194 },
      '–ì–æ–ª–∏—Ü—ã–Ω–æ-–ö–æ—Å—Ç—Ä–æ–º–∞': { distance: 340, price: 50000, pricePerKm: 147 },
      '–û–¥–∏–Ω—Ü–æ–≤–æ-–°–ü–±': { distance: 700, price: 70000, pricePerKm: 100 },
      '–°–ü–±-–û–¥–∏–Ω—Ü–æ–≤–æ': { distance: 700, price: 65000, pricePerKm: 93 }  // –æ–±—Ä–∞—Ç–∫–∞ –¥–µ—à–µ–≤–ª–µ!
    };

    // –í–ê–ñ–ù–û–ï –ü–†–ê–í–ò–õ–û: –í–ù–£–¢–†–ò –†–ï–ì–ò–û–ù–ê –°–ë–û–†–ù–´–• –ù–ï–¢!
    this.regions = {
      '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': [
        '–ú–æ—Å–∫–≤–∞', '–ü–æ–¥–æ–ª—å—Å–∫', '–•–∏–º–∫–∏', '–ë–∞–ª–∞—à–∏—Ö–∞', '–ú—ã—Ç–∏—â–∏', '–ö–æ—Ä–æ–ª—ë–≤',
        '–õ—é–±–µ—Ä—Ü—ã', '–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫', '–û–¥–∏–Ω—Ü–æ–≤–æ', '–ì–æ–ª–∏—Ü—ã–Ω–æ', '–ü–æ–≤–∞—Ä–æ–≤–æ',
        '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫', '–ö–æ–ª–æ–º–Ω–∞', '–°–µ—Ä–ø—É—Ö–æ–≤', '–©—ë–ª–∫–æ–≤–æ', '–î–æ–º–æ–¥–µ–¥–æ–≤–æ'
      ],
      '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –∏ –æ–±–ª–∞—Å—Ç—å': [
        '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ì–∞—Ç—á–∏–Ω–∞', '–í—ã–±–æ—Ä–≥', '–í—Å–µ–≤–æ–ª–æ–∂—Å–∫', '–ö–æ–ª–ø–∏–Ω–æ',
        '–ü—É—à–∫–∏–Ω', '–ü–µ—Ç–µ—Ä–≥–æ—Ñ', '–ö—Ä–æ–Ω—à—Ç–∞–¥—Ç'
      ],
      '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': [
        '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–î–∑–µ—Ä–∂–∏–Ω—Å–∫', '–ê—Ä–∑–∞–º–∞—Å', '–°–∞—Ä–æ–≤', '–ë–æ—Ä'
      ]
    };

    this.init();
  }

  // –ì–õ–ê–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –†–ê–°–ß–ï–¢–ê
  calculatePrice(fromCity, toCity, weight, volume, cargoType = 'general') {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–Ω—É—Ç—Ä–∏—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–≤–æ–∑–∫—É
    if (this.isSameRegion(fromCity, toCity)) {
      return {
        error: true,
        message: '–í–ù–ò–ú–ê–ù–ò–ï! –°–±–æ—Ä–Ω—ã–µ –≥—Ä—É–∑—ã —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏. –í–Ω—É—Ç—Ä–∏ —Ä–µ–≥–∏–æ–Ω–∞ - —Ç–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞!',
        alternativePrice: this.calculateFullTruckPrice(fromCity, toCity)
      };
    }

    // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    const transport = this.selectOptimalTransport(weight, volume);
    if (!transport) {
      return {
        error: true,
        message: '–ì—Ä—É–∑ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –¥–∞–∂–µ –≤ —Ñ—É—Ä—É! –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–ø–µ—Ü—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç.'
      };
    }

    // 3. –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    const distance = this.getDistance(fromCity, toCity);

    // 4. –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º –†–ï–ê–õ–¨–ù–´–• –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    let pricePerKm;
    if (distance < 50) {
      pricePerKm = 700;  // –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã - –¥–æ—Ä–æ–≥–æ!
    } else if (distance < 100) {
      pricePerKm = 280;
    } else if (distance < 200) {
      pricePerKm = 200;
    } else if (distance < 500) {
      pricePerKm = 150;
    } else {
      pricePerKm = 100;  // –î–∞–ª—å–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã - –¥–µ—à–µ–≤–ª–µ –∑–∞ –∫–º
    }

    let basePrice = distance * pricePerKm;

    // 5. –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    basePrice = Math.max(basePrice, transport.minPrice);

    // 6. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ (—á–µ–º –º–µ–Ω—å—à–µ –≥—Ä—É–∑, —Ç–µ–º –¥–æ—Ä–æ–∂–µ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É)
    const loadFactor = this.calculateLoadFactor(weight, volume, transport);
    basePrice *= loadFactor;

    // 7. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    const routeFactor = this.getRouteFactor(fromCity, toCity);
    basePrice *= routeFactor;

    // 8. –¢–∏–ø –≥—Ä—É–∑–∞
    const cargoFactor = this.getCargoFactor(cargoType);
    basePrice *= cargoFactor;

    // 9. –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –∫—Ä–∞—Å–∏–≤–æ–π —Ü–∏—Ñ—Ä—ã
    const finalPrice = Math.round(basePrice / 500) * 500;

    return {
      success: true,
      price: finalPrice,
      transport: transport.name,
      distance: distance,
      pricePerKm: Math.round(finalPrice / distance),
      deliveryTime: this.calculateDeliveryTime(distance),
      details: {
        weight,
        volume,
        density: Math.round(weight / volume),
        loadPercent: Math.round((weight / transport.maxWeight) * 100),
        volumePercent: Math.round((volume / transport.maxVolume) * 100)
      }
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–¥–∏–Ω —Ä–µ–≥–∏–æ–Ω
  isSameRegion(city1, city2) {
    for (const [region, cities] of Object.entries(this.regions)) {
      const hasBoth = cities.includes(city1) && cities.includes(city2);
      if (hasBoth) return true;
    }
    return false;
  }

  // –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  selectOptimalTransport(weight, volume) {
    // –°—á–∏—Ç–∞–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≥—Ä—É–∑–∞
    const density = weight / volume;

    for (const [key, transport] of Object.entries(this.transportTypes)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ –≤–µ—Å—É, –∏ –ø–æ –æ–±—ä–µ–º—É
      if (weight <= transport.maxWeight && volume <= transport.maxVolume) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
        if (density <= transport.density * 1.2) {  // –¥–∞–µ–º 20% –∑–∞–ø–∞—Å
          return transport;
        }
      }
    }
    return null;
  }

  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏
  calculateLoadFactor(weight, volume, transport) {
    const weightUsage = weight / transport.maxWeight;
    const volumeUsage = volume / transport.maxVolume;
    const maxUsage = Math.max(weightUsage, volumeUsage);

    // –ß–µ–º –º–µ–Ω—å—à–µ –∑–∞–≥—Ä—É–∑–∫–∞, —Ç–µ–º –¥–æ—Ä–æ–∂–µ
    if (maxUsage < 0.3) return 1.5;   // –º–µ–Ω–µ–µ 30% - –¥–æ—Ä–æ–≥–æ
    if (maxUsage < 0.5) return 1.3;   // –º–µ–Ω–µ–µ 50%
    if (maxUsage < 0.7) return 1.1;   // –º–µ–Ω–µ–µ 70%
    return 1.0;  // –±–æ–ª–µ–µ 70% - –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
  }

  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞
  getRouteFactor(from, to) {
    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const popularRoutes = [
      ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'],
      ['–ú–æ—Å–∫–≤–∞', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥'],
      ['–ú–æ—Å–∫–≤–∞', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'],
      ['–ú–æ—Å–∫–≤–∞', '–ö–∞–∑–∞–Ω—å']
    ];

    for (const route of popularRoutes) {
      if ((route.includes(from) && route.includes(to))) {
        return 0.9;  // —Å–∫–∏–¥–∫–∞ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
      }
    }

    // –û–±—Ä–∞—Ç–∫–∞ –¥–µ—à–µ–≤–ª–µ
    if (to === '–ú–æ—Å–∫–≤–∞' || to === '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥') {
      return 0.95;
    }

    return 1.0;
  }

  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–∏–ø–∞ –≥—Ä—É–∑–∞
  getCargoFactor(cargoType) {
    const factors = {
      'general': 1.0,      // –æ–±—ã—á–Ω—ã–π
      'fragile': 1.3,      // —Ö—Ä—É–ø–∫–∏–π
      'valuable': 1.5,     // —Ü–µ–Ω–Ω—ã–π
      'dangerous': 1.8,    // –æ–ø–∞—Å–Ω—ã–π
      'perishable': 1.4,   // —Å–∫–æ—Ä–æ–ø–æ—Ä—Ç—è—â–∏–π—Å—è
      'oversized': 1.6     // –Ω–µ–≥–∞–±–∞—Ä–∏—Ç
    };
    return factors[cargoType] || 1.0;
  }

  // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
  calculateDeliveryTime(distance) {
    if (distance < 500) return '1-2 –¥–Ω—è';
    if (distance < 1000) return '2-3 –¥–Ω—è';
    if (distance < 2000) return '3-4 –¥–Ω—è';
    if (distance < 3000) return '4-5 –¥–Ω–µ–π';
    return '5-7 –¥–Ω–µ–π';
  }

  // –†–∞—Å—á–µ—Ç –ø–æ–ª–Ω–æ–π –º–∞—à–∏–Ω—ã –¥–ª—è –≤–Ω—É—Ç—Ä–∏—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö
  calculateFullTruckPrice(from, to) {
    const distance = this.getDistance(from, to) || 50;
    const basePrice = 20000;  // –º–∏–Ω–∏–º—É–º –¥–ª—è —Ñ—É—Ä—ã
    const kmPrice = distance < 50 ? 500 : 200;
    return Math.max(basePrice, distance * kmPrice);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  getDistance(from, to) {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const routes = {
      '–ú–æ—Å–∫–≤–∞-–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 700,
      '–ú–æ—Å–∫–≤–∞-–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': 400,
      '–ú–æ—Å–∫–≤–∞-–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 1400,
      '–ú–æ—Å–∫–≤–∞-–ö–∞–∑–∞–Ω—å': 800,
      '–ú–æ—Å–∫–≤–∞-–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É': 1100,
      '–ú–æ—Å–∫–≤–∞-–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 3300
    };

    const routeKey = `${from}-${to}`;
    const reverseKey = `${to}-${from}`;
    
    return routes[routeKey] || routes[reverseKey] || 500;
  }

  // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø UI
  init() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const form = document.getElementById('smart-calc-form');
    if (!form) {
      console.log('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
      return;
    }

    // –í–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      this.handleCalculation();
    });

    // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ
    this.setupAutocomplete();
    
    console.log('‚úÖ –£–º–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä v2.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
  handleCalculation() {
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const fromCity = document.getElementById('from-city')?.value || '';
    const toCity = document.getElementById('to-city')?.value || '';
    const weight = parseFloat(document.getElementById('weight')?.value || 0);
    const volume = parseFloat(document.getElementById('volume')?.value || 0);
    const cargoType = document.getElementById('cargo-type')?.value || 'general';

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!fromCity || !toCity || !weight || !volume) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
      return;
    }

    // –†–∞—Å—á–µ—Ç
    const result = this.calculatePrice(fromCity, toCity, weight, volume, cargoType);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    this.showResult(result);
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  showResult(result) {
    const resultDiv = document.getElementById('calc-result') || this.createResultDiv();
    
    if (result.error) {
      resultDiv.innerHTML = `
        <div class="alert alert-warning">
          <h4>‚ö†Ô∏è ${result.message}</h4>
          ${result.alternativePrice ? 
            `<p>–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã: <strong>${result.alternativePrice.toLocaleString()} ‚ÇΩ</strong></p>` : ''
          }
          <p>–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è: <a href="tel:+79162720932">+7 (916) 272-09-32</a></p>
        </div>
      `;
    } else {
      resultDiv.innerHTML = `
        <div class="calc-success">
          <h3>üéØ –†–∞—Å—á–µ—Ç –≥–æ—Ç–æ–≤!</h3>
          
          <div class="price-block">
            <div class="price-main">
              <span class="price-label">–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫–∏:</span>
              <span class="price-value">${result.price.toLocaleString()} ‚ÇΩ</span>
            </div>
            <div class="price-details">
              <p>üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${result.distance} –∫–º (${result.pricePerKm} ‚ÇΩ/–∫–º)</p>
              <p>üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${result.transport}</p>
              <p>‚è±Ô∏è –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: ${result.deliveryTime}</p>
            </div>
          </div>

          <div class="cargo-details">
            <h4>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–∑–∞:</h4>
            <ul>
              <li>–í–µ—Å: ${result.details.weight} –∫–≥ (${result.details.loadPercent}% –∑–∞–≥—Ä—É–∑–∫–∏)</li>
              <li>–û–±—ä–µ–º: ${result.details.volume} –º¬≥ (${result.details.volumePercent}% –∑–∞–≥—Ä—É–∑–∫–∏)</li>
              <li>–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: ${result.details.density} –∫–≥/–º¬≥</li>
            </ul>
          </div>

          <div class="cta-buttons">
            <button class="btn btn-primary" onclick="smartCalculatorV2.orderNow()">
              ‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
            </button>
            <button class="btn btn-secondary" onclick="smartCalculatorV2.callManager()">
              üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É
            </button>
          </div>

          <div class="disclaimer">
            <p><small>* –≠—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç. –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.</small></p>
          </div>
        </div>
      `;
    }

    // –°–∫—Ä–æ–ª–ª–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    resultDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ div –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  createResultDiv() {
    const div = document.createElement('div');
    div.id = 'calc-result';
    div.className = 'calc-result-container';
    
    const form = document.getElementById('smart-calc-form');
    form.parentNode.insertBefore(div, form.nextSibling);
    
    return div;
  }

  // –ö–Ω–æ–ø–∫–∞ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
  orderNow() {
    // –ú–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–æ–º
    const message = '–•–æ—á—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫—É';
    window.open(`https://t.me/father_bot?start=${encodeURIComponent(message)}`, '_blank');
  }

  // –ö–Ω–æ–ø–∫–∞ –ø–æ–∑–≤–æ–Ω–∏—Ç—å
  callManager() {
    window.location.href = 'tel:+79162720932';
  }

  // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤
  setupAutocomplete() {
    // –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    const cities = [
      '–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
      '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ö–∞–∑–∞–Ω—å', '–ß–µ–ª—è–±–∏–Ω—Å–∫', '–°–∞–º–∞—Ä–∞', '–û–º—Å–∫',
      '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', '–£—Ñ–∞', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–í–æ—Ä–æ–Ω–µ–∂', '–ü–µ—Ä–º—å'
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º datalist
    const datalist = document.createElement('datalist');
    datalist.id = 'cities-list';
    cities.forEach(city => {
      const option = document.createElement('option');
      option.value = city;
      datalist.appendChild(option);
    });
    document.body.appendChild(datalist);

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∏–Ω–ø—É—Ç–∞–º
    document.getElementById('from-city')?.setAttribute('list', 'cities-list');
    document.getElementById('to-city')?.setAttribute('list', 'cities-list');
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
  window.smartCalculatorV2 = new SmartCalculatorV2();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = SmartCalculatorV2;
}
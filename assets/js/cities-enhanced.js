// üèôÔ∏è –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ë–ê–ó–ê –ì–û–†–û–î–û–í –†–û–°–°–ò–ò (1102 –≥–æ—Ä–æ–¥–∞)
// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—É—é –±–∞–∑—É –∏–∑ JSON –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

let CITIES_DATABASE = [];
let CITIES_BY_REGION = {};

// –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –≥–æ—Ä–æ–¥–æ–≤
async function loadCitiesDatabase() {
    try {
        const response = await fetch('/russia-cities.json');
        const data = await response.json();
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        CITIES_DATABASE = data.map(city => ({
            name: city.name,
            nameAlt: city.name_alt,
            region: city.region.name,
            population: city.population,
            label: city.label,
            zip: city.zip
        }));
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        data.forEach(city => {
            const region = city.region.name;
            if (!CITIES_BY_REGION[region]) {
                CITIES_BY_REGION[region] = [];
            }
            CITIES_BY_REGION[region].push(city.name);
        });
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${CITIES_DATABASE.length} –≥–æ—Ä–æ–¥–æ–≤ –†–æ—Å—Å–∏–∏`);
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –≥–æ—Ä–æ–¥–æ–≤:', error);
        // Fallback –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
        loadFallbackCities();
        return false;
    }
}

// –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - —Ç–æ–ø –≥–æ—Ä–æ–¥–æ–≤
function loadFallbackCities() {
    const FALLBACK_CITIES = [
        // –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
        '–ú–æ—Å–∫–≤–∞', '–ü–æ–¥–æ–ª—å—Å–∫', '–•–∏–º–∫–∏', '–ú—ã—Ç–∏—â–∏', '–ë–∞–ª–∞—à–∏—Ö–∞', '–ö–æ—Ä–æ–ª—ë–≤', 
        '–õ—é–±–µ—Ä—Ü—ã', '–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å', '–ö–æ–ª–æ–º–Ω–∞', '–û–¥–∏–Ω—Ü–æ–≤–æ', '–©—ë–ª–∫–æ–≤–æ',
        '–°–µ—Ä–≥–∏–µ–≤ –ü–æ—Å–∞–¥', '–û—Ä–µ—Ö–æ–≤–æ-–ó—É–µ–≤–æ', '–î–æ–ª–≥–æ–ø—Ä—É–¥–Ω—ã–π', '–ñ—É–∫–æ–≤—Å–∫–∏–π',
        '–ü—É—à–∫–∏–Ω–æ', '–ù–æ–≥–∏–Ω—Å–∫', '–ö–ª–∏–Ω', '–î–º–∏—Ç—Ä–æ–≤', '–†–∞–º–µ–Ω—Å–∫–æ–µ', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫',
        '–î–æ–º–æ–¥–µ–¥–æ–≤–æ', '–†–µ—É—Ç–æ–≤', '–í–∏–¥–Ω–æ–µ', '–°—Ç—É–ø–∏–Ω–æ', '–ü–∞–≤–ª–æ–≤—Å–∫–∏–π –ü–æ—Å–∞–¥',
        '–ù–∞—Ä–æ-–§–æ–º–∏–Ω—Å–∫', '–õ–æ–±–Ω—è', '–ò–≤–∞–Ω—Ç–µ–µ–≤–∫–∞', '–î—É–±–Ω–∞', '–ï–≥–æ—Ä—å–µ–≤—Å–∫',
        '–ß–µ—Ö–æ–≤', '–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫', '–§—Ä—è–∑–∏–Ω–æ', '–°–æ–ª–Ω–µ—á–Ω–æ–≥–æ—Ä—Å–∫', '–õ—ã—Ç–∫–∞—Ä–∏–Ω–æ',
        '–ì–æ–ª–∏—Ü—ã–Ω–æ', '–ü–æ–≤–∞—Ä–æ–≤–∫–∞', '–ö—É–±–∏–Ω–∫–∞', '–ò—Å—Ç—Ä–∞', '–ú–æ–∂–∞–π—Å–∫',
        
        // –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å  
        '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ì–∞—Ç—á–∏–Ω–∞', '–í—ã–±–æ—Ä–≥', '–í—Å–µ–≤–æ–ª–æ–∂—Å–∫', '–°–æ—Å–Ω–æ–≤—ã–π –ë–æ—Ä',
        '–¢–∏—Ö–≤–∏–Ω', '–ö–∏—Ä–∏—à–∏', '–ö–∏–Ω–≥–∏—Å–µ–ø–ø', '–í–æ–ª—Ö–æ–≤', '–°–µ—Ä—Ç–æ–ª–æ–≤–æ', '–õ—É–≥–∞',
        '–¢–æ—Å–Ω–æ', '–û—Ç—Ä–∞–¥–Ω–æ–µ', '–ö–æ–ª–ø–∏–Ω–æ', '–ü—É—à–∫–∏–Ω', '–ü–µ—Ç–µ—Ä–≥–æ—Ñ',
        
        // –î—Ä—É–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã
        '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥',
        '–ß–µ–ª—è–±–∏–Ω—Å–∫', '–°–∞–º–∞—Ä–∞', '–û–º—Å–∫', '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', '–£—Ñ–∞',
        '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–ü–µ—Ä–º—å', '–í–æ—Ä–æ–Ω–µ–∂', '–í–æ–ª–≥–æ–≥—Ä–∞–¥', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä'
    ];
    
    CITIES_DATABASE = FALLBACK_CITIES.map(name => ({
        name: name,
        nameAlt: name.replace(/—ë/g, '–µ'),
        region: '–†–æ—Å—Å–∏—è',
        population: 0,
        label: name.toLowerCase().replace(/\s/g, '-'),
        zip: 0
    }));
}

// –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–∞
function searchCities(query, limit = 10) {
    const searchTerm = query.toLowerCase().trim();
    
    if (searchTerm.length < 2) return [];
    
    // –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ
    const exactMatches = CITIES_DATABASE.filter(city => 
        city.name.toLowerCase().startsWith(searchTerm) ||
        city.nameAlt.toLowerCase().startsWith(searchTerm)
    );
    
    // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    const partialMatches = CITIES_DATABASE.filter(city => 
        !city.name.toLowerCase().startsWith(searchTerm) &&
        !city.nameAlt.toLowerCase().startsWith(searchTerm) &&
        (city.name.toLowerCase().includes(searchTerm) ||
         city.nameAlt.toLowerCase().includes(searchTerm))
    );
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é
    const allMatches = [...exactMatches, ...partialMatches]
        .sort((a, b) => b.population - a.population)
        .slice(0, limit);
    
    return allMatches;
}

// –ê–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
function setupEnhancedCityAutocomplete() {
    const fromInput = document.getElementById('fromCity');
    const toInput = document.getElementById('toCity');
    
    [fromInput, toInput].forEach(input => {
        if (!input) return;
        
        const suggestionsDiv = document.querySelector(`.address-suggestions[data-for="${input.name}"]`);
        if (!suggestionsDiv) return;
        
        let debounceTimer;
        
        input.addEventListener('input', function() {
            clearTimeout(debounceTimer);
            const value = this.value;
            
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            debounceTimer = setTimeout(() => {
                const matches = searchCities(value);
                
                if (matches.length > 0) {
                    suggestionsDiv.innerHTML = matches.map(city => {
                        const regionInfo = city.region !== '–†–æ—Å—Å–∏—è' ? 
                            `<span class="city-region">${city.region}</span>` : '';
                        
                        return `<div class="suggestion-item" data-city="${city.name}">
                            ${city.name} ${regionInfo}
                        </div>`;
                    }).join('');
                    suggestionsDiv.style.display = 'block';
                } else if (value.length >= 2) {
                    suggestionsDiv.innerHTML = '<div class="no-results">–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>';
                    suggestionsDiv.style.display = 'block';
                } else {
                    suggestionsDiv.style.display = 'none';
                }
            }, 300);
        });
        
        // –ö–ª–∏–∫ –ø–æ –ø–æ–¥—Å–∫–∞–∑–∫–µ
        suggestionsDiv.addEventListener('click', function(e) {
            if (e.target.classList.contains('suggestion-item')) {
                input.value = e.target.dataset.city;
                suggestionsDiv.innerHTML = '';
                suggestionsDiv.style.display = 'none';
            }
        });
        
        // –°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
        document.addEventListener('click', function(e) {
            if (!input.contains(e.target) && !suggestionsDiv.contains(e.target)) {
                suggestionsDiv.style.display = 'none';
            }
        });
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async function() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –≥–æ—Ä–æ–¥–æ–≤
    await loadCitiesDatabase();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç
    setupEnhancedCityAutocomplete();
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.CitiesEnhanced = {
    search: searchCities,
    getByRegion: (region) => CITIES_BY_REGION[region] || [],
    getAll: () => CITIES_DATABASE,
    isLoaded: () => CITIES_DATABASE.length > 0
};
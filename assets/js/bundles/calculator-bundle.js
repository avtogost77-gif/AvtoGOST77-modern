/* ===== CALCULATOR BUNDLE –î–õ–Ø AVTOGOST77 ===== */
/* –î–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º */

// === SMART CALCULATOR V2 ===
// ========================================================
// üöõ –£–ú–ù–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ê–í–¢–û–ì–û–°–¢ V2.0 - –õ–û–ì–ò–ö–ê –ò–õ–Æ–®–ò
// –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ CALCULATOR-LOGIC.md
// ========================================================

class SmartCalculatorV2 {
  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
    this.distanceAPI = new DistanceAPI();
    
    // –¢–ò–ü–´ –¢–†–ê–ù–°–ü–û–†–¢–ê —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ—Ç –ò–ª—é—à–∏
    this.transportTypes = {
      gazelle: {
        name: '–ì–∞–∑–µ–ª—å',
        maxWeight: 1500,    // –∫–≥ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!)
        maxVolume: 16,      // –º¬≥
        density: 94,        // –∫–≥/–º¬≥ (1500/16)
        minPrice: 10000,    // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ú–æ—Å–∫–≤–∞
        minPriceRegion: 7500, // –º–∏–Ω–∏–º–∞–ª–∫–∞ –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö
        coefficient: 1.0,   // –ì–ê–ó–ï–õ–¨ –±–∞–∑–æ–≤–∞—è (–±—ã–ª–æ 0.8)
        allowConsolidated: true,
        icon: 'üöê'
      },
      threeTon: {
        name: '3-—Ç–æ–Ω–Ω–∏–∫',
        maxWeight: 3000,
        maxVolume: 18,
        density: 167,
        minPrice: 13000,
        minPriceRegion: 9750,
        coefficient: 1.0,   // –¢–†–ï–®–ö–ê 25–∫ (–±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ 25‚ÇΩ/–∫–º)
        allowConsolidated: true,
        icon: 'üöõ'
      },
      fiveTon: {
        name: '5-—Ç–æ–Ω–Ω–∏–∫',
        maxWeight: 5000,
        maxVolume: 36,
        density: 139,
        minPrice: 20000,
        minPriceRegion: 15000,
        coefficient: 1.05,  // –ü–Ø–¢–ê–ö ~50–∫ (–±—ã–ª–æ 1.88)
        allowConsolidated: true,
        icon: 'üöõ'
      },
      tenTon: {
        name: '10-—Ç–æ–Ω–Ω–∏–∫',
        maxWeight: 10000,
        maxVolume: 50,
        density: 200,
        minPrice: 24000,
        minPriceRegion: 18000,
        coefficient: 1.08,  // –î–ï–°–Ø–¢–ö–ê ~63–∫ (–±—ã–ª–æ 1.84)
        allowConsolidated: true,
        icon: 'üöö'
      },
      truck: {
        name: '–§—É—Ä–∞ 20—Ç',
        maxWeight: 20000,
        maxVolume: 82,     // –º¬≥ (–º–∏–Ω–∏–º—É–º –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 82-92)
        density: 244,       // –∫–≥/–º¬≥ (20000/82)
        minPrice: 28000,
        minPriceRegion: 21000,
        coefficient: 0.95,  // –§–£–†–ê —ç–∫–æ–Ω–æ–º–∏—è –º–∞—Å—à—Ç–∞–±–∞ ~70–∫ (–±—ã–ª–æ 1.68)
        allowConsolidated: false, // –§–£–†–ê –ù–ï –°–ë–û–†–ù–´–ô!
        icon: 'üöö'
      }
    };

    // –†–ï–ê–õ–¨–ù–´–ï –ü–†–ò–ú–ï–†–´ –¶–ï–ù –æ—Ç –ò–ª—é—à–∏
    this.realPrices = {
      '–ì–æ–ª–∏—Ü—ã–Ω–æ-–ü–æ–≤–∞—Ä–æ–≤–æ': { distance: 40, price: 28000, pricePerKm: 700 },
      '–ì–æ–ª–∏—Ü—ã–Ω–æ-–í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫': { distance: 100, price: 28000, pricePerKm: 280 },
      '–ì–æ–ª–∏—Ü—ã–Ω–æ-–¢–≤–µ—Ä—å': { distance: 170, price: 35000, pricePerKm: 206 },
      '–ì–æ–ª–∏—Ü—ã–Ω–æ-–†—è–∑–∞–Ω—å': { distance: 180, price: 35000, pricePerKm: 194 },
      '–ì–æ–ª–∏—Ü—ã–Ω–æ-–ö–æ—Å—Ç—Ä–æ–º–∞': { distance: 340, price: 50000, pricePerKm: 147 },
      '–û–¥–∏–Ω—Ü–æ–≤–æ-–°–ü–±': { distance: 700, price: 70000, pricePerKm: 100 },
      '–°–ü–±-–û–¥–∏–Ω—Ü–æ–≤–æ': { distance: 700, price: 65000, pricePerKm: 93 }  // –æ–±—Ä–∞—Ç–∫–∞ –¥–µ—à–µ–≤–ª–µ!
    };

    // –í–ê–ñ–ù–û–ï –ü–†–ê–í–ò–õ–û: –í–ù–£–¢–†–ò –†–ï–ì–ò–û–ù–ê –°–ë–û–†–ù–´–• –ù–ï–¢!
    this.regions = {
      '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': [
        '–ú–æ—Å–∫–≤–∞', '–ü–æ–¥–æ–ª—å—Å–∫', '–•–∏–º–∫–∏', '–ë–∞–ª–∞—à–∏—Ö–∞', '–ú—ã—Ç–∏—â–∏', '–ö–æ—Ä–æ–ª—ë–≤',
        '–õ—é–±–µ—Ä—Ü—ã', '–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫', '–û–¥–∏–Ω—Ü–æ–≤–æ', '–ì–æ–ª–∏—Ü—ã–Ω–æ', '–ü–æ–≤–∞—Ä–æ–≤–æ',
        '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫', '–ö–æ–ª–æ–º–Ω–∞', '–°–µ—Ä–ø—É—Ö–æ–≤', '–©—ë–ª–∫–æ–≤–æ', '–î–æ–º–æ–¥–µ–¥–æ–≤–æ'
      ],
      '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –∏ –æ–±–ª–∞—Å—Ç—å': [
        '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ì–∞—Ç—á–∏–Ω–∞', '–í—ã–±–æ—Ä–≥', '–í—Å–µ–≤–æ–ª–æ–∂—Å–∫', '–ö–æ–ª–ø–∏–Ω–æ',
        '–ü—É—à–∫–∏–Ω', '–ü–µ—Ç–µ—Ä–≥–æ—Ñ', '–ö—Ä–æ–Ω—à—Ç–∞–¥—Ç'
      ],
      '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': [
        '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–î–∑–µ—Ä–∂–∏–Ω—Å–∫', '–ê—Ä–∑–∞–º–∞—Å', '–°–∞—Ä–æ–≤', '–ë–æ—Ä'
      ]
    };

    this.init();
  }

  // –ì–õ–ê–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –†–ê–°–ß–ï–¢–ê
  async calculatePrice(fromCity, toCity, weight, volume, cargoType = 'general') {
    
    // –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º –∫–µ—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ä–∞—Å—á–µ—Ç–æ–º
    // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç "–∑–∞–ª–∏–ø–∞–Ω–∏–µ" —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–Ω—É—Ç—Ä–∏—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–≤–æ–∑–∫—É
      if (this.isSameRegion(fromCity, toCity)) {
        return {
          error: true,
          message: '–í–ù–ò–ú–ê–ù–ò–ï! –°–±–æ—Ä–Ω—ã–µ –≥—Ä—É–∑—ã —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏. –í–Ω—É—Ç—Ä–∏ —Ä–µ–≥–∏–æ–Ω–∞ - —Ç–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞!',
          alternativePrice: await this.calculateFullTruckPrice(fromCity, toCity)
        };
      }

      // 2. –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–û–ï —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ API  
      const distance = await this.distanceAPI.getDistance(fromCity, toCity);
      
      // 3. –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –†–ê–ó–î–ï–õ–ï–ù–ò–Ø
      if (distance < 200) {
        // –õ–û–ö–ê–õ–¨–ù–´–ï –ò –ü–ï–†–ï–•–û–î–ù–ê–Ø –ó–û–ù–ê (–¥–æ 200–∫–º)
        return this.calculateLocalPrice(fromCity, toCity, weight, volume, distance, cargoType);
      } else {
        // –ú–ï–ñ–†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ï –ü–ï–†–ï–í–û–ó–ö–ò (200–∫–º+)
        return this.calculateInterregionalPrice(fromCity, toCity, weight, volume, distance, cargoType);
      }
    } catch (error) {
      throw error;
    }
  }

  // –õ–û–ö–ê–õ–¨–ù–´–ï –ü–ï–†–ï–í–û–ó–ö–ò - –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –∫ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–º
  calculateLocalPrice(fromCity, toCity, weight, volume, distance, cargoType) {
    // –ü–æ–¥–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    const optimalTransport = this.selectOptimalTransport(weight, volume);
    const transport = this.transportTypes[optimalTransport];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±–æ—Ä–Ω—ã–π –≥—Ä—É–∑ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    const isConsolidated = (cargoType === '—Å–±–æ—Ä–Ω—ã–π' || cargoType === 'consolidated') && transport.allowConsolidated;

    let basePrice;
    let priceCategory = '';
    
    if (distance <= 70) {
      // –ì–û–†–û–î–°–ö–ê–Ø –ë–ê–ó–ê - –º–∏–Ω–∏–º–∞–ª–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
      basePrice = transport.minPrice;
      priceCategory = '–ì–æ—Ä–æ–¥—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ (–¥–æ 70–∫–º)';
    } else {
      // –ü–ï–†–ï–•–û–î–ù–ê–Ø –ó–û–ù–ê - –±–∞–∑–∞ + –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –¥–æ–ø–ª–∞—Ç–∞ –∑–∞ –∫–º –ø–æ —Ç–∏–ø—É –¢–°
      const excessKm = distance - 70; // –∫–º —Å–≤—ã—à–µ 70
      
      // –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï –¢–ê–†–ò–§–´ –ü–û –¢–ò–ü–ê–ú –¢–° (—á–µ–º –±–æ–ª—å—à–µ –º–∞—à–∏–Ω–∞, —Ç–µ–º –¥–æ—Ä–æ–∂–µ –∫–º)
      const kmRates = {
        gazelle: 20,   // 20‚ÇΩ/–∫–º –¥–ª—è –≥–∞–∑–µ–ª–∏
        threeTon: 25,  // 25‚ÇΩ/–∫–º –¥–ª—è 3-—Ç–æ–Ω–Ω–∏–∫–∞
        fiveTon: 35,   // 35‚ÇΩ/–∫–º –¥–ª—è 5-—Ç–æ–Ω–Ω–∏–∫–∞  
        tenTon: 45,    // 45‚ÇΩ/–∫–º –¥–ª—è 10-—Ç–æ–Ω–Ω–∏–∫–∞
        truck: 60      // 60‚ÇΩ/–∫–º –¥–ª—è —Ñ—É—Ä—ã
      };
      
      const kmRate = kmRates[optimalTransport] || 25; // fallback
      const extraCost = excessKm * kmRate;
      
      basePrice = transport.minPrice + extraCost;
      priceCategory = `–ü–µ—Ä–µ—Ö–æ–¥–Ω–∞—è –∑–æ–Ω–∞ (${distance}–∫–º, +${excessKm}–∫–º √ó ${kmRate}‚ÇΩ)`;
    }
    
    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ (—á–µ–º –º–µ–Ω—å—à–µ –≥—Ä—É–∑, —Ç–µ–º –¥–æ—Ä–æ–∂–µ)
    const loadFactor = this.calculateLoadFactor(weight, volume, transport);
    
    // –î–õ–Ø –õ–û–ö–ê–õ–¨–ù–´–• - –ù–ï–¢ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Ç–∏–ø–∞ –¢–° (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã)
    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
    const finalPrice = Math.round(basePrice * loadFactor);

    return {
      price: finalPrice,
      transport: transport.name,
      distance: distance,
      deliveryType: priceCategory,
      pricePerKm: Math.round(finalPrice / distance),
      deliveryTime: distance <= 100 ? '1 –¥–µ–Ω—å' : '1-2 –¥–Ω—è',
      details: {
        basePrice: transport.minPrice,
        distanceCoeff: loadFactor, // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏
        loadFactor: loadFactor,
        transportCoeff: 1.0, // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫ –≤—Å–µ–≥–¥–∞ 1.0
        weight: weight,
        volume: volume,
        loadPercent: Math.round((weight / transport.maxWeight) * 100),
        volumePercent: volume ? Math.round((volume / transport.maxVolume) * 100) : 0,
        density: volume ? Math.round(weight / volume) : 0,
        isLocal: true,
        noConsolidated: true // –°–±–æ—Ä–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
      }
    };
  }

  // –ú–ï–ñ–†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ï –ü–ï–†–ï–í–û–ó–ö–ò - –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
  calculateInterregionalPrice(fromCity, toCity, weight, volume, distance, cargoType) {
    // –ù–û–í–ê–Ø –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –ë–∞–∑–∞ = —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ √ó —Ç–∞—Ä–∏—Ñ, –ù–û –Ω–µ –º–µ–Ω–µ–µ –º–∏–Ω–∏–º–∞–ª–∫–∏ –¢–°
    let pricePerKm;
    let distanceCategory;
    
    if (distance < 200) {
      // –ë–õ–ò–ñ–ù–ò–ô –ü–û–î–ú–û–°–ö–û–í–ù–´–ô - —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π —Ç–∞—Ä–∏—Ñ
      pricePerKm = 35;
      distanceCategory = '–ë–ª–∏–∂–Ω–∏–π (–¥–æ 200–∫–º)';
    } else if (distance < 300) {
      // –ë–õ–ò–ó–ö–ò–ô –†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ô - –≤—ã—Å–æ–∫–∏–π —Ç–∞—Ä–∏—Ñ (–Ø—Ä–æ—Å–ª–∞–≤–ª—å, –¢—É–ª–∞)
      pricePerKm = 28;
      distanceCategory = '–ë–ª–∏–∑–∫–∏–π (200-300–∫–º)';
    } else if (distance < 500) {
      // –°–†–ï–î–ù–ò–ô –†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ô - —Å—Ä–µ–¥–Ω–∏–π —Ç–∞—Ä–∏—Ñ (–í–æ—Ä–æ–Ω–µ–∂, –ù–∏–∂–Ω–∏–π)
      pricePerKm = 22;
      distanceCategory = '–°—Ä–µ–¥–Ω–∏–π (300-500–∫–º)';
    } else if (distance < 800) {
      // –î–ê–õ–¨–ù–ò–ô –ú–ï–ñ–†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ô - —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π (–°–∞—Ä–∞–Ω—Å–∫, –ö–∞–∑–∞–Ω—å)
      pricePerKm = 18;
      distanceCategory = '–î–∞–ª—å–Ω–∏–π (500-800–∫–º)';
    } else if (distance < 1000) {
      // –î–ê–õ–¨–ù–û–ë–û–ô–ù–´–ô - —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π (–°–ü–±, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥)
      pricePerKm = 15;
      distanceCategory = '–î–∞–ª—å–Ω–æ–±–æ–π–Ω—ã–π (800-1000–∫–º)';
    } else {
      // –°–í–ï–†–•–î–ê–õ–¨–ù–ò–ô - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
      pricePerKm = 18; // –ü–æ–≤—ã—à–∞–µ–º —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
      distanceCategory = '–°–≤–µ—Ä—Ö–¥–∞–ª—å–Ω–∏–π (1000–∫–º+)';
    }

    // –ü–æ–¥–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    const optimalTransport = this.selectOptimalTransport(weight, volume);
    const transport = this.transportTypes[optimalTransport];

    // –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ë–∞–∑–∞ = —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ √ó —Ç–∞—Ä–∏—Ñ
    let basePrice = distance * pricePerKm;

    // –ñ–ï–°–¢–ö–ò–ï –ú–ò–ù–ò–ú–ê–õ–ö–ò –ü–û –¢–ò–ü–ê–ú –¢–° —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–ª–µ—á (–¥–æ 200–∫–º)
    const transportMinPrices = {
      gazelle: distance < 200 ? 20000 : transport.minPriceRegion,
      threeTon: distance < 200 ? 25000 : transport.minPriceRegion,
      fiveTon: distance < 200 ? 30000 : transport.minPriceRegion,
      tenTon: distance < 200 ? 37000 : transport.minPriceRegion,
      truck: distance < 200 ? 42000 : transport.minPriceRegion
    };

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    const minPrice = transportMinPrices[optimalTransport];
    basePrice = Math.max(basePrice, minPrice);

    // –î–û–ë–ê–í–õ–Ø–ï–ú ‚ÇΩ/–ö–ú –î–û–ü–õ–ê–¢–´ –ü–û –¢–ò–ü–£ –¢–° –ö –ú–ï–ñ–†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ú
    const interregionalKmRates = {
      gazelle: 30,   // 30‚ÇΩ/–∫–º –¥–ª—è –≥–∞–∑–µ–ª–∏
      threeTon: 40,  // 40‚ÇΩ/–∫–º –¥–ª—è 3-—Ç–æ–Ω–Ω–∏–∫–∞
      fiveTon: 50,   // 50‚ÇΩ/–∫–º –¥–ª—è 5-—Ç–æ–Ω–Ω–∏–∫–∞  
      tenTon: 62,    // 62‚ÇΩ/–∫–º –¥–ª—è 10-—Ç–æ–Ω–Ω–∏–∫–∞
      truck: 70      // 70‚ÇΩ/–∫–º –¥–ª—è —Ñ—É—Ä—ã
    };
    
    const kmRate = interregionalKmRates[optimalTransport] || 15;
    const kmSurcharge = distance * kmRate;

    // –°–ë–û–†–ù–´–ï –ì–†–£–ó–´ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–∂—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏ –ù–ï –¥–ª—è —Ñ—É—Ä!)
    const isConsolidated = (cargoType === '—Å–±–æ—Ä–Ω—ã–π' || cargoType === 'consolidated') && transport.allowConsolidated;

    // –î–ª—è —Å–±–æ—Ä–Ω—ã—Ö: –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–ª–∞—Ç—É –ø–æ —Ç–∏–ø—É –¢–° (kmSurcharge), —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –∏ –º–∏–Ω–∏–º–∞–ª–∫–∞
    if (!isConsolidated) {
      basePrice += kmSurcharge;
    }
    
    if (isConsolidated) {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–±–æ—Ä–Ω—ã–π –≥—Ä—É–∑ –¥–µ—à–µ–≤–ª–µ, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ —Ä–∞–∑—É–º–Ω–æ–π –º–∏–Ω–∏–º–∞–ª–∫–∏
      const consolidatedPrice = basePrice * 0.65; // –°–∫–∏–¥–∫–∞ 35%
      const minConsolidatedPrice = transport.minPriceRegion * 0.8; // –ú–∏–Ω–∏–º—É–º 80% –æ—Ç –º–∏–Ω–∏–º–∞–ª–∫–∏ –¢–°
      basePrice = Math.max(consolidatedPrice, minConsolidatedPrice);
    }

    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ –º–∞—Ä—à—Ä—É—Ç–∞
    const loadFactor = this.calculateLoadFactor(weight, volume, transport);
    const routeFactor = this.calculateRouteFactor(fromCity, toCity);
    const cargoFactor = this.getCargoFactor(cargoType);

    // –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢ –ó–û–ù–´ –î–û–°–¢–ê–í–ö–ò (–≤–º–µ—Å—Ç–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –¢–°)
    let zoneCoeff;
    if (distance < 70) {
      zoneCoeff = 1.6;  // –ì–æ—Ä–æ–¥—Å–∫–∏–µ - —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –∫–æ—ç—Ñ—Ñ
    } else if (distance < 200) {
      zoneCoeff = 1.4;  // –û–±–ª–∞—Å—Ç–Ω—ã–µ - –≤—ã—Å–æ–∫–∏–π –∫–æ—ç—Ñ—Ñ
    } else if (distance < 400) {
      zoneCoeff = 1.3;  // –ú–µ–∂—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ - –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π –∫–æ—ç—Ñ—Ñ
    } else if (distance < 800) {
      zoneCoeff = 1.1;  // –°—Ä–µ–¥–Ω–µ–µ –ø–ª–µ—á–æ - –Ω–µ–±–æ–ª—å—à–∞—è –Ω–∞–¥–±–∞–≤–∫–∞
    } else if (distance < 1000) {
      zoneCoeff = 1.0;  // –î–ª–∏–Ω–Ω–æ–µ –ø–ª–µ—á–æ - –±–∞–∑–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ
    } else {
      zoneCoeff = 1.05; // –°–≤–µ—Ä—Ö–¥–∞–ª—å–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã - –Ω–µ–±–æ–ª—å—à–∞—è –Ω–∞–¥–±–∞–≤–∫–∞
    }
    
    const transportCoeff = zoneCoeff; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
    const finalPrice = Math.round(basePrice * loadFactor * routeFactor * cargoFactor * transportCoeff);

    return {
      price: finalPrice,
      transport: transport.name,
      distance: distance,
      deliveryType: distanceCategory,
      pricePerKm: Math.round(finalPrice / distance),
      deliveryTime: this.calculateDeliveryTime(distance, isConsolidated),
      details: {
        basePrice: basePrice,
        minPrice: minPrice,
        pricePerKm: pricePerKm,
        distanceCoeff: loadFactor, // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–∫ distanceCoeff
        loadFactor: loadFactor,
        routeFactor: routeFactor,
        cargoFactor: cargoFactor,
        transportCoeff: transportCoeff,
        weight: weight,
        volume: volume,
        loadPercent: Math.round((weight / transport.maxWeight) * 100),
        volumePercent: volume ? Math.round((volume / transport.maxVolume) * 100) : 0,
        density: volume ? Math.round(weight / volume) : 0,
        isLocal: false,
        isConsolidated: isConsolidated
      }
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–¥–∏–Ω —Ä–µ–≥–∏–æ–Ω
  isSameRegion(city1, city2) {
    for (const [region, cities] of Object.entries(this.regions)) {
      const hasBoth = cities.includes(city1) && cities.includes(city2);
      if (hasBoth) return true;
    }
    return false;
  }

  // –ü–æ–¥–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø–æ –≤–µ—Å—É –∏ –æ–±—ä–µ–º—É
  selectOptimalTransport(weight, volume) {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ø–æ –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç–∏ (–æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É)
    const sortedTransports = Object.entries(this.transportTypes)
      .sort((a, b) => a[1].maxWeight - b[1].maxWeight);

    for (const [key, transport] of sortedTransports) {
      if (weight <= transport.maxWeight) {
        if (volume && volume > 0) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–º, –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞
          if (volume <= transport.maxVolume) {
            return key; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
          }
        } else {
          // –ï—Å–ª–∏ –æ–±—ä–µ–º –Ω–µ —É–∫–∞–∑–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º –ø–æ –≤–µ—Å—É
          return key;
        }
      }
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É—Ä—É
    return 'truck';
  }

  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏
  calculateLoadFactor(weight, volume, transport) {
    const weightUsage = weight / transport.maxWeight;
    
    // –ï—Å–ª–∏ –æ–±—ä–µ–º —É–∫–∞–∑–∞–Ω, —É—á–∏—Ç—ã–≤–∞–µ–º –µ–≥–æ
    if (volume && volume > 0) {
      const volumeUsage = volume / transport.maxVolume;
      
      // –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –±–µ—Ä–µ–º —Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –ë–û–õ–¨–®–ï –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞—à–∏–Ω—É
      // –≠—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ª–∏–º–∏—Ç–∏—Ä—É–µ—Ç (–≤–µ—Å –∏–ª–∏ –æ–±—ä–µ–º)
      const limitingUsage = Math.max(weightUsage, volumeUsage);
      
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–≥—Ä—É–∑ –ø–æ –ª—é–±–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É - –¥–æ–ø–ª–∞—Ç–∞
      if (limitingUsage > 1.0) {
        return 1.0 + (limitingUsage - 1.0) * 0.3; // –¥–æ–ø–ª–∞—Ç–∞ –∑–∞ –ø–µ—Ä–µ–≥—Ä—É–∑
      }
      
      // –ß–µ–º –í–´–®–ï –∑–∞–≥—Ä—É–∑–∫–∞, —Ç–µ–º –î–ï–®–ï–í–õ–ï (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ)
      if (limitingUsage > 0.8) return 1.0;   // 80%+ - –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
      if (limitingUsage > 0.6) return 1.1;   // 60-80% - –Ω–µ–±–æ–ª—å—à–∞—è –¥–æ–ø–ª–∞—Ç–∞
      if (limitingUsage > 0.4) return 1.25;  // 40-60% - —Å—Ä–µ–¥–Ω—è—è –¥–æ–ø–ª–∞—Ç–∞
      if (limitingUsage > 0.2) return 1.4;   // 20-40% - –±–æ–ª—å—à–∞—è –¥–æ–ø–ª–∞—Ç–∞
      return 1.6;  // –º–µ–Ω–µ–µ 20% - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ø–ª–∞—Ç–∞
    } else {
      // –ï—Å–ª–∏ –æ–±—ä–µ–º –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –≤–µ—Å—É
      if (weightUsage > 1.0) return 1.0 + (weightUsage - 1.0) * 0.3; // –ø–µ—Ä–µ–≥—Ä—É–∑
      if (weightUsage > 0.8) return 1.0;   // 80%+ - –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
      if (weightUsage > 0.6) return 1.1;   // 60-80%
      if (weightUsage > 0.4) return 1.2;   // 40-60%
      if (weightUsage > 0.2) return 1.35;  // 20-40%
      return 1.5;  // –º–µ–Ω–µ–µ 20% - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ø–ª–∞—Ç–∞
    }
  }

  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞
  calculateRouteFactor(from, to) {
    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const popularRoutes = [
      ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'],
      ['–ú–æ—Å–∫–≤–∞', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥'],
      ['–ú–æ—Å–∫–≤–∞', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'],
      ['–ú–æ—Å–∫–≤–∞', '–ö–∞–∑–∞–Ω—å']
    ];

    for (const route of popularRoutes) {
      if ((route.includes(from) && route.includes(to))) {
        return 0.9;  // —Å–∫–∏–¥–∫–∞ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
      }
    }

    // –û–±—Ä–∞—Ç–∫–∞ –¥–µ—à–µ–≤–ª–µ
    if (to === '–ú–æ—Å–∫–≤–∞' || to === '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥') {
      return 0.95;
    }

    return 1.0;
  }

  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–∏–ø–∞ –≥—Ä—É–∑–∞
  getCargoFactor(cargoType) {
    const factors = {
      'general': 1.0,      // –æ–±—ã—á–Ω—ã–π
      'fragile': 1.3,      // —Ö—Ä—É–ø–∫–∏–π
      'valuable': 1.5,     // —Ü–µ–Ω–Ω—ã–π
      'dangerous': 1.8,    // –æ–ø–∞—Å–Ω—ã–π
      'perishable': 1.4,   // —Å–∫–æ—Ä–æ–ø–æ—Ä—Ç—è—â–∏–π—Å—è
      'oversized': 1.6     // –Ω–µ–≥–∞–±–∞—Ä–∏—Ç
    };
    return factors[cargoType] || 1.0;
  }

  // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
  calculateDeliveryTime(distance, isConsolidated = false) {
    let baseTime;
    if (distance < 500) baseTime = '1-2 –¥–Ω—è';
    else if (distance < 1000) baseTime = '2-3 –¥–Ω—è';
    else if (distance < 2000) baseTime = '3-4 –¥–Ω—è';
    else if (distance < 3000) baseTime = '4-5 –¥–Ω–µ–π';
    else baseTime = '5-7 –¥–Ω–µ–π';
    
    // –°–±–æ—Ä–Ω—ã–π –≥—Ä—É–∑ +30% –∫ –≤—Ä–µ–º–µ–Ω–∏
    if (isConsolidated) {
      const timeMap = {
        '1-2 –¥–Ω—è': '2-3 –¥–Ω—è',
        '2-3 –¥–Ω—è': '3-4 –¥–Ω—è', 
        '3-4 –¥–Ω—è': '4-5 –¥–Ω–µ–π',
        '4-5 –¥–Ω–µ–π': '5-7 –¥–Ω–µ–π',
        '5-7 –¥–Ω–µ–π': '7-9 –¥–Ω–µ–π'
      };
      return timeMap[baseTime] || baseTime;
    }
    
    return baseTime;
  }

  // –†–∞—Å—á–µ—Ç –ø–æ–ª–Ω–æ–π –º–∞—à–∏–Ω—ã –¥–ª—è –≤–Ω—É—Ç—Ä–∏—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö
  async calculateFullTruckPrice(from, to) {
    const distance = await this.distanceAPI.getDistance(from, to) || 50;
    const basePrice = 20000;  // –º–∏–Ω–∏–º—É–º –¥–ª—è —Ñ—É—Ä—ã
    const kmPrice = distance < 50 ? 500 : 200;
    return Math.max(basePrice, distance * kmPrice);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ API (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!)
  async getDistance(from, to) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –±–∞–∑—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      const staticRoutes = {
        // –û–°–ù–û–í–ù–´–ï –ú–ï–ñ–†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ï –ú–ê–†–®–†–£–¢–´
        '–ú–æ—Å–∫–≤–∞-–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 700,
        '–ú–æ—Å–∫–≤–∞-–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': 400,
        '–ú–æ—Å–∫–≤–∞-–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 1400,
        '–ú–æ—Å–∫–≤–∞-–ö–∞–∑–∞–Ω—å': 800,
        '–ú–æ—Å–∫–≤–∞-–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É': 1100,
        '–ú–æ—Å–∫–≤–∞-–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 3300,
        '–ú–æ—Å–∫–≤–∞-–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä': 1200,
        '–ú–æ—Å–∫–≤–∞-–¢—é–º–µ–Ω—å': 2100,
        '–ú–æ—Å–∫–≤–∞-–í–æ—Ä–æ–Ω–µ–∂': 500,
        '–ú–æ—Å–∫–≤–∞-–°–∞–º–∞—Ä–∞': 1000,
        '–ú–æ—Å–∫–≤–∞-–£—Ñ–∞': 1200,
        '–ú–æ—Å–∫–≤–∞-–ß–µ–ª—è–±–∏–Ω—Å–∫': 1800,
        '–ú–æ—Å–∫–≤–∞-–ü–µ—Ä–º—å': 1400,
        '–ú–æ—Å–∫–≤–∞-–í–æ–ª–≥–æ–≥—Ä–∞–¥': 900,
        '–°–ü–±-–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 1800,
        '–°–ü–±-–ö–∞–∑–∞–Ω—å': 1200,
        '–°–ü–±-–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': 1000,
        
        // WB –°–ö–õ–ê–î–´ - –ú–û–°–ö–û–í–°–ö–ò–ô –†–ï–ì–ò–û–ù
        '–ú–æ—Å–∫–≤–∞-–ö–æ–ª–µ–¥–∏–Ω–æ': 25,
        '–ú–æ—Å–∫–≤–∞-–ü–æ–¥–æ–ª—å—Å–∫': 40,
        '–ú–æ—Å–∫–≤–∞-–ë–µ–ª—ã–µ –°—Ç–æ–ª–±—ã': 50,
        '–ú–æ—Å–∫–≤–∞-–†–∞–¥—É–º–ª—è': 60,
        '–ú–æ—Å–∫–≤–∞-–ü—É—à–∫–∏–Ω–æ': 35,
        '–ú–æ—Å–∫–≤–∞-–í—ë—à–∫–∏': 30,
        '–ú–æ—Å–∫–≤–∞-–ß–µ—Ö–æ–≤': 55,
        '–ú–æ—Å–∫–≤–∞-–û–±—É—Ö–æ–≤–æ': 45,
        '–ú–æ—Å–∫–≤–∞-–°—ã–Ω–∫–æ–≤–æ': 50,
        
        // –†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ï –ú–ê–†–®–†–£–¢–´
        '–ú–æ—Å–∫–≤–∞-–¢–≤–µ—Ä—å': 170,
        '–ú–æ—Å–∫–≤–∞-–¢—É–ª–∞': 190,
        '–ú–æ—Å–∫–≤–∞-–†—è–∑–∞–Ω—å': 250,
        '–ú–æ—Å–∫–≤–∞-–ö–∞–ª—É–≥–∞': 160,
        '–ú–æ—Å–∫–≤–∞-–°–º–æ–ª–µ–Ω—Å–∫': 400,
        '–ú–æ—Å–∫–≤–∞-–Ø—Ä–æ—Å–ª–∞–≤–ª—å': 260,
        '–ú–æ—Å–∫–≤–∞-–í–ª–∞–¥–∏–º–∏—Ä': 190
      };

      const routeKey = `${from}-${to}`;
      const reverseKey = `${to}-${from}`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –±–∞–∑—É
      const staticDistance = staticRoutes[routeKey] || staticRoutes[reverseKey];
      if (staticDistance) {
        return staticDistance;
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –±–∞–∑–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º API
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –∞–≤—Ç–æ–¥–∏—Å–ø–µ—Ç—á–µ—Ä.—Ä—É
      const response = await fetch(`https://www.avtodispetcher.ru/distance/api/?from=${encodeURIComponent(from)}&to=${encodeURIComponent(to)}&format=json`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        if (data && data.distance && data.distance > 0) {
          return Math.round(data.distance);
        }
      }

      // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
      return this.calculateApproximateDistance(from, to);

    } catch (error) {
      return this.calculateApproximateDistance(from, to);
    }
  }

  // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º (fallback)
  calculateApproximateDistance(from, to) {
    // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –ø–æ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º –æ–∫—Ä—É–≥–∞–º
    const regionDistances = {
      '–ú–æ—Å–∫–≤–∞': { '–°–ü–±': 700, '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 1400, '–ö–∞–∑–∞–Ω—å': 800, '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä': 1200 },
      '–°–ü–±': { '–ú–æ—Å–∫–≤–∞': 700, '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 1800, '–ö–∞–∑–∞–Ω—å': 1200 },
      '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': { '–ú–æ—Å–∫–≤–∞': 1400, '–°–ü–±': 1800, '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 1800 },
      '–ö–∞–∑–∞–Ω—å': { '–ú–æ—Å–∫–≤–∞': 800, '–°–ü–±': 1200, '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 1000 },
      '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä': { '–ú–æ—Å–∫–≤–∞': 1200, '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É': 300 },
      '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': { '–ú–æ—Å–∫–≤–∞': 3300, '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 1800 }
    };

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤
    const normalizeCity = (city) => {
      if (city.includes('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥') || city.includes('–°–ü–±')) return '–°–ü–±';
      if (city.includes('–ú–æ—Å–∫–≤')) return '–ú–æ—Å–∫–≤–∞';
      if (city.includes('–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥')) return '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥';
      if (city.includes('–ö–∞–∑–∞–Ω')) return '–ö–∞–∑–∞–Ω—å';
      if (city.includes('–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä')) return '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä';
      if (city.includes('–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫')) return '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫';
      return city;
    };

    const fromNorm = normalizeCity(from);
    const toNorm = normalizeCity(to);

    if (regionDistances[fromNorm] && regionDistances[fromNorm][toNorm]) {
      return regionDistances[fromNorm][toNorm];
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    return 500;
  }

  // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø UI
  init() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const form = document.getElementById('calculatorForm');
    if (!form) {
      return;
    }

    // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ
    this.setupAutocomplete();
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
  handleCalculation() {
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const fromCity = document.getElementById('fromCity')?.value || '';
    const toCity = document.getElementById('toCity')?.value || '';
    const weight = parseFloat(document.getElementById('weight')?.value || 0);
    const volume = parseFloat(document.getElementById('volume')?.value || 0);
    const isConsolidated = document.getElementById('isConsolidated')?.checked || false;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!fromCity || !toCity || !weight) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –∏ –≤–µ—Å –≥—Ä—É–∑–∞!');
      return;
    }
    
    // –û–±—ä–µ–º –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π, –Ω–æ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω
    if (volume && volume <= 0) {
      alert('–û–±—ä–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0!');
      return;
    }

    // –†–∞—Å—á–µ—Ç
    const cargoType = isConsolidated ? 'consolidated' : 'general';
    this.calculatePrice(fromCity, toCity, weight, volume, cargoType)
      .then(result => {
        this.showResult(result);
      })
      .catch(error => {
        alert('–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞: ' + error.message);
      });
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  showResult(result) {
    const resultDiv = document.getElementById('calculatorResult') || this.createResultDiv();
    
    if (result.error) {
      resultDiv.innerHTML = `
        <div class="alert alert-warning">
          <h4>‚ö†Ô∏è ${result.message}</h4>
          ${result.alternativePrice ? 
            `<p>–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã: <strong>${result.alternativePrice.toLocaleString()} ‚ÇΩ</strong></p>` : ''
          }
          <p>–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è: <a href="tel:+79162720932">+7 (916) 272-09-32</a></p>
        </div>
      `;
    } else {
      resultDiv.innerHTML = `
        <div class="calc-success">
          <h3>üéØ –†–∞—Å—á–µ—Ç –≥–æ—Ç–æ–≤!</h3>
          
          <div class="price-block">
            <div class="price-main">
              <span class="price-label">–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫–∏:</span>
              <span class="price-value">${result.price.toLocaleString()} ‚ÇΩ</span>
            </div>
            <div class="price-info">
              <p>üöõ ${result.transport}</p>
              <p>üìÖ ${result.deliveryTime}</p>
            </div>
          </div>

          <div class="cta-buttons">
            <button class="btn btn-primary btn-lg" onclick="smartCalculatorV2.showLeadForm()">
              üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
            </button>
            <button class="btn btn-secondary" onclick="smartCalculatorV2.callManager()">
              üìû +7 (916) 272-09-32
            </button>
          </div>

          <div class="disclaimer">
            <p><small>* –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º</small></p>
          </div>
        </div>
      `;
    }

    // –°–∫—Ä–æ–ª–ª–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    resultDiv.style.display = 'block';
    resultDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ div –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  createResultDiv() {
    const div = document.createElement('div');
    div.id = 'calculatorResult';
    div.className = 'calculator-result';
    
    const form = document.getElementById('calculatorForm');
    if (form) {
      form.parentNode.insertBefore(div, form.nextSibling);
    } else {
      // Fallback - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
      const calcSection = document.querySelector('.calculator-section, #calculator');
      if (calcSection) {
        calcSection.appendChild(div);
      }
    }
    
    return div;
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Å–±–æ—Ä–∞ –ª–∏–¥–æ–≤
  showLeadForm() {
    const leadForm = document.getElementById('leadForm');
    if (leadForm) {
      leadForm.style.display = 'block';
      leadForm.scrollIntoView({ behavior: 'smooth', block: 'center' });
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
      this.fillLeadFormData();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
      this.setupLeadFormHandler();
    }
  }

  // –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
  fillLeadFormData() {
    const fromCity = document.getElementById('fromCity')?.value || '';
    const toCity = document.getElementById('toCity')?.value || '';
    const weight = document.getElementById('weight')?.value || '';
    const volume = document.getElementById('volume')?.value || '';
    const transport = document.getElementById('transport')?.value || '';
    
    const comment = document.getElementById('leadComment');
    if (comment) {
      comment.value = `–ú–∞—Ä—à—Ä—É—Ç: ${fromCity} ‚Üí ${toCity}\n–í–µ—Å: ${weight} –∫–≥\n–û–±—ä–µ–º: ${volume} –º¬≥\n–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${transport}`;
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–æ—Ä–º—ã –ª–∏–¥–æ–≤
  setupLeadFormHandler() {
    const form = document.getElementById('calculatorLeadForm');
    if (form) {
      form.addEventListener('submit', (e) => {
        e.preventDefault();
        this.handleLeadFormSubmit(e);
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –ª–∏–¥–æ–≤
  handleLeadFormSubmit(e) {
    const formData = new FormData(e.target);
    const data = {
      name: formData.get('name'),
      phone: formData.get('phone'),
      email: formData.get('email'),
      comment: formData.get('comment'),
      timestamp: new Date().toISOString(),
      source: 'calculator'
    };

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    const submitBtn = e.target.querySelector('button[type="submit"]');
    const btnText = submitBtn.querySelector('.btn-text');
    const btnLoading = submitBtn.querySelector('.btn-loading');
    
    btnText.style.display = 'none';
    btnLoading.style.display = 'inline';

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (–º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å form-handler.js)
    this.sendLeadData(data)
      .then(() => {
        this.showLeadSuccess();
      })
      .catch((error) => {
        this.showLeadError(error);
      })
      .finally(() => {
        btnText.style.display = 'inline';
        btnLoading.style.display = 'none';
      });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–∞
  async sendLeadData(data) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ telegram-sender.js
    if (window.sendToTelegram) {
      return window.sendToTelegram(data, 'calculator');
    }
    
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å father_bot.py —á–µ—Ä–µ–∑ Telegram
    const promoCode = document.getElementById('promoCode')?.textContent || 'GOST10';
    const message = `üéØ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:\n\nüë§ –ò–º—è: ${data.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}\nüìß Email: ${data.email}\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${data.comment}\nüéÅ –ü—Ä–æ–º–æ–∫–æ–¥: ${promoCode}\n‚è∞ –ò—Å—Ç–æ—á–Ω–∏–∫: —Ñ–æ—Ä–º–∞ –ª–∏–¥–æ–≤`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ father_bot –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    window.open(`https://t.me/father_bot?start=${encodeURIComponent(message)}`, '_blank');
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å (–±–µ–∑ –¥–∞–Ω–Ω—ã—Ö)
    return Promise.resolve();
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
  showLeadSuccess() {
    const leadForm = document.getElementById('leadForm');
    if (leadForm) {
      leadForm.innerHTML = `
        <div class="lead-success">
          <div class="success-icon">‚úÖ</div>
          <h3>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</h3>
          <p>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.</p>
          <button class="btn btn-primary" onclick="location.reload()">
            –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ—â–µ —Ä–∞–∑
          </button>
        </div>
      `;
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
  showLeadError(error) {
    const leadForm = document.getElementById('leadForm');
    if (leadForm) {
      leadForm.innerHTML = `
        <div class="lead-error">
          <div class="error-icon">‚ùå</div>
          <h3>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏</h3>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é: <a href="tel:+79162720932">+7 (916) 272-09-32</a></p>
          <button class="btn btn-primary" onclick="location.reload()">
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      `;
    }
  }

  // –ö–Ω–æ–ø–∫–∞ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  orderNow() {
    this.showLeadForm();
  }

  // –ö–Ω–æ–ø–∫–∞ –ø–æ–∑–≤–æ–Ω–∏—Ç—å
  callManager() {
    window.location.href = 'tel:+79162720932';
  }

  // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤
  setupAutocomplete() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ cities-simple.js
    if (typeof POPULAR_CITIES !== 'undefined') {
      // –î–æ–±–∞–≤–ª—è–µ–º datalist —Å –ø–æ–ª–Ω–æ–π –±–∞–∑–æ–π
      const datalist = document.createElement('datalist');
      datalist.id = 'cities-list';
      POPULAR_CITIES.forEach(city => {
        const option = document.createElement('option');
        option.value = city;
        datalist.appendChild(option);
      });
      document.body.appendChild(datalist);

      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∏–Ω–ø—É—Ç–∞–º
      document.getElementById('fromCity')?.setAttribute('list', 'cities-list');
      document.getElementById('toCity')?.setAttribute('list', 'cities-list');
    } else {
      // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –±–∞–∑—É –µ—Å–ª–∏ cities-simple.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
      const cities = [
        '–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
        '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ö–∞–∑–∞–Ω—å', '–ß–µ–ª—è–±–∏–Ω—Å–∫', '–°–∞–º–∞—Ä–∞', '–û–º—Å–∫',
        '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', '–£—Ñ–∞', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–í–æ—Ä–æ–Ω–µ–∂', '–ü–µ—Ä–º—å'
      ];

      const datalist = document.createElement('datalist');
      datalist.id = 'cities-list';
      cities.forEach(city => {
        const option = document.createElement('option');
        option.value = city;
        datalist.appendChild(option);
      });
      document.body.appendChild(datalist);

      document.getElementById('fromCity')?.setAttribute('list', 'cities-list');
      document.getElementById('toCity')?.setAttribute('list', 'cities-list');
    }
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
  window.smartCalculatorV2 = new SmartCalculatorV2();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Exit-Intent Pop-up
  initExitIntentPopup();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Sticky Header
  initStickyHeader();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ —Ç–∞–π–º–µ—Ä–∞
  initPromoTimer();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
  updatePromoTimer();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î
  initPrivacyConsent();
});

// Exit-Intent Pop-up –ª–æ–≥–∏–∫–∞
function initExitIntentPopup() {
  let hasShownPopup = false;
  let mouseLeaveCount = 0;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ª–∏ —É–∂–µ pop-up –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
  if (sessionStorage.getItem('exitPopupShown')) {
    return;
  }
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
  document.addEventListener('mouseleave', (e) => {
    if (e.clientY <= 0 && !hasShownPopup && mouseLeaveCount === 0) {
      mouseLeaveCount++;
      setTimeout(() => {
        showExitPopup();
      }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞
    }
  });
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ Escape
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !hasShownPopup) {
      showExitPopup();
    }
  });
}

// –ü–æ–∫–∞–∑–∞—Ç—å Exit-Intent Pop-up
function showExitPopup() {
  const popup = document.getElementById('exitIntentPopup');
  if (popup) {
    popup.classList.add('show');
    sessionStorage.setItem('exitPopupShown', 'true');
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–æ—Ä–º—ã
    setupExitFormHandler();
  }
}

// –ó–∞–∫—Ä—ã—Ç—å Exit-Intent Pop-up
function closeExitPopup() {
  const popup = document.getElementById('exitIntentPopup');
  if (popup) {
    popup.classList.remove('show');
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–æ—Ä–º—ã Exit-Intent
function setupExitFormHandler() {
  const form = document.getElementById('exitLeadForm');
  if (form) {
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      handleExitFormSubmit(e);
    });
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã Exit-Intent
function handleExitFormSubmit(e) {
  const formData = new FormData(e.target);
  const data = {
    name: formData.get('name'),
    phone: formData.get('phone'),
    email: formData.get('email'),
    promoCode: 'WELCOME10',
    source: 'exit-intent-popup',
    timestamp: new Date().toISOString()
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  const submitBtn = e.target.querySelector('button[type="submit"]');
  const originalText = submitBtn.textContent;
  submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
  submitBtn.disabled = true;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
  sendExitLeadData(data)
    .then(() => {
      showExitSuccess();
    })
    .catch((error) => {
      showExitError(error);
    })
    .finally(() => {
      submitBtn.textContent = originalText;
      submitBtn.disabled = false;
    });
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö Exit-Intent –ª–∏–¥–∞
async function sendExitLeadData(data) {
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –∫ –¥–∞–Ω–Ω—ã–º
  data.promoCode = 'WELCOME10';
  data.source = 'Exit-Intent Pop-up';
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ telegram-sender.js
  if (window.sendToTelegram) {
    return window.sendToTelegram(data, 'exitIntent');
  }
  
  // –ï—Å–ª–∏ telegram-sender.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
  try {
    const botToken = '7999458907:AAGOAjQLmEZuT4SFx4Upl1GjuXO0yFuWok8';
    const chatId = '399711407';
    
    const message = `üéÅ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å exit-intent:\n\nüë§ –ò–º—è: ${data.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}\nüìß Email: ${data.email}\nüéÅ –ü—Ä–æ–º–æ–∫–æ–¥: ${data.promoCode}\n‚è∞ –ò—Å—Ç–æ—á–Ω–∏–∫: ${data.source}`;
    
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: chatId, text: message })
    });
    
    if (response.ok) {
  
      return Promise.resolve();
    }
  } catch (error) {
  }
  
  return Promise.resolve();
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É Exit-Intent
function showExitSuccess() {
  const popup = document.getElementById('exitIntentPopup');
  if (popup) {
    popup.innerHTML = `
      <div class="exit-popup-content">
        <div class="exit-popup-header">
          <h3>‚úÖ –£—Å–ø–µ—à–Ω–æ!</h3>
          <button class="exit-popup-close" onclick="closeExitPopup()">√ó</button>
        </div>
        <div class="exit-popup-body">
          <div class="exit-popup-icon">üéâ</div>
          <h4>–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!</h4>
          <p>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º —Å–∫–∏–¥–∫—É 10% –Ω–∞ –ø–µ—Ä–≤—É—é –ø–µ—Ä–µ–≤–æ–∑–∫—É.</p>
          <div class="exit-popup-footer">
            <small>–ü—Ä–æ–º–æ–∫–æ–¥: <strong>WELCOME10</strong></small>
          </div>
        </div>
      </div>
    `;
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ Exit-Intent
function showExitError(error) {
  const popup = document.getElementById('exitIntentPopup');
  if (popup) {
    popup.innerHTML = `
      <div class="exit-popup-content">
        <div class="exit-popup-header">
          <h3>‚ùå –û—à–∏–±–∫–∞</h3>
          <button class="exit-popup-close" onclick="closeExitPopup()">√ó</button>
        </div>
        <div class="exit-popup-body">
          <div class="exit-popup-icon">üòî</div>
          <h4>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫</h4>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é: <a href="tel:+79162720932">+7 (916) 272-09-32</a></p>
          <p>–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ WhatsApp: <a href="https://wa.me/79162720932">–ù–∞–ø–∏—Å–∞—Ç—å</a></p>
        </div>
      </div>
    `;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = SmartCalculatorV2;
}

// Sticky Header –ª–æ–≥–∏–∫–∞
function initStickyHeader() {
  let lastScrollTop = 0;
  const stickyHeader = document.getElementById('stickyHeader');
  const header = document.getElementById('header');

  if (stickyHeader && header) {
    window.addEventListener('scroll', () => {
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      const headerHeight = header.offsetHeight;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º sticky header –ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∑–∞ –æ—Å–Ω–æ–≤–Ω–æ–π header
      if (scrollTop > headerHeight && scrollTop > lastScrollTop) {
        stickyHeader.classList.add('visible');
      } else if (scrollTop <= headerHeight || scrollTop < lastScrollTop) {
        stickyHeader.classList.remove('visible');
      }
    });
  }
}

// –ü—Ä–æ–º–æ–∫–æ–¥ –∏ —Ç–∞–π–º–µ—Ä –ª–æ–≥–∏–∫–∞
function initPromoTimer() {
  let timeLeft = 15 * 60; // 15 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  const timerMinutes = document.getElementById('timerMinutes');
  const timerSeconds = document.getElementById('timerSeconds');
  const promoSection = document.querySelector('.promo-section');

  if (!timerMinutes || !timerSeconds) {

    return;
  }

  const timer = setInterval(() => {
    const minutes = Math.floor(timeLeft / 60);
    const seconds = timeLeft % 60;

    timerMinutes.textContent = minutes.toString().padStart(2, '0');
    timerSeconds.textContent = seconds.toString().padStart(2, '0');

    timeLeft--;

    if (timeLeft < 0) {
      clearInterval(timer);
      hidePromoTimer();
    }
  }, 1000);
}

// –°–∫—Ä—ã—Ç—å —Ç–∞–π–º–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–∞
function hidePromoTimer() {
  const promoSection = document.querySelector('.promo-section');
  if (promoSection) {
    promoSection.style.display = 'none';
  }
}

// –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–∞
function updatePromoTimer() {
  const timerMinutes = document.getElementById('timerMinutes');
  const timerSeconds = document.getElementById('timerSeconds');
  
  if (timerMinutes && timerSeconds) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ localStorage
    const savedTime = localStorage.getItem('promoTimerEnd');
    if (savedTime) {
      const endTime = parseInt(savedTime);
      const now = Date.now();
      const timeLeft = Math.max(0, Math.floor((endTime - now) / 1000));
      
      if (timeLeft > 0) {
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        
        timerMinutes.textContent = minutes.toString().padStart(2, '0');
        timerSeconds.textContent = seconds.toString().padStart(2, '0');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        setTimeout(updatePromoTimer, 1000);
      } else {
        hidePromoTimer();
      }
    }
  }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function initPrivacyConsent() {
  const consentCheckbox = document.getElementById('privacyConsent');
  const submitBtn = document.getElementById('leadSubmitBtn') || document.getElementById('contactSubmitBtn');
  
  if (consentCheckbox && submitBtn) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    submitBtn.disabled = !consentCheckbox.checked;
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞
    consentCheckbox.addEventListener('change', function() {
      submitBtn.disabled = !this.checked;
      
      if (this.checked) {
        submitBtn.classList.remove('btn-disabled');
        submitBtn.classList.add('btn-primary');
      } else {
        submitBtn.classList.add('btn-disabled');
        submitBtn.classList.remove('btn-primary');
      }
    });
  }
}

// === CALCULATOR UI ===
// ===============================================
// –°–û–í–†–ï–ú–ï–ù–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–° –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê
// ===============================================

class CalculatorUI {
    constructor() {
        this.currentStep = 1;
        this.totalSteps = 3;
        this.init();
    }

    init() {
        this.bindEvents();
        this.updateProgress();
    }

    bindEvents() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —à–∞–≥–∞–º
        document.getElementById('nextStep1')?.addEventListener('click', () => this.nextStep());
        document.getElementById('nextStep2')?.addEventListener('click', () => this.nextStep());
        document.getElementById('prevStep2')?.addEventListener('click', () => this.prevStep());
        document.getElementById('prevStep3')?.addEventListener('click', () => this.prevStep());
        
        // –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
        document.getElementById('calculateButton')?.addEventListener('click', () => this.calculate());
        
        // –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
        document.getElementById('newCalculation')?.addEventListener('click', () => this.resetCalculator());
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
        this.setupFieldValidation();
    }

    nextStep() {
        if (this.validateCurrentStep()) {
            this.currentStep = Math.min(this.currentStep + 1, this.totalSteps);
            this.updateUI();
        }
    }

    prevStep() {
        this.currentStep = Math.max(this.currentStep - 1, 1);
        this.updateUI();
    }

    validateCurrentStep() {
        switch (this.currentStep) {
            case 1:
                return this.validateRoute();
            case 2:
                return this.validateCargo();
            default:
                return true;
        }
    }

    validateRoute() {
        const fromCity = document.getElementById('fromCity').value.trim();
        const toCity = document.getElementById('toCity').value.trim();
        
        if (!fromCity) {
            this.showError('fromCity', '–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
            return false;
        }
        
        if (!toCity) {
            this.showError('toCity', '–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è');
            return false;
        }
        
        if (fromCity.toLowerCase() === toCity.toLowerCase()) {
            this.showError('toCity', '–ì–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å');
            return false;
        }
        
        this.clearErrors();
        return true;
    }

    validateCargo() {
        const weight = document.getElementById('weight').value;
        
        if (!weight || weight <= 0) {
            this.showError('weight', '–£–∫–∞–∂–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞');
            return false;
        }
        
        if (weight > 20000) {
            this.showError('weight', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å: 20 —Ç–æ–Ω–Ω. –î–ª—è –±–æ–ª—å—à–∏—Ö –≥—Ä—É–∑–æ–≤ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º');
            return false;
        }
        
        this.clearErrors();
        return true;
    }

    showError(fieldId, message) {
        const field = document.getElementById(fieldId);
        const errorDiv = document.createElement('div');
        errorDiv.className = 'field-error';
        errorDiv.textContent = message;
        errorDiv.style.cssText = 'color: #dc2626; font-size: 0.875rem; margin-top: 0.25rem;';
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ—à–∏–±–∫—É
        const existingError = field.parentNode.querySelector('.field-error');
        if (existingError) {
            existingError.remove();
        }
        
        field.parentNode.appendChild(errorDiv);
        field.style.borderColor = '#dc2626';
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –æ—à–∏–±–∫–∏
        field.style.animation = 'shake 0.5s ease-in-out';
        setTimeout(() => {
            field.style.animation = '';
        }, 500);
    }

    clearErrors() {
        document.querySelectorAll('.field-error').forEach(error => error.remove());
        document.querySelectorAll('.form-control').forEach(field => {
            field.style.borderColor = '#e5e7eb';
        });
    }

    updateUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥–∏
        document.querySelectorAll('.calc-step').forEach((step, index) => {
            step.classList.toggle('active', index + 1 === this.currentStep);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        document.querySelectorAll('.progress-step').forEach((step, index) => {
            const stepNumber = index + 1;
            step.classList.remove('active', 'completed');
            
            if (stepNumber < this.currentStep) {
                step.classList.add('completed');
            } else if (stepNumber === this.currentStep) {
                step.classList.add('active');
            }
        });
        
        this.updateProgress();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        this.updateButtons();
    }

    updateProgress() {
        const progress = ((this.currentStep - 1) / (this.totalSteps - 1)) * 100;
        const progressFill = document.getElementById('progressFill');
        if (progressFill) {
            progressFill.style.width = `${progress}%`;
        }
    }

    updateButtons() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—á–µ—Ç–∞
        const calculateBtn = document.getElementById('calculateButton');
        if (calculateBtn) {
            const btnText = calculateBtn.querySelector('.btn-text');
            if (btnText) {
                btnText.textContent = '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å';
            }
        }
    }

    async calculate() {
        const calculateBtn = document.getElementById('calculateButton');
        const btnText = calculateBtn.querySelector('.btn-text');
        const btnLoading = calculateBtn.querySelector('.btn-loading');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        btnText.style.display = 'none';
        btnLoading.style.display = 'inline-flex';
        calculateBtn.disabled = true;
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            const formData = this.getFormData();
            
            // –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
            if (window.calculator) {
                const result = await window.calculator.calculatePrice(formData);
                this.showResult(result);
            } else {
                throw new Error('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }
        } catch (error) {
            this.showError('calculateButton', '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        } finally {
            // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            btnText.style.display = 'inline';
            btnLoading.style.display = 'none';
            calculateBtn.disabled = false;
        }
    }

    getFormData() {
        return {
            from: document.getElementById('fromCity').value.trim(),
            to: document.getElementById('toCity').value.trim(),
            weight: parseFloat(document.getElementById('weight').value) || 0,
            volume: parseFloat(document.getElementById('volume').value) || 0,
            isConsolidated: document.getElementById('isConsolidated').checked
        };
    }

    showResult(result) {
        const resultContainer = document.getElementById('calculatorResult');
        const resultPrice = document.getElementById('resultPrice');
        const resultSubtitle = document.getElementById('resultSubtitle');
        const resultDetails = document.getElementById('resultDetails');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        resultPrice.textContent = this.formatPrice(result.price);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        const route = `${result.from} ‚Üí ${result.to}`;
        resultSubtitle.textContent = `${route} ‚Ä¢ ${result.weight} –∫–≥`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
        resultDetails.innerHTML = this.generateResultDetails(result);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        resultContainer.classList.add('show');
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        resultContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        resultContainer.style.animation = 'fadeInScale 0.4s ease-out';
    }

    formatPrice(price) {
        return new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(price);
    }

    generateResultDetails(result) {
        const details = [];
        
        if (result.transport) {
            details.push(`
                <div class="detail-item">
                    <div class="detail-label">–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç</div>
                    <div class="detail-value">${result.transport}</div>
                </div>
            `);
        }
        
        if (result.distance) {
            details.push(`
                <div class="detail-item">
                    <div class="detail-label">–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ</div>
                    <div class="detail-value">${result.distance} –∫–º</div>
                </div>
            `);
        }
        
        if (result.deliveryTime) {
            details.push(`
                <div class="detail-item">
                    <div class="detail-label">–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏</div>
                    <div class="detail-value">${result.deliveryTime}</div>
                </div>
            `);
        }
        
        if (result.pricePerKm) {
            details.push(`
                <div class="detail-item">
                    <div class="detail-label">–¢–∞—Ä–∏—Ñ –∑–∞ –∫–º</div>
                    <div class="detail-value">${result.pricePerKm} ‚ÇΩ/–∫–º</div>
                </div>
            `);
        }
        
        return details.join('');
    }

    resetCalculator() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('calculatorForm').reset();
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        document.getElementById('calculatorResult').classList.remove('show');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É
        this.currentStep = 1;
        this.updateUI();
        
        // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏
        this.clearErrors();
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∞—á–∞–ª—É –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        document.getElementById('calculator').scrollIntoView({ behavior: 'smooth' });
    }

    setupFieldValidation() {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –≤–≤–æ–¥–µ
        const fields = ['fromCity', 'toCity', 'weight'];
        fields.forEach(fieldId => {
            const field = document.getElementById(fieldId);
            if (field) {
                field.addEventListener('input', () => {
                    const error = field.parentNode.querySelector('.field-error');
                    if (error) {
                        error.remove();
                        field.style.borderColor = '#e5e7eb';
                    }
                });
            }
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    setTimeout(() => {
        window.calculatorUI = new CalculatorUI();
    }, 100);
});

// CSS –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –æ—à–∏–±–æ–∫
const style = document.createElement('style');
style.textContent = `
    @keyframes shake {
        0%, 100% { transform: translateX(0); }
        25% { transform: translateX(-5px); }
        75% { transform: translateX(5px); }
    }
`;
document.head.appendChild(style);

// === DISTANCE API ===
// –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π —á–µ—Ä–µ–∑ API
// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å fallback

class DistanceAPI {
  constructor() {
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    this.providers = [
      'static',          // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –±–∞–∑–∞ - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
      'osrm',            // OSRM - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, —á–∞—Å—Ç–æ —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ –≤ –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö
      'openrouteservice',// OpenRouteService - 2000 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å
      'haversine'        // –§–æ—Ä–º—É–ª–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º - fallback
    ];
    
    // –ö—ç—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    this.cache = new Map();
    this.cacheKey = (from, to) => `${from}-${to}`;
    
    // –°—á–µ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    this.usage = {
      static: 0,
      openrouteservice: 0,
      osrm: 0,
      haversine: 0
    };
  }

  // –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
  async getDistance(fromCity, toCity) {
    const cacheKey = this.cacheKey(fromCity, toCity);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.cache.has(cacheKey)) {
      return this.cache.get(cacheKey);
    }

    let distance = null;
    let usedProvider = null;
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    for (const provider of this.providers) {
      try {
        distance = await this.getFromProvider(provider, fromCity, toCity);
        if (distance) {
          usedProvider = provider;
          this.usage[provider]++;
          break;
        }
      } catch (error) {
        continue;
      }
    }
    
    // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (distance) {
      this.cache.set(cacheKey, distance);
    } else {
    }
    
    return distance || 0;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  async getFromProvider(provider, fromCity, toCity) {
    switch (provider) {
      case 'static':
        return this.getFromStatic(fromCity, toCity);
      case 'openrouteservice':
        return await this.getFromOpenRouteService(fromCity, toCity);
      case 'osrm':
        return await this.getFromOSRM(fromCity, toCity);
      case 'haversine':
        return this.getFromHaversine(fromCity, toCity);
      default:
        return null;
    }
  }

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
  getFromStatic(fromCity, toCity) {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–ª—è Node.js
    try {
      if (typeof getRealDistance !== 'undefined') {
        return getRealDistance(fromCity, toCity);
      }
      
      // –î–ª—è Node.js –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const { getRealDistance: getDistance } = require('./real-distances.js');
      return getDistance(fromCity, toCity);
    } catch (error) {
      return null;
    }
  }

  // OpenRouteService API (2000 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å) - –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è (–º–µ—Ç—Ä—ã ‚Üí –∫–º)
  async getFromOpenRouteService(fromCity, toCity) {
    const coords = this.getCityCoords(fromCity, toCity);
    if (!coords) return null;

    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è –ª–µ–≥–∫–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    // –Ø–≤–Ω–æ —É–∫–∞–∂–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∫–º —á–µ—Ä–µ–∑ query, —Ç.–∫. –≤ POST body –º–æ–∂–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
    const url = 'https://api.openrouteservice.org/v2/directions/driving-car?units=km';
    
    // API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    const API_KEY = '28d87edc85fa4551b58d331d8d24f8e3';
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const requestBody = {
      coordinates: [
        [coords.from.lng, coords.from.lat],
        [coords.to.lng, coords.to.lat]
      ],
      format: "json",
      units: "km"
    };

    try {
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Authorization': API_KEY,
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'User-Agent': 'AvtoGOST77/1.0 (https://avtogost77.ru)'
        },
        body: JSON.stringify(requestBody)
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      }
      
      const data = await response.json();
      
      // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ OpenRouteService
      if (data && data.routes && data.routes[0] && data.routes[0].summary) {
        const rawDistance = data.routes[0].summary.distance;
        // ORS —á–∞—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä—ã; –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ > 1000, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –º–µ—Ç—Ä—ã
        const distanceKm = rawDistance > 1000 ? (rawDistance / 1000) : rawDistance;
        return Math.round(distanceKm);
      }
      
      throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouteService');
      
    } catch (error) {
      return null;
    }
  }

  // Open Source Routing Machine (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
  async getFromOSRM(fromCity, toCity) {
    const coords = this.getCityCoords(fromCity, toCity);
    if (!coords) return null;

    const url = `https://router.project-osrm.org/route/v1/driving/` +
      `${coords.from.lng},${coords.from.lat};${coords.to.lng},${coords.to.lat}` +
      `?overview=false&alternatives=false&steps=false`;

    try {
      
      const response = await fetch(url);
      const data = await response.json();
      
      if (data.code === 'Ok' && data.routes && data.routes[0]) {
        return Math.round(data.routes[0].distance / 1000);
      }
      
      throw new Error(`OSRM error: ${data.message || 'Unknown error'}`);
      
    } catch (error) {
      return null;
    }
  }

  // –§–æ—Ä–º—É–ª–∞ Haversine (–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç)
  getFromHaversine(fromCity, toCity) {
    const coords = this.getCityCoords(fromCity, toCity);
    if (!coords) return null;

    const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
    const dLat = (coords.to.lat - coords.from.lat) * Math.PI / 180;
    const dLon = (coords.to.lng - coords.from.lng) * Math.PI / 180;
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
      Math.cos(coords.from.lat * Math.PI / 180) * Math.cos(coords.to.lat * Math.PI / 180) *
      Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    
    return Math.round(R * c);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥–æ—Ä–æ–¥–æ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞)
  getCityCoords(fromCity, toCity) {
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤
    const normalizeCity = (city) => {
      const raw = (city || '').toString().trim();
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º: –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, –∑–∞–º–µ–Ω—è–µ–º —ë‚Üí–µ, —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
      const lower = raw.toLowerCase().replace(/—ë/g, '–µ').replace(/\s+/g, ' ');

      // –ì–∏–±–∫–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º
      if (lower.includes('—Å–∞–Ω–∫—Ç') || lower.includes('—Å–ø–±') || lower.includes('–ø–∏—Ç–µ—Ä')) return 'spb';
      if (lower.includes('–º–æ—Å–∫')) return 'moskva';
      if (lower.includes('–Ω–∏–∂') && lower.includes('–Ω–æ–≤–≥–æ—Ä')) return 'nizhniy-novgorod';
      if (lower.includes('–µ–∫–∞—Ç–µ—Ä–∏–Ω')) return 'ekaterinburg';
      if (lower.includes('–∫–∞–∑–∞–Ω')) return 'kazan';
      if (lower.includes('–≤–æ—Ä–æ–Ω–µ')) return 'voronezh';
      if (lower.includes('—Å–∞–º–∞—Ä')) return 'samara';
      if (lower.includes('—Ä–æ—Å—Ç–æ–≤')) return 'rostov';
      if (lower.includes('—á–µ–ª—è–±–∏–Ω')) return 'chelyabinsk';
      if (lower.includes('—É—Ñ–∞')) return 'ufa';
      if (lower.includes('—Ä—è–∑–∞')) return 'ryazan';
      if (lower.includes('—Ç—É–ª–∞')) return 'tula';
      if (lower.includes('—è—Ä–æ—Å–ª–∞–≤')) return 'yaroslavl';
      if (lower.includes('–≤–ª–∞–¥–∏–º–∏—Ä')) return 'vladimir';
      if (lower.includes('–∫–∞–ª—É–≥')) return 'kaluga';
      if (lower.includes('—Å–º–æ–ª–µ–Ω')) return 'smolensk';
      if (lower.includes('–±—Ä—è–Ω')) return 'bryansk';
      if (lower.includes('–æ—Ä–µ–ª') || lower.includes('–æ—Ä—ë–ª')) return 'orel';
      if (lower.includes('–∫—É—Ä—Å–∫')) return 'kursk';
      if (lower.includes('–±–µ–ª–≥–æ—Ä')) return 'belgorod';
      if (lower.includes('–ª–∏–ø–µ—Ü')) return 'lipetsk';
      if (lower.includes('—Ç–∞–º–±–æ–≤')) return 'tambov';
      if (lower.includes('–ø–µ–Ω–∑–∞')) return 'penza';
      if (lower.includes('—Å–∞—Ä–∞–Ω—Å–∫')) return 'saransk';
      if (lower.includes('—á–µ–±–æ–∫—Å–∞—Ä')) return 'cheboksary';
      if (lower.includes('–∫–∏—Ä–æ–≤')) return 'kirov';
      if (lower.includes('–∏–∂–µ–≤—Å–∫')) return 'izhevsk';
      if (lower.includes('–ø–µ—Ä–º')) return 'perm';
      if (lower.includes('–æ—Ä–µ–Ω–±—É—Ä–≥')) return 'orenburg';
      if (lower.includes('—Å–∞—Ä–∞—Ç–æ–≤')) return 'saratov';
      if (lower.includes('–≤–æ–ª–≥–æ–≥—Ä–∞–¥')) return 'volgograd';
      if (lower.includes('–∞—Å—Ç—Ä–∞—Ö–∞–Ω')) return 'astrakhan';
      if (lower.includes('–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä')) return 'krasnodar';
      if (lower.includes('—Å–æ—á–∏')) return 'sochi';
      if (lower.includes('—Å—Ç–∞–≤—Ä–æ–ø')) return 'stavropol';
      if (lower.includes('–º–∞—Ö–∞—á–∫–∞–ª')) return 'makhachkala';
      if (lower.includes('–≥—Ä–æ–∑–Ω')) return 'grozny';
      if (lower.includes('–Ω–∞–ª—á–∏–∫')) return 'nalchik';
      if (lower.includes('–∫–æ—Å—Ç—Ä–æ–º')) return 'kostroma';
      if (lower.includes('—Ç–≤–µ—Ä')) return 'tver';
      if (lower.includes('–ø—Å–∫–æ–≤')) return 'pskov';
      if (lower.includes('–Ω–æ–≤–≥–æ—Ä–æ')) return 'novgorod';
      if (lower.includes('–ø–µ—Ç—Ä–æ–∑–∞–≤–æ–¥')) return 'petrozavodsk';
      if (lower.includes('–∞—Ä—Ö–∞–Ω–≥–µ–ª')) return 'arkhangelsk';
      if (lower.includes('–º—É—Ä–º–∞–Ω')) return 'murmansk';
      if (lower.includes('—Å—ã–∫—Ç—ã–≤–∫–∞—Ä')) return 'syktyvkar';
      if (lower.includes('–≤–æ–ª–æ–≥–¥')) return 'vologda';
      if (lower.includes('–∏–≤–∞–Ω–æ–≤–æ')) return 'ivanovo';
      if (lower.includes('–Ω–æ–≤–æ—Å–∏–±–∏—Ä')) return 'novosibirsk';
      if (lower.includes('–æ–º—Å–∫')) return 'omsk';
      if (lower.includes('–∫—Ä–∞—Å–Ω–æ—è—Ä')) return 'krasnoyarsk';
      if (lower.includes('–∏—Ä–∫—É—Ç—Å–∫')) return 'irkutsk';
      if (lower.includes('—Ö–∞–±–∞—Ä–æ–≤')) return 'khabarovsk';
      if (lower.includes('–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫')) return 'vladivostok';
      if (lower.includes('—Ç–æ–º—Å–∫')) return 'tomsk';
      if (lower.includes('–∫–µ–º–µ—Ä–æ–≤')) return 'kemerovo';
      if (lower.includes('–Ω–æ–≤–æ–∫—É–∑–Ω–µ—Ü')) return 'novokuznetsk';
      if (lower.includes('–±–∞—Ä–Ω–∞—É–ª')) return 'barnaul';
      if (lower.includes('—á–∏—Ç–∞')) return 'chita';
      if (lower.includes('—è–∫—É—Ç—Å–∫')) return 'yakutsk';
      if (lower.includes('–º–∞–≥–∞–¥–∞–Ω')) return 'magadan';
      if (lower.includes('–∫–∞–º—á–∞—Ç')) return 'petropavlovsk-kamchatsky';
      if (lower.includes('—Å–∞—Ö–∞–ª–∏–Ω')) return 'yuzhno-sakhalinsk';
      if (lower.includes('—Ç—é–º')) return 'tyumen';
      if (lower.includes('—Å—É—Ä–≥—É—Ç')) return 'surgut';
      if (lower.includes('–∫—É—Ä–≥–∞–Ω')) return 'kurgan';
      if (lower.includes('–≥–∞–≥–∞—Ä–∏–Ω')) return 'gagarin';

      // –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ ‚Äî –¥–µ–ª–∞–µ–º —Å–ª–∞–≥
      return lower.replace(/\s+/g, '-');
    };

    const CITY_COORDS = {
      // –û—Å–Ω–æ–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏
      "moskva": { lat: 55.7558, lng: 37.6176 },
      "spb": { lat: 59.9311, lng: 30.3609 },
      "kazan": { lat: 55.8304, lng: 49.0661 },
      "voronezh": { lat: 51.6754, lng: 39.2088 },
      "samara": { lat: 53.2001, lng: 50.1500 },
      "nizhniy-novgorod": { lat: 56.3287, lng: 44.0020 },
      "ekaterinburg": { lat: 56.8431, lng: 60.6454 },
      "rostov": { lat: 47.2357, lng: 39.7015 },
      "chelyabinsk": { lat: 55.1644, lng: 61.4368 },
      "ufa": { lat: 54.7388, lng: 55.9721 },
      "ryazan": { lat: 54.6269, lng: 39.6916 },
      "tula": { lat: 54.1961, lng: 37.6182 },
      "yaroslavl": { lat: 57.6261, lng: 39.8845 },
      "vladimir": { lat: 56.1366, lng: 40.3966 },
      "kaluga": { lat: 54.5293, lng: 36.2754 },
      "smolensk": { lat: 54.7818, lng: 32.0401 },
      "bryansk": { lat: 53.2434, lng: 34.3641 },
      "orel": { lat: 52.9691, lng: 36.0699 },
      "kursk": { lat: 51.7373, lng: 36.1873 },
      "belgorod": { lat: 50.5952, lng: 36.5804 },
      "lipetsk": { lat: 52.6031, lng: 39.5708 },
      "tambov": { lat: 52.7213, lng: 41.4633 },
      "penza": { lat: 53.2001, lng: 45.0000 },
      "saransk": { lat: 54.1838, lng: 45.1749 },
      "cheboksary": { lat: 56.1439, lng: 47.2489 },
      "kirov": { lat: 58.6035, lng: 49.6679 },
      "izhevsk": { lat: 56.8431, lng: 53.2045 },
      "perm": { lat: 58.0105, lng: 56.2502 },
      "orenburg": { lat: 51.7727, lng: 55.0988 },
      "saratov": { lat: 51.5924, lng: 46.0348 },
      "volgograd": { lat: 48.7080, lng: 44.5133 },
      "astrakhan": { lat: 46.3497, lng: 48.0408 },
      "krasnodar": { lat: 45.0328, lng: 38.9769 },
      "sochi": { lat: 43.6028, lng: 39.7342 },
      "stavropol": { lat: 45.0428, lng: 41.9734 },
      "makhachkala": { lat: 42.9849, lng: 47.5047 },
      "grozny": { lat: 43.3181, lng: 45.6986 },
      "nalchik": { lat: 43.4981, lng: 43.6189 },
      
      // –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
      "kostroma": { lat: 57.7665, lng: 40.9269 },
      "tver": { lat: 56.8596, lng: 35.9007 },
      "pskov": { lat: 57.8136, lng: 28.3496 },
      "novgorod": { lat: 58.5218, lng: 31.2756 },
      "petrozavodsk": { lat: 61.7849, lng: 34.3469 },
      "arkhangelsk": { lat: 64.5401, lng: 40.5433 },
      "murmansk": { lat: 68.9585, lng: 33.0827 },
      "syktyvkar": { lat: 61.6681, lng: 50.8372 },
      "vologda": { lat: 59.2239, lng: 39.8839 },
      "ivanovo": { lat: 56.9999, lng: 40.9739 },
      
      // –°–∏–±–∏—Ä—å –∏ –î–∞–ª—å–Ω–∏–π –í–æ—Å—Ç–æ–∫
      "novosibirsk": { lat: 55.0084, lng: 82.9357 },
      "omsk": { lat: 54.9893, lng: 73.3682 },
      "krasnoyarsk": { lat: 56.0184, lng: 92.8672 },
      "irkutsk": { lat: 52.2978, lng: 104.2964 },
      "khabarovsk": { lat: 48.4827, lng: 135.0839 },
      "vladivostok": { lat: 43.1056, lng: 131.8735 },
      "tomsk": { lat: 56.5017, lng: 84.9563 },
      "kemerovo": { lat: 55.3331, lng: 86.0844 },
      "novokuznetsk": { lat: 53.7596, lng: 87.1216 },
      "barnaul": { lat: 53.3606, lng: 83.7636 },
      "chita": { lat: 52.0349, lng: 113.4695 },
      "yakutsk": { lat: 62.0355, lng: 129.6755 },
      "magadan": { lat: 59.5684, lng: 150.8048 },
      "petropavlovsk-kamchatsky": { lat: 53.0445, lng: 158.6475 },
      "yuzhno-sakhalinsk": { lat: 46.9588, lng: 142.7386 },
      "tyumen": { lat: 57.1522, lng: 65.5272 },
      "surgut": { lat: 61.2500, lng: 73.4167 },
      "kurgan": { lat: 55.4500, lng: 65.3333 },
      "gagarin": { lat: 55.5539, lng: 34.9953 }
    };

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤
    const normalizedFrom = normalizeCity(fromCity);
    const normalizedTo = normalizeCity(toCity);
    
    const from = CITY_COORDS[normalizedFrom];
    const to = CITY_COORDS[normalizedTo];
    
    if (!from || !to) {
      return null;
    }
    
    return { from, to };
  }

  // Batch –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
  async getDistancesBatch(routes) {
    const promises = routes.map(async (route) => {
      try {
        const distance = await this.getDistance(route.from, route.to);
        return { ...route, distance, status: 'success' };
      } catch (error) {
        return { ...route, distance: null, status: 'error', error: error.message };
      }
    });
    
    return await Promise.all(promises);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  getUsageStats() {
    const total = Object.values(this.usage).reduce((sum, count) => sum + count, 0);
    const stats = {};
    
    for (const [provider, count] of Object.entries(this.usage)) {
      stats[provider] = {
        count,
        percentage: total > 0 ? Math.round((count / total) * 100) : 0
      };
    }
    
    return {
      total,
      providers: stats,
      cacheSize: this.cache.size
    };
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
  clearCache() {
    this.cache.clear();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ API
  checkApiLimits() {
    const stats = this.getUsageStats();
    
    if (stats.providers.openrouteservice?.count > 1800) {
    }
    
    if (stats.providers.osrm?.count > 500) {
    }
    
    return stats;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const distanceAPI = new DistanceAPI();

// –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async function getRouteDistance(fromCity, toCity) {
  return await distanceAPI.getDistance(fromCity, toCity);
}

// –≠–∫—Å–ø–æ—Ä—Ç
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { DistanceAPI, distanceAPI, getRouteDistance };
}

// –î–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
if (typeof window !== 'undefined') {
  window.DistanceAPI = DistanceAPI;
  window.distanceAPI = distanceAPI;
  window.getRouteDistance = getRouteDistance;
}
// === CITIES SIMPLE ===
// –ü—Ä–æ—Å—Ç–æ–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≥–æ—Ä–æ–¥–æ–≤ –≤–º–µ—Å—Ç–æ DaData
const POPULAR_CITIES = [
  // –¢–æ–ø-10 –≥–æ—Ä–æ–¥–æ–≤
  '–ú–æ—Å–∫–≤–∞',
  '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
  '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
  '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
  '–ö–∞–∑–∞–Ω—å',
  '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥',
  '–ß–µ–ª—è–±–∏–Ω—Å–∫',
  '–°–∞–º–∞—Ä–∞',
  '–û–º—Å–∫',
  '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É',
  
  // –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å (74 –≥–æ—Ä–æ–¥–∞)
  '–ê–ø—Ä–µ–ª–µ–≤–∫–∞', '–ë–∞–ª–∞—à–∏—Ö–∞', '–ë—Ä–æ–Ω–Ω–∏—Ü—ã', '–í–µ—Ä–µ—è', '–í–∏–¥–Ω–æ–µ', '–í–æ–ª–æ–∫–æ–ª–∞–º—Å–∫',
  '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫', '–í—ã—Å–æ–∫–æ–≤—Å–∫', '–ì–æ–ª–∏—Ü—ã–Ω–æ', '–î–µ–¥–æ–≤—Å–∫', '–î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π', '–î–º–∏—Ç—Ä–æ–≤',
  '–î–æ–ª–≥–æ–ø—Ä—É–¥–Ω—ã–π', '–î–æ–º–æ–¥–µ–¥–æ–≤–æ', '–î—Ä–µ–∑–Ω–∞', '–î—É–±–Ω–∞', '–ï–≥–æ—Ä—å–µ–≤—Å–∫', '–ñ—É–∫–æ–≤—Å–∫–∏–π',
  '–ó–∞—Ä–∞–π—Å–∫', '–ó–≤–µ–Ω–∏–≥–æ—Ä–æ–¥', '–ò–≤–∞–Ω—Ç–µ–µ–≤–∫–∞', '–ò—Å—Ç—Ä–∞', '–ö–∞—à–∏—Ä–∞', '–ö–ª–∏–Ω',
  '–ö–æ–ª–æ–º–Ω–∞', '–ö–æ—Ä–æ–ª—ë–≤', '–ö–æ—Ç–µ–ª—å–Ω–∏–∫–∏', '–ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫', '–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫',
  '–ö—Ä–∞—Å–Ω–æ–∑–∞–≤–æ–¥—Å–∫', '–ö—Ä–∞—Å–Ω–æ–∑–Ω–∞–º–µ–Ω—Å–∫', '–ö—É–±–∏–Ω–∫–∞', '–ö—É—Ä–æ–≤—Å–∫–æ–µ', '–õ–∏–∫–∏–Ω–æ-–î—É–ª—ë–≤–æ',
  '–õ–æ–±–Ω—è', '–õ–æ—Å–∏–Ω–æ-–ü–µ—Ç—Ä–æ–≤—Å–∫–∏–π', '–õ—É—Ö–æ–≤–∏—Ü—ã', '–õ—ã—Ç–∫–∞—Ä–∏–Ω–æ', '–õ—é–±–µ—Ä—Ü—ã',
  '–ú–æ–∂–∞–π—Å–∫', '–ú—ã—Ç–∏—â–∏', '–ù–∞—Ä–æ-–§–æ–º–∏–Ω—Å–∫', '–ù–æ–≥–∏–Ω—Å–∫', '–û–¥–∏–Ω—Ü–æ–≤–æ', '–û–∑—ë—Ä—ã',
  '–û—Ä–µ—Ö–æ–≤–æ-–ó—É–µ–≤–æ', '–ü–∞–≤–ª–æ–≤—Å–∫–∏–π –ü–æ—Å–∞–¥', '–ü–µ—Ä–µ—Å–≤–µ—Ç', '–ü–æ–¥–æ–ª—å—Å–∫', '–ü—Ä–æ—Ç–≤–∏–Ω–æ',
  '–ü—É—à–∫–∏–Ω–æ', '–ü—É—â–∏–Ω–æ', '–†–∞–º–µ–Ω—Å–∫–æ–µ', '–†–µ—É—Ç–æ–≤', '–†–æ—à–∞–ª—å', '–†—É–∑–∞',
  '–°–µ—Ä–≥–∏–µ–≤ –ü–æ—Å–∞–¥', '–°–µ—Ä–ø—É—Ö–æ–≤', '–°–æ–ª–Ω–µ—á–Ω–æ–≥–æ—Ä—Å–∫', '–°—Ç–∞—Ä–∞—è –ö—É–ø–∞–≤–Ω–∞', '–°—Ç—É–ø–∏–Ω–æ',
  '–¢–∞–ª–¥–æ–º', '–§—Ä—è–∑–∏–Ω–æ', '–•–∏–º–∫–∏', '–•–æ—Ç—å–∫–æ–≤–æ', '–ß–µ—Ä–Ω–æ–≥–æ–ª–æ–≤–∫–∞', '–ß–µ—Ö–æ–≤',
  '–®–∞—Ç—É—Ä–∞', '–©—ë–ª–∫–æ–≤–æ', '–≠–ª–µ–∫—Ç—Ä–æ–≥–æ—Ä—Å–∫', '–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å', '–≠–ª–µ–∫—Ç—Ä–æ—É–≥–ª–∏', '–Ø—Ö—Ä–æ–º–∞',
  '–ü–æ–≤–∞—Ä–æ–≤–∫–∞', // –î–æ–±–∞–≤–∏–ª —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è!
  
  // –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å (34 –≥–æ—Ä–æ–¥–∞)
  '–ë–æ–∫—Å–∏—Ç–æ–≥–æ—Ä—Å–∫', '–í–æ–ª–æ—Å–æ–≤–æ', '–í–æ–ª—Ö–æ–≤', '–í—Å–µ–≤–æ–ª–æ–∂—Å–∫', '–í—ã–±–æ—Ä–≥', '–í—ã—Å–æ—Ü–∫',
  '–ì–∞—Ç—á–∏–Ω–∞', '–ò–≤–∞–Ω–≥–æ—Ä–æ–¥', '–ö–∞–º–µ–Ω–Ω–æ–≥–æ—Ä—Å–∫', '–ö–∏–Ω–≥–∏—Å–µ–ø–ø', '–ö–∏—Ä–∏—à–∏', '–ö–∏—Ä–æ–≤—Å–∫',
  '–ö–æ–ª—Ç—É—à–∏', '–ö–æ–º–º—É–Ω–∞—Ä', '–ö—É–¥—Ä–æ–≤–æ', '–õ–æ–¥–µ–π–Ω–æ–µ –ü–æ–ª–µ', '–õ—É–≥–∞', '–õ—é–±–∞–Ω—å',
  '–ú—É—Ä–∏–Ω–æ', '–ù–∏–∫–æ–ª—å—Å–∫–æ–µ', '–ù–æ–≤–∞—è –õ–∞–¥–æ–≥–∞', '–û—Ç—Ä–∞–¥–Ω–æ–µ', '–ü–∏–∫–∞–ª—ë–≤–æ', '–ü–æ–¥–ø–æ—Ä–æ–∂—å–µ',
  '–ü—Ä–∏–º–æ—Ä—Å–∫', '–ü—Ä–∏–æ–∑–µ—Ä—Å–∫', '–°–≤–µ—Ç–æ–≥–æ—Ä—Å–∫', '–°–µ—Ä—Ç–æ–ª–æ–≤–æ', '–°–ª–∞–Ω—Ü—ã', '–°–æ—Å–Ω–æ–≤—ã–π –ë–æ—Ä',
  '–°—Ç–∞—Ä–∞—è –õ–∞–¥–æ–≥–∞', '–°—è—Å—å—Å—Ç—Ä–æ–π', '–¢–∏—Ö–≤–∏–Ω', '–¢–æ—Å–Ω–æ', '–®–ª–∏—Å—Å–µ–ª—å–±—É—Ä–≥',
  
  // –î—Ä—É–≥–∏–µ –∫—Ä—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
  '–£—Ñ–∞', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–ü–µ—Ä–º—å', '–í–æ—Ä–æ–Ω–µ–∂', '–í–æ–ª–≥–æ–≥—Ä–∞–¥', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä',
  '–°–∞—Ä–∞—Ç–æ–≤', '–¢—é–º–µ–Ω—å', '–¢–æ–ª—å—è—Ç—Ç–∏', '–ò–∂–µ–≤—Å–∫', '–ë–∞—Ä–Ω–∞—É–ª', '–£–ª—å—è–Ω–æ–≤—Å–∫',
  '–ò—Ä–∫—É—Ç—Å–∫', '–•–∞–±–∞—Ä–æ–≤—Å–∫', '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', '–Ø—Ä–æ—Å–ª–∞–≤–ª—å', '–ú–∞—Ö–∞—á–∫–∞–ª–∞',
  '–¢–æ–º—Å–∫', '–û—Ä–µ–Ω–±—É—Ä–≥', '–ö–µ–º–µ—Ä–æ–≤–æ', '–†—è–∑–∞–Ω—å', '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å', '–ü–µ–Ω–∑–∞',
  '–õ–∏–ø–µ—Ü–∫', '–¢—É–ª–∞', '–ö–∏—Ä–æ–≤', '–ß–µ–±–æ–∫—Å–∞—Ä—ã', '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥', '–ë—Ä—è–Ω—Å–∫',
  '–ö—É—Ä—Å–∫', '–ò–≤–∞–Ω–æ–≤–æ', '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å', '–ë–µ–ª–≥–æ—Ä–æ–¥', '–°–æ—á–∏', '–ù–∏–∂–Ω–∏–π –¢–∞–≥–∏–ª',
  '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫', '–í–ª–∞–¥–∏–º–∏—Ä', '–ö–∞–ª—É–≥–∞', '–°–º–æ–ª–µ–Ω—Å–∫', '–í–æ–ª–æ–≥–¥–∞', '–û—Ä–µ–ª',
  '–ß–µ—Ä–µ–ø–æ–≤–µ—Ü', '–ú—É—Ä–º–∞–Ω—Å–∫', '–°–∞—Ä–∞–Ω—Å–∫'
];

// –ü—Ä–æ—Å—Ç–æ–π –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç
function setupCityAutocomplete() {
  const fromInput = document.getElementById('fromCity');
  const toInput = document.getElementById('toCity');
  
  [fromInput, toInput].forEach(input => {
    if (!input) return;
    
    const suggestionsDiv = document.querySelector(`.address-suggestions[data-for="${input.name}"]`);
    if (!suggestionsDiv) return;
    
    input.addEventListener('input', function() {
      const value = this.value.toLowerCase();
      if (value.length < 2) {
        suggestionsDiv.innerHTML = '';
        suggestionsDiv.style.display = 'none';
        return;
      }
      
      const matches = POPULAR_CITIES.filter(city => 
        city.toLowerCase().includes(value)
      ).slice(0, 5);
      
      if (matches.length > 0) {
        suggestionsDiv.innerHTML = matches.map(city => 
          `<div class="suggestion-item" data-city="${city}">${city}</div>`
        ).join('');
        suggestionsDiv.style.display = 'block';
      } else {
        suggestionsDiv.innerHTML = '';
        suggestionsDiv.style.display = 'none';
      }
    });
    
    // –ö–ª–∏–∫ –ø–æ –ø–æ–¥—Å–∫–∞–∑–∫–µ
    suggestionsDiv.addEventListener('click', function(e) {
      if (e.target.classList.contains('suggestion-item')) {
        input.value = e.target.dataset.city;
        suggestionsDiv.innerHTML = '';
        suggestionsDiv.style.display = 'none';
      }
    });
    
    // –°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
    document.addEventListener('click', function(e) {
      if (!input.contains(e.target) && !suggestionsDiv.contains(e.target)) {
        suggestionsDiv.style.display = 'none';
      }
    });
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', setupCityAutocomplete);

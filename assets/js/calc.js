// ===============================================
// –ê–í–¢–û –ì–û–°–¢ - –£–ú–ù–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –õ–û–ì–ò–°–¢–ò–ö–ò v3.0
// –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –æ—Ç–∫–ª—é—á–∞–µ–º—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏
// ===============================================

// üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø API –ö–ê–†–¢
const MAP_CONFIG = {
  enabled: false, // –ö–∞—Ä—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã - –≤—Å–µ API –ø–ª–∞—Ç–Ω—ã–µ –∏ –¥–æ—Ä–æ–≥–∏–µ
  provider: 'none', // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–µ API
  fallbackMode: 'database' // –¢–æ–ª—å–∫–æ –±–∞–∑–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
};

// üó∫Ô∏è –ë–ê–ó–ê –†–ê–°–°–¢–û–Ø–ù–ò–ô –ú–ï–ñ–î–£ –ì–û–†–û–î–ê–ú–ò –†–û–°–°–ò–ò
const DISTANCE_DATABASE = {
  // –ú–æ—Å–∫–≤–∞ –∫–∞–∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —É–∑–µ–ª
  '–ú–æ—Å–∫–≤–∞': {
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 635,
    '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': 411,
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 1416,
    '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 3303,
    '–ö–∞–∑–∞–Ω—å': 815,
    '–ß–µ–ª—è–±–∏–Ω—Å–∫': 1777,
    '–°–∞–º–∞—Ä–∞': 1049,
    '–û–º—Å–∫': 2555,
    '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É': 1076,
    '–£—Ñ–∞': 1357,
    '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': 3353,
    '–í–æ—Ä–æ–Ω–µ–∂': 515,
    '–ü–µ—Ä–º—å': 1396,
    '–í–æ–ª–≥–æ–≥—Ä–∞–¥': 912,
    '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä': 1343,
    '–°–∞—Ä–∞—Ç–æ–≤': 858,
    '–¢—é–º–µ–Ω—å': 2144,
    '–¢–æ–ª—å—è—Ç—Ç–∏': 1010,
    '–ò–∂–µ–≤—Å–∫': 1058,
    '–ë–∞—Ä–Ω–∞—É–ª': 3419,
    '–£–ª—å—è–Ω–æ–≤—Å–∫': 893,
    '–ò—Ä–∫—É—Ç—Å–∫': 5042,
    '–•–∞–±–∞—Ä–æ–≤—Å–∫': 8533,
    '–Ø—Ä–æ—Å–ª–∞–≤–ª—å': 282,
    '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫': 9259,
    '–ú–∞—Ö–∞—á–∫–∞–ª–∞': 1592,
    '–¢–æ–º—Å–∫': 3506,
    '–û—Ä–µ–Ω–±—É—Ä–≥': 1478,
    '–ö–µ–º–µ—Ä–æ–≤–æ': 3602,
    '–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫': 3708,
    '–†—è–∑–∞–Ω—å': 196,
    '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å': 1411,
    '–¢—É–ª–∞': 193,
    '–ö–∞–ª—É–≥–∞': 190,
    '–¢–≤–µ—Ä—å': 178,
    '–í–ª–∞–¥–∏–º–∏—Ä': 190,
    '–ö–æ—Å—Ç—Ä–æ–º–∞': 344,
    '–°–º–æ–ª–µ–Ω—Å–∫': 378,
    '–ë—Ä—è–Ω—Å–∫': 379,
    '–ö—É—Ä—Å–∫': 536,
    '–ë–µ–ª–≥–æ—Ä–æ–¥': 695,
    '–õ–∏–ø–µ—Ü–∫': 508,
    '–¢–∞–º–±–æ–≤': 460,
    '–û—Ä–µ–ª': 368,
    '–ü–æ–¥–æ–ª—å—Å–∫': 43,
    '–ú—ã—Ç–∏—â–∏': 19,
    '–•–∏–º–∫–∏': 18,
    '–ë–∞–ª–∞—à–∏—Ö–∞': 25,
    '–ö–æ—Ä–æ–ª–µ–≤': 23,
    '–õ—é–±–µ—Ä—Ü—ã': 20,
    '–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫': 22,
    '–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å': 58,
    '–ö–æ–ª–æ–º–Ω–∞': 115,
    '–°–µ—Ä–ø—É—Ö–æ–≤': 99,
    '–©–µ–ª–∫–æ–≤–æ': 35,
    '–û–¥–∏–Ω—Ü–æ–≤–æ': 24,
    '–î–æ–º–æ–¥–µ–¥–æ–≤–æ': 37,
    '–û—Ä–µ—Ö–æ–≤–æ-–ó—É–µ–≤–æ': 89,
    '–°–µ—Ä–≥–∏–µ–≤ –ü–æ—Å–∞–¥': 71,
    '–ù–æ–≥–∏–Ω—Å–∫': 51,
    '–ñ—É–∫–æ–≤—Å–∫–∏–π': 40,
    '–î—É–±–Ω–∞': 125,
    '–ü—É—à–∫–∏–Ω–æ': 29,
    '–ö–ª–∏–Ω': 85,
    '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫': 88,
    '–ò—Å—Ç—Ä–∞': 58
  },
  
  // –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
  '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': {
    '–ú–æ—Å–∫–≤–∞': 635,
    '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': 1046,
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 2051,
    '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 3938,
    '–ö–∞–∑–∞–Ω—å': 1450,
    '–ú—É—Ä–º–∞–Ω—Å–∫': 1030,
    '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫': 1234,
    '–ü—Å–∫–æ–≤': 230,
    '–í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': 180,
    '–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫': 402,
    '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥': 739,
    '–í—ã–±–æ—Ä–≥': 140,
    '–ì–∞—Ç—á–∏–Ω–∞': 45,
    '–í—Å–µ–≤–æ–ª–æ–∂—Å–∫': 24,
    '–ö–æ–ª–ø–∏–Ω–æ': 25,
    '–ü—É—à–∫–∏–Ω': 25,
    '–ö—Ä–æ–Ω—à—Ç–∞–¥—Ç': 48,
    '–°–µ—Å—Ç—Ä–æ—Ä–µ—Ü–∫': 34
  },
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –º–µ–∂–¥—É –∫—Ä—É–ø–Ω—ã–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏
  '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': {
    '–ú–æ—Å–∫–≤–∞': 1416,
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 2051,
    '–ß–µ–ª—è–±–∏–Ω—Å–∫': 210,
    '–ü–µ—Ä–º—å': 387,
    '–¢—é–º–µ–Ω—å': 350,
    '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 1777,
    '–û–º—Å–∫': 1139,
    '–£—Ñ–∞': 368,
    '–ù–∏–∂–Ω–∏–π –¢–∞–≥–∏–ª': 149,
    '–ö–∞–º–µ–Ω—Å–∫-–£—Ä–∞–ª—å—Å–∫–∏–π': 103,
    '–ü–µ—Ä–≤–æ—É—Ä–∞–ª—å—Å–∫': 39,
    '–†–µ–≤–¥–∞': 25,
    '–ó–∞—Ä–µ—á–Ω—ã–π': 46,
    '–ù–æ–≤–æ—É—Ä–∞–ª—å—Å–∫': 73
  },
  
  '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': {
    '–ú–æ—Å–∫–≤–∞': 3303,
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 1777,
    '–û–º—Å–∫': 622,
    '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': 354,
    '–ë–∞—Ä–Ω–∞—É–ª': 250,
    '–ö–µ–º–µ—Ä–æ–≤–æ': 238,
    '–¢–æ–º—Å–∫': 264,
    '–ò—Ä–∫—É—Ç—Å–∫': 1777,
    '–ë–µ—Ä–¥—Å–∫': 38,
    '–ò—Å–∫–∏—Ç–∏–º': 48,
    '–û–±—å': 17
  },

  // –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥
  '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': {
    '–ú–æ—Å–∫–≤–∞': 411,
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 1046,
    '–ö–∞–∑–∞–Ω—å': 341,
    '–°–∞–º–∞—Ä–∞': 638,
    '–°–∞—Ä–∞—Ç–æ–≤': 447,
    '–ö–∏—Ä–æ–≤': 276,
    '–ô–æ—à–∫–∞—Ä-–û–ª–∞': 221,
    '–ß–µ–±–æ–∫—Å–∞—Ä—ã': 159,
    '–í–ª–∞–¥–∏–º–∏—Ä': 221,
    '–ò–≤–∞–Ω–æ–≤–æ': 214,
    '–ö–æ—Å—Ç—Ä–æ–º–∞': 333,
    '–î–∑–µ—Ä–∂–∏–Ω—Å–∫': 35,
    '–ë–æ—Ä': 21,
    '–ê—Ä–∑–∞–º–∞—Å': 112,
    '–°–∞—Ä–æ–≤': 180
  },

  // –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä
  '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä': {
    '–ú–æ—Å–∫–≤–∞': 1343,
    '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É': 267,
    '–í–æ–ª–≥–æ–≥—Ä–∞–¥': 579,
    '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å': 677,
    '–°–æ—á–∏': 279,
    '–ê–Ω–∞–ø–∞': 170,
    '–ì–µ–ª–µ–Ω–¥–∂–∏–∫': 178,
    '–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫': 145,
    '–ê—Ä–º–∞–≤–∏—Ä': 202,
    '–ú–∞–π–∫–æ–ø': 146,
    '–ï–π—Å–∫': 150,
    '–¢–∏–º–∞—à–µ–≤—Å–∫': 45,
    '–°–ª–∞–≤—è–Ω—Å–∫-–Ω–∞-–ö—É–±–∞–Ω–∏': 82
  },

  // –ö–∞–∑–∞–Ω—å
  '–ö–∞–∑–∞–Ω—å': {
    '–ú–æ—Å–∫–≤–∞': 815,
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 1450,
    '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': 341,
    '–°–∞–º–∞—Ä–∞': 297,
    '–£—Ñ–∞': 542,
    '–ü–µ—Ä–º—å': 729,
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 1183,
    '–£–ª—å—è–Ω–æ–≤—Å–∫': 552,
    '–°–∞—Ä–∞—Ç–æ–≤': 744,
    '–ô–æ—à–∫–∞—Ä-–û–ª–∞': 120,
    '–ß–µ–±–æ–∫—Å–∞—Ä—ã': 152,
    '–ö–∏—Ä–æ–≤': 405,
    '–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã': 225,
    '–ó–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫': 36,
    '–ï–ª–∞–±—É–≥–∞': 196
  }
};

class SmartLogisticsCalculator {
  constructor() {
    this.initConfiguration();
    this.initZones();
    this.initCargoTypes();
    this.initVehicleTypes();
    this.initAnimations();
    this.init();
  }

  initConfiguration() {
    this.config = {
      ...MAP_CONFIG,
      animationsEnabled: true,
      responsiveBreakpoint: 768,
      calculateDelay: 300, // –º—Å –¥–ª—è debounce
      currencySymbol: '‚ÇΩ'
    };
  }

  initZones() {
    this.zones = {
      'moscow-center': { 
        name: '–¶–µ–Ω—Ç—Ä –ú–æ—Å–∫–≤—ã', 
        baseRate: 140, 
        coefficient: 1.3,
        rushHourMultiplier: 1.5
      },
      'moscow-region': { 
        name: '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 
        baseRate: 110, 
        coefficient: 1.1,
        rushHourMultiplier: 1.2
      },
      'central': { 
        name: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –§–û', 
        baseRate: 95, 
        coefficient: 1.0,
        rushHourMultiplier: 1.0
      },
      'northwest': { 
        name: '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π –§–û', 
        baseRate: 105, 
        coefficient: 1.05,
        rushHourMultiplier: 1.1
      },
      'south': { 
        name: '–Æ–∂–Ω—ã–π –§–û', 
        baseRate: 85, 
        coefficient: 0.9,
        rushHourMultiplier: 1.0
      },
      'volga': { 
        name: '–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π –§–û', 
        baseRate: 90, 
        coefficient: 0.95,
        rushHourMultiplier: 1.0
      },
      'ural': { 
        name: '–£—Ä–∞–ª—å—Å–∫–∏–π –§–û', 
        baseRate: 115, 
        coefficient: 1.15,
        rushHourMultiplier: 1.1
      },
      'siberia': { 
        name: '–°–∏–±–∏—Ä—Å–∫–∏–π –§–û', 
        baseRate: 125, 
        coefficient: 1.2,
        rushHourMultiplier: 1.0
      },
      'far-east': { 
        name: '–î–∞–ª—å–Ω–µ–≤–æ—Å—Ç–æ—á–Ω—ã–π –§–û', 
        baseRate: 150, 
        coefficient: 1.4,
        rushHourMultiplier: 1.0
      }
    };
  }

  initCargoTypes() {
    this.cargoTypes = {
      'general': { 
        name: '–û–±—ã—á–Ω—ã–π –≥—Ä—É–∑', 
        multiplier: 1.0, 
        description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –º–µ–±–µ–ª—å, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
        icon: 'üì¶'
      },
      'fragile': { 
        name: '–•—Ä—É–ø–∫–∏–π –≥—Ä—É–∑', 
        multiplier: 1.3, 
        description: '–°—Ç–µ–∫–ª–æ, –∫–µ—Ä–∞–º–∏–∫–∞, —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        icon: '‚ö†Ô∏è'
      },
      'dangerous': { 
        name: '–û–ø–∞—Å–Ω—ã–π –≥—Ä—É–∑', 
        multiplier: 1.8, 
        description: '–•–∏–º–∏–∫–∞—Ç—ã, –≥–∞–∑—ã, —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        icon: '‚ò¢Ô∏è'
      },
      'oversized': { 
        name: '–ù–µ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã–π –≥—Ä—É–∑', 
        multiplier: 1.5, 
        description: '–ö—Ä—É–ø–Ω–æ–≥–∞–±–∞—Ä–∏—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, —Å–ø–µ—Ü—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
        icon: 'üìè'
      },
      'food': { 
        name: '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è', 
        multiplier: 1.25, 
        description: '–¢—Ä–µ–±—É–µ—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞',
        icon: 'ü•ò'
      },
      'documents': { 
        name: '–î–æ–∫—É–º–µ–Ω—Ç—ã', 
        multiplier: 0.8, 
        description: '–î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç, –Ω–µ–±–æ–ª—å—à–∏–µ –ø–æ—Å—ã–ª–∫–∏',
        icon: 'üìÑ'
      },
      'marketplace': { 
        name: '–¢–æ–≤–∞—Ä—ã –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤', 
        multiplier: 1.1, 
        description: '–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ Wildberries, Ozon, —Å–æ—Ä—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã',
        icon: 'üõçÔ∏è'
      }
    };
  }

  initVehicleTypes() {
    this.vehicleTypes = {
      'gazelle': { 
        name: '–ì–∞–∑–µ–ª—å (–¥–æ 1.5—Ç)', 
        capacity: 1.5, 
        basePrice: 3000, 
        kmRate: 40,
        volumeLimit: 9, // –º¬≥
        icon: 'üöê'
      },
      'small-truck': { 
        name: '–ú–∞–ª—ã–π –≥—Ä—É–∑–æ–≤–∏–∫ (–¥–æ 3—Ç)', 
        capacity: 3, 
        basePrice: 4200, 
        kmRate: 50,
        volumeLimit: 18,
        icon: 'üöö'
      },
      'medium-truck': { 
        name: '–°—Ä–µ–¥–Ω–∏–π –≥—Ä—É–∑–æ–≤–∏–∫ (–¥–æ 5—Ç)', 
        capacity: 5, 
        basePrice: 5500, 
        kmRate: 65,
        volumeLimit: 28,
        icon: 'üöõ'
      },
      'large-truck': { 
        name: '–ë–æ–ª—å—à–æ–π –≥—Ä—É–∑–æ–≤–∏–∫ (–¥–æ 10—Ç)', 
        capacity: 10, 
        basePrice: 7500, 
        kmRate: 85,
        volumeLimit: 45,
        icon: 'üöú'
      },
      'semi-truck': { 
        name: '–§—É—Ä–∞ (–¥–æ 20—Ç)', 
        capacity: 20, 
        basePrice: 12000, 
        kmRate: 110,
        volumeLimit: 82,
        icon: 'üöõ'
      }
    };
  }

  init() {
    try {
      this.createCalculatorUI();
      this.bindEvents();
      this.initRealTimeCalculation();
      if (this.config.animationsEnabled) {
        this.initMicroAnimations();
      }
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:', error);
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ–æ—Ä–º—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      this.showFallbackForm();
    }
  }

  showFallbackForm() {
    const container = document.getElementById('calculator-container');
    if (container) {
      container.innerHTML = `
        <div class="calculator-error">
          <h3>üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞</h3>
          <p>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:</p>
          <a href="tel:+74957777777" class="btn btn-primary">üìû +7 (495) 777-77-77</a>
        </div>
      `;
    }
  }

  createCalculatorUI() {
    const calculatorHTML = `
      <div class="smart-calculator card-neumorphic" data-aos="fade-up">
        <div class="calculator-header">
          <div class="header-content">
            <h3><span class="gradient-text">üöõ –£–º–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ª–æ–≥–∏—Å—Ç–∏–∫–∏</span></h3>
            <p class="subtitle">–¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –†–æ—Å—Å–∏–∏</p>
            <div class="calculator-badges">
              <span class="badge badge-success">‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç</span>
              <span class="badge badge-info">üîí –ë–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π</span>
              <span class="badge badge-warning">üì± –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è</span>
            </div>
          </div>
        </div>

        <form id="smart-calc-form" class="calculator-form">
          <!-- –ú–∞—Ä—à—Ä—É—Ç -->
          <div class="form-section animate-on-focus">
            <label class="form-label">
              <span class="label-icon">üìç</span>
              –ú–∞—Ä—à—Ä—É—Ç –¥–æ—Å—Ç–∞–≤–∫–∏
            </label>
            <div class="route-inputs grid-2">
              <div class="input-group">
                <div class="input-wrapper">
                  <input type="text" id="from-city" placeholder="–û—Ç–∫—É–¥–∞" required>
                  <div class="input-icon">üè†</div>
                </div>
                <div class="input-suggestions" id="from-suggestions"></div>
              </div>
              <div class="input-group">
                <div class="input-wrapper">
                  <input type="text" id="to-city" placeholder="–ö—É–¥–∞" required>
                  <div class="input-icon">üéØ</div>
                </div>
                <div class="input-suggestions" id="to-suggestions"></div>
              </div>
            </div>
            <div class="distance-display">
              <div id="route-distance" class="distance-info">
                <span class="distance-placeholder">–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è</span>
              </div>
            </div>
          </div>

          <!-- –¢–∏–ø –≥—Ä—É–∑–∞ -->
          <div class="form-section animate-on-focus">
            <label class="form-label">
              <span class="label-icon">üì¶</span>
              –¢–∏–ø –≥—Ä—É–∑–∞
            </label>
            <div class="cargo-types grid-responsive">
              ${Object.entries(this.cargoTypes).map(([key, type]) => `
                <label class="cargo-type-card ${key === 'general' ? 'selected' : ''}" data-cargo="${key}">
                  <input type="radio" name="cargo-type" value="${key}" ${key === 'general' ? 'checked' : ''}>
                  <div class="card-content">
                    <div class="type-icon">${type.icon}</div>
                    <div class="type-name">${type.name}</div>
                    <div class="type-description">${type.description}</div>
                    <div class="type-multiplier">√ó${type.multiplier}</div>
                  </div>
                  <div class="card-overlay"></div>
                </label>
              `).join('')}
            </div>
          </div>

          <!-- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–∑–∞ -->
          <div class="form-section animate-on-focus">
            <label class="form-label">
              <span class="label-icon">‚öñÔ∏è</span>
              –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–∑–∞
            </label>
            <div class="cargo-params grid-2">
              <div class="param-group">
                <label for="weight" class="param-label">–í–µ—Å (–∫–≥)</label>
                <div class="input-with-slider">
                  <input type="number" id="weight" min="1" max="20000" value="100" required>
                  <div class="slider-container">
                    <input type="range" id="weight-slider" min="1" max="2000" value="100" class="custom-slider">
                    <div class="slider-labels">
                      <span>1 –∫–≥</span>
                      <span>2—Ç</span>
                    </div>
                  </div>
                </div>
              </div>
              <div class="param-group">
                <label for="volume" class="param-label">–û–±—ä–µ–º (–º¬≥)</label>
                <div class="input-with-slider">
                  <input type="number" id="volume" min="0.1" max="100" step="0.1" value="5" required>
                  <div class="slider-container">
                    <input type="range" id="volume-slider" min="1" max="100" value="5" class="custom-slider">
                    <div class="slider-labels">
                      <span>0.1 –º¬≥</span>
                      <span>100 –º¬≥</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div id="vehicle-recommendation" class="vehicle-recommendation"></div>
          </div>

          <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ -->
          <div class="form-section animate-on-focus">
            <label class="form-label">
              <span class="label-icon">üõ†Ô∏è</span>
              –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
            </label>
            <div class="additional-services">

              

              

              
              <label class="service-checkbox modern-checkbox">
                <input type="checkbox" name="services" value="express">
                <span class="checkmark">
                  <i class="check-icon">‚úì</i>
                </span>
                <div class="service-info">
                  <span class="service-name">–≠–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–∞</span>
                  <span class="service-description">–°—Ä–æ—á–Ω–∞—è –ø–æ–¥–∞—á–∞, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç</span>
                  <span class="service-price">–ø–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏</span>
                </div>
              </label>
            </div>
          </div>

          <div class="form-section" style="margin-top: 1.5rem;">
            <label class="service-checkbox modern-checkbox consent-checkbox" style="justify-content: center;">
              <input type="checkbox" name="consent" required checked>
              <span class="checkmark">
                <i class="check-icon">‚úì</i>
              </span>
              <div class="service-info">
                <span class="service-name">–Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) —Å <a href="privacy.html" target="_blank" style="color: var(--primary-600); text-decoration: underline;">–æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a></span>
              </div>
            </label>
          </div>

          <button type="submit" class="btn btn-primary btn-lg calculate-btn">
            <span class="btn-content">
              <i class="btn-icon">üßÆ</i>
              <span class="btn-text">–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å</span>
            </span>
            <div class="btn-ripple"></div>
          </button>
        </form>

        <div id="calculation-result" class="calculation-result"></div>
        
        <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ -->
        <div id="calculation-loader" class="calculation-loader hidden">
          <div class="loader-content">
            <div class="loader-spinner"></div>
            <p>–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç...</p>
          </div>
        </div>
      </div>
    `;

    // –ù–∞–π–¥–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    let calcContainer = document.getElementById('smart-calculator');
    if (!calcContainer) {
      calcContainer = document.createElement('div');
      calcContainer.id = 'smart-calculator';
      calcContainer.className = 'section';
      
      // –í—Å—Ç–∞–≤–∏–º –ø–æ—Å–ª–µ hero —Å–µ–∫—Ü–∏–∏
      const hero = document.querySelector('.hero');
      if (hero && hero.nextElementSibling) {
        hero.parentNode.insertBefore(calcContainer, hero.nextElementSibling);
      } else {
        document.body.appendChild(calcContainer);
      }
    }

    calcContainer.innerHTML = `
      <div class="container">
        ${calculatorHTML}
      </div>
    `;
  }

  bindEvents() {
    const form = document.getElementById('smart-calc-form');
    if (!form) return;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
    form.addEventListener('submit', (e) => this.handleCalculation(e));

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–µ—Ä–æ–≤ —Å –ø–æ–ª—è–º–∏ –≤–≤–æ–¥–∞
    this.syncSliderWithInput('weight', 'weight-slider');
    this.syncSliderWithInput('volume', 'volume-slider');

    // –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤
    this.initCityAutocomplete();

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const inputs = form.querySelectorAll('input, select');
    inputs.forEach(input => {
      input.addEventListener('input', () => {
        clearTimeout(this.calculateTimeout);
        this.calculateTimeout = setTimeout(() => {
          this.calculateDistance();
          this.updateVehicleRecommendation();
        }, this.config.calculateDelay);
      });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≥—Ä—É–∑–∞
    const cargoCards = document.querySelectorAll('.cargo-type-card');
    cargoCards.forEach(card => {
      card.addEventListener('click', () => {
        cargoCards.forEach(c => c.classList.remove('selected'));
        card.classList.add('selected');
        const radio = card.querySelector('input[type="radio"]');
        if (radio) radio.checked = true;
        this.updateVehicleRecommendation();
      });
    });
  }

  syncSliderWithInput(inputId, sliderId) {
    const input = document.getElementById(inputId);
    const slider = document.getElementById(sliderId);

    if (!input || !slider) return;

    input.addEventListener('input', () => {
      const value = Math.min(input.value, slider.max);
      slider.value = value;
      this.updateVehicleRecommendation();
    });

    slider.addEventListener('input', () => {
      input.value = slider.value;
      this.updateVehicleRecommendation();
    });
  }

  initCityAutocomplete() {
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
    const citySet = new Set();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞ –∏–∑ –∫–ª—é—á–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    Object.keys(DISTANCE_DATABASE).forEach(city => citySet.add(city));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π (–º–∞—Ä—à—Ä—É—Ç–æ–≤)
    Object.values(DISTANCE_DATABASE).forEach(routes => {
      Object.keys(routes).forEach(city => citySet.add(city));
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    const priorityCities = ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä'];
    const cities = Array.from(citySet).sort((a, b) => {
      const aIndex = priorityCities.indexOf(a);
      const bIndex = priorityCities.indexOf(b);
      
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏
      if (aIndex !== -1 && bIndex !== -1) return aIndex - bIndex;
      if (aIndex !== -1) return -1;
      if (bIndex !== -1) return 1;
      
      // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
      return a.localeCompare(b, 'ru');
    });

    this.setupAutocomplete('from-city', 'from-suggestions', cities);
    this.setupAutocomplete('to-city', 'to-suggestions', cities);
  }

  setupAutocomplete(inputId, suggestionsId, cities) {
    const input = document.getElementById(inputId);
    const suggestions = document.getElementById(suggestionsId);

    if (!input || !suggestions) return;

    input.addEventListener('input', () => {
      const value = input.value.toLowerCase().trim();
      
      if (value.length < 2) {
        suggestions.style.display = 'none';
        return;
      }

      // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π
      const suggestions = [];
      
      // 1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
      cities.forEach(city => {
        if (city.toLowerCase().startsWith(value)) {
          suggestions.push({ city, priority: 1 });
        }
      });

      // 2. –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –ª—é–±–æ–≥–æ —Å–ª–æ–≤–∞
      cities.forEach(city => {
        const words = city.toLowerCase().split(/[\s-]/);
        if (words.some(word => word.startsWith(value)) && 
            !suggestions.find(s => s.city === city)) {
          suggestions.push({ city, priority: 2 });
        }
      });

      // 3. –°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫—É –≥–¥–µ-—Ç–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
      cities.forEach(city => {
        if (city.toLowerCase().includes(value) && 
            !suggestions.find(s => s.city === city)) {
          suggestions.push({ city, priority: 3 });
        }
      });

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      const filtered = suggestions
        .sort((a, b) => {
          if (a.priority !== b.priority) return a.priority - b.priority;
          return a.city.length - b.city.length; // –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ã—à–µ
        })
        .slice(0, 8)
        .map(s => s.city);

      if (filtered.length > 0) {
        suggestions.innerHTML = filtered.map(city => 
          `<div class="suggestion" data-city="${city}">${city}</div>`
        ).join('');
        suggestions.style.display = 'block';
        
        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        suggestions.querySelectorAll('.suggestion').forEach(item => {
          const cityName = item.textContent;
          const highlightedName = cityName.replace(
            new RegExp(value, 'gi'), 
            match => `<mark>${match}</mark>`
          );
          item.innerHTML = highlightedName;
        });
      } else {
        suggestions.style.display = 'none';
      }
    });

    suggestions.addEventListener('click', (e) => {
      if (e.target.classList.contains('suggestion')) {
        input.value = e.target.dataset.city;
        suggestions.style.display = 'none';
        this.calculateDistance();
      }
    });

    // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–æ–ª—è
    document.addEventListener('click', (e) => {
      if (!input.contains(e.target) && !suggestions.contains(e.target)) {
        suggestions.style.display = 'none';
      }
    });

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫–ª–∞–≤–∏—à–∞–º–∏
    input.addEventListener('keydown', (e) => {
      const activeSuggestion = suggestions.querySelector('.suggestion.active');
      const allSuggestions = suggestions.querySelectorAll('.suggestion');
      
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        const next = activeSuggestion 
          ? activeSuggestion.nextElementSibling 
          : allSuggestions[0];
        if (next) {
          allSuggestions.forEach(s => s.classList.remove('active'));
          next.classList.add('active');
        }
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        const prev = activeSuggestion 
          ? activeSuggestion.previousElementSibling 
          : allSuggestions[allSuggestions.length - 1];
        if (prev) {
          allSuggestions.forEach(s => s.classList.remove('active'));
          prev.classList.add('active');
        }
      } else if (e.key === 'Enter' && activeSuggestion) {
        e.preventDefault();
        input.value = activeSuggestion.dataset.city;
        suggestions.style.display = 'none';
        this.calculateDistance();
      } else if (e.key === 'Escape') {
        suggestions.style.display = 'none';
      }
    });
  }

  // üó∫Ô∏è –°–ò–°–¢–ï–ú–ê –†–ê–°–ß–ï–¢–ê –†–ê–°–°–¢–û–Ø–ù–ò–ô
  calculateDistance() {
    const fromCity = document.getElementById('from-city').value.trim();
    const toCity = document.getElementById('to-city').value.trim();
    
    if (!fromCity || !toCity) {
      document.getElementById('route-distance').innerHTML = 
        '<span class="distance-placeholder">–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è</span>';
      return 0;
    }

    const distance = this.getDistanceBetweenCities(fromCity, toCity);
    
    if (distance > 0) {
      const estimatedTime = this.calculateDeliveryTime(distance);
      document.getElementById('route-distance').innerHTML = `
        <div class="distance-success">
          <span class="distance-value">üìè ${distance} –∫–º</span>
          <span class="time-estimate">‚è±Ô∏è ${estimatedTime}</span>
          <span class="route-type">${distance < 300 ? 'üöÄ –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞' : 'üåç –ú–µ–∂—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞'}</span>
        </div>
      `;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
      this.updateVehicleRecommendation();
      
      return distance;
    } else {
      document.getElementById('route-distance').innerHTML = 
        '<span class="distance-error">‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –¶–µ–Ω–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ</span>';
      return 0;
    }
  }

  getDistanceBetweenCities(from, to) {
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤
    const normalizeCity = (city) => {
      return city.trim()
        .replace(/–≥\.\s*/i, '') // —É–±–∏—Ä–∞–µ–º "–≥."
        .replace(/\s*\([^)]*\)/g, '') // —É–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        .split(',')[0] // –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ –∑–∞–ø—è—Ç–æ–π
        .trim()
        .replace(/^(\w)/, (match) => match.toUpperCase()) // –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è
        .replace(/(\s\w)/g, (match) => match.toUpperCase()); // –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π
    };

    const fromNormalized = normalizeCity(from);
    const toNormalized = normalizeCity(to);

    // –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≥–æ—Ä–æ–¥–∞
    if (fromNormalized === toNormalized) return 0;

    // –ò—â–µ–º –ø—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    if (DISTANCE_DATABASE[fromNormalized] && DISTANCE_DATABASE[fromNormalized][toNormalized]) {
      return DISTANCE_DATABASE[fromNormalized][toNormalized];
    }

    // –ò—â–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if (DISTANCE_DATABASE[toNormalized] && DISTANCE_DATABASE[toNormalized][fromNormalized]) {
      return DISTANCE_DATABASE[toNormalized][fromNormalized];
    }

    // Fuzzy –ø–æ–∏—Å–∫ –¥–ª—è —É—á–µ—Ç–∞ –æ–ø–µ—á–∞—Ç–æ–∫ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è
    const foundFrom = this.findCityFuzzy(fromNormalized);
    const foundTo = this.findCityFuzzy(toNormalized);

    if (foundFrom && foundTo) {
      if (DISTANCE_DATABASE[foundFrom] && DISTANCE_DATABASE[foundFrom][foundTo]) {
        return DISTANCE_DATABASE[foundFrom][foundTo];
      }
      if (DISTANCE_DATABASE[foundTo] && DISTANCE_DATABASE[foundTo][foundFrom]) {
        return DISTANCE_DATABASE[foundTo][foundFrom];
      }
    }

    // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ú–æ—Å–∫–≤—É –∫–∞–∫ —Ç—Ä–∞–Ω–∑–∏—Ç–Ω—ã–π —É–∑–µ–ª
    const fromKey = foundFrom || fromNormalized;
    const toKey = foundTo || toNormalized;
    
    if (fromKey !== '–ú–æ—Å–∫–≤–∞' && toKey !== '–ú–æ—Å–∫–≤–∞') {
      const fromToMoscow = DISTANCE_DATABASE[fromKey]?.['–ú–æ—Å–∫–≤–∞'] || 
                          DISTANCE_DATABASE['–ú–æ—Å–∫–≤–∞']?.[fromKey];
      const moscowToTo = DISTANCE_DATABASE['–ú–æ—Å–∫–≤–∞']?.[toKey] || 
                        DISTANCE_DATABASE[toKey]?.['–ú–æ—Å–∫–≤–∞'];
      
      if (fromToMoscow && moscowToTo) {
        return Math.round(fromToMoscow + moscowToTo * 0.9); // –Ω–µ–±–æ–ª—å—à–∞—è —Å–∫–∏–¥–∫–∞ –∑–∞ —Ç—Ä–∞–Ω–∑–∏—Ç
      }
    }

    // –û—Ü–µ–Ω–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –Ω–µ–∑–Ω–∞–∫–æ–º—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    return this.estimateDistanceByRegion(fromNormalized, toNormalized);
  }

  findCityFuzzy(searchCity) {
    const allCities = new Set();
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –±–∞–∑—ã
    Object.keys(DISTANCE_DATABASE).forEach(city => allCities.add(city));
    Object.values(DISTANCE_DATABASE).forEach(routes => {
      Object.keys(routes).forEach(city => allCities.add(city));
    });

    const searchLower = searchCity.toLowerCase();
    
    // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
    for (const city of allCities) {
      if (city.toLowerCase() === searchLower) return city;
    }
    
    // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞
    for (const city of allCities) {
      if (city.toLowerCase().startsWith(searchLower) || searchLower.startsWith(city.toLowerCase())) {
        return city;
      }
    }
    
    // –°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫—É
    for (const city of allCities) {
      if (city.toLowerCase().includes(searchLower) || searchLower.includes(city.toLowerCase())) {
        return city;
      }
    }
    
    return null;
  }

  estimateDistanceByRegion(from, to) {
    // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    const regionalDistances = {
      '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è': 100,
      '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è': 150,
      '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è': 300,
      '–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∞—è': 500,
      '–Æ–∂–Ω–∞—è': 700,
      '–£—Ä–∞–ª—å—Å–∫–∞—è': 1200,
      '–°–∏–±–∏—Ä—Å–∫–∞—è': 2000,
      '–î–∞–ª—å–Ω–µ–≤–æ—Å—Ç–æ—á–Ω–∞—è': 5000
    };
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–µ–∂—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–∑–æ–∫
    return 800;
  }

  calculateDeliveryTime(distance) {
    if (distance < 50) return '2-4 —á–∞—Å–∞';
    if (distance < 200) return '4-8 —á–∞—Å–æ–≤';
    if (distance < 500) return '1 –¥–µ–Ω—å';
    if (distance < 1000) return '1-2 –¥–Ω—è';
    if (distance < 2000) return '2-3 –¥–Ω—è';
    if (distance < 4000) return '3-5 –¥–Ω–µ–π';
    return '5-7 –¥–Ω–µ–π';
  }

  handleCalculation(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const calculation = this.performCalculation(formData);
    
    if (calculation) {
      this.displayResult(calculation);
      this.sendLeadToTelegram(calculation);
    }
  }

  performCalculation(formData) {
    const distance = this.calculateDistance();
    const weight = parseFloat(formData.get('weight') || 0);
    const volume = parseFloat(formData.get('volume') || 0);
    const cargoType = formData.get('cargo-type') || 'general';
    const services = formData.getAll('services');
    const fromCity = document.getElementById('from-city').value.trim();
    const toCity = document.getElementById('to-city').value.trim();

    if (!fromCity || !toCity) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è');
      return null;
    }

    if (weight <= 0 || volume <= 0) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–∑–∞');
      return null;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø–æ –≤–µ—Å—É –∏ –æ–±—ä–µ–º—É
    const vehicleType = this.selectOptimalVehicle(weight, volume);
    const vehicle = this.vehicleTypes[vehicleType];

    if (!vehicle) {
      alert('–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º.');
      return null;
    }

    // –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    let basePrice = distance > 0 ? 
      vehicle.basePrice + (distance * vehicle.kmRate) : 
      vehicle.basePrice * 2; // –ï—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–≤–µ–ª–∏—á–µ–Ω–Ω—É—é –±–∞–∑–æ–≤—É—é —Å—Ç–∞–≤–∫—É

    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–∏–ø–∞ –≥—Ä—É–∑–∞
    const cargoMultiplier = this.cargoTypes[cargoType].multiplier;
    basePrice *= cargoMultiplier;

    // –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    const regionMultiplier = this.getRegionMultiplier(fromCity, toCity);
    basePrice *= regionMultiplier;

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
    let additionalCost = 0;
    const serviceDetails = [];
    
    services.forEach(service => {
      switch(service) {



        case 'express': 
          // –≠–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
          serviceDetails.push({ name: '–≠–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–∞', cost: '–ø–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏' });
          break;
      }
    });

    const totalPrice = Math.round(basePrice + additionalCost);

    return {
      fromCity,
      toCity,
      distance: distance || '–†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ',
      weight,
      volume,
      cargoType: this.cargoTypes[cargoType].name,
      vehicleType: vehicle.name,
      vehicleIcon: vehicle.icon,
      basePrice: Math.round(basePrice),
      additionalCost: Math.round(additionalCost),
      totalPrice,
      services: serviceDetails,
      deliveryTime: distance > 0 ? this.calculateDeliveryTime(distance) : '2-5 –¥–Ω–µ–π',
      regionMultiplier,
      breakdown: {
        transport: Math.round(basePrice),
        services: Math.round(additionalCost),
        total: totalPrice
      }
    };
  }

  selectOptimalVehicle(weight, volume) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –≤–µ—Å—É
    for (const [vehicleKey, vehicle] of Object.entries(this.vehicleTypes)) {
      if (weight <= vehicle.capacity && volume <= vehicle.volumeLimit) {
        return vehicleKey;
      }
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    return null;
  }

  getRegionMultiplier(fromCity, toCity) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    const moscowRegion = ['–ú–æ—Å–∫–≤–∞', '–ü–æ–¥–æ–ª—å—Å–∫', '–ë–∞–ª–∞—à–∏—Ö–∞', '–•–∏–º–∫–∏', '–ö–æ—Ä–æ–ª—ë–≤', '–ú—ã—Ç–∏—â–∏'];
    const spbRegion = ['–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ì–∞—Ç—á–∏–Ω–∞', '–í—ã–±–æ—Ä–≥'];
    
    const isFromMoscow = moscowRegion.some(city => fromCity.includes(city));
    const isToMoscow = moscowRegion.some(city => toCity.includes(city));
    const isFromSpb = spbRegion.some(city => fromCity.includes(city));
    const isToSpb = spbRegion.some(city => toCity.includes(city));
    
    if ((isFromMoscow || isToMoscow) && (isFromSpb || isToSpb)) {
      return 1.1; // –ú–æ—Å–∫–≤–∞-–°–ü–± –∫–æ—Ä–∏–¥–æ—Ä
    } else if (isFromMoscow || isToMoscow) {
      return 1.05; // –ò–∑/–≤ –ú–æ—Å–∫–≤—É
    } else if (isFromSpb || isToSpb) {
      return 1.03; // –ò–∑/–≤ –°–ü–±
    }
    
    return 1.0; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
  }

  displayResult(calculation) {
    const resultContainer = document.getElementById('calculation-result');
    
    const servicesHtml = calculation.services.length > 0 ? 
      `<div class="services-breakdown">
        <h6>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:</h6>
        ${calculation.services.map(service => 
          `<div class="service-item">
            <span>${service.name}</span>
            <span>+${service.cost.toLocaleString('ru-RU')} ‚ÇΩ</span>
          </div>`
        ).join('')}
      </div>` : '';
    
    const resultHTML = `
      <div class="result-card card animate-fade-in-up">
        <div class="result-header">
          <div class="result-title">
            <h4>üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞</h4>
            <div class="route-info">${calculation.fromCity} ‚Üí ${calculation.toCity}</div>
          </div>
          <div class="total-price">
            <span class="price-value">${calculation.totalPrice.toLocaleString('ru-RU')}</span>
            <span class="price-currency">‚ÇΩ</span>
          </div>
        </div>
        
        <div class="result-details">
          <div class="detail-grid">
            <div class="detail-item">
              <div class="detail-icon">üìè</div>
              <div class="detail-content">
                <div class="detail-label">–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ</div>
                <div class="detail-value">${calculation.distance} ${typeof calculation.distance === 'number' ? '–∫–º' : ''}</div>
              </div>
            </div>
            
            <div class="detail-item">
              <div class="detail-icon">‚öñÔ∏è</div>
              <div class="detail-content">
                <div class="detail-label">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–∑–∞</div>
                <div class="detail-value">${calculation.weight} –∫–≥, ${calculation.volume} –º¬≥</div>
              </div>
            </div>
            
            <div class="detail-item">
              <div class="detail-icon">${calculation.vehicleIcon}</div>
              <div class="detail-content">
                <div class="detail-label">–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç</div>
                <div class="detail-value">${calculation.vehicleType}</div>
              </div>
            </div>
            
            <div class="detail-item">
              <div class="detail-icon">‚è±Ô∏è</div>
              <div class="detail-content">
                <div class="detail-label">–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏</div>
                <div class="detail-value">${calculation.deliveryTime}</div>
              </div>
            </div>
          </div>
          
          <div class="cargo-type-display">
            <span class="cargo-label">–¢–∏–ø –≥—Ä—É–∑–∞:</span>
            <span class="cargo-value">${calculation.cargoType}</span>
          </div>
        </div>

        ${servicesHtml}

        <div class="price-breakdown">
          <div class="breakdown-row">
            <span>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</span>
            <span>${calculation.breakdown.transport.toLocaleString('ru-RU')} ‚ÇΩ</span>
          </div>
          ${calculation.breakdown.services > 0 ? `
            <div class="breakdown-row">
              <span>–î–æ–ø. —É—Å–ª—É–≥–∏:</span>
              <span>${calculation.breakdown.services.toLocaleString('ru-RU')} ‚ÇΩ</span>
            </div>
          ` : ''}
          <div class="breakdown-total">
            <span>–ò—Ç–æ–≥–æ:</span>
            <span>${calculation.totalPrice.toLocaleString('ru-RU')} ‚ÇΩ</span>
          </div>
        </div>

        <div class="result-actions">
          <button class="btn btn-primary" onclick="this.openLeadModal()">
            üìû –ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É
          </button>
          <a href="https://t.me/father_bot" target="_blank" class="btn btn-telegram" style="background: #0088cc; color: white; text-decoration: none; display: inline-flex; align-items: center; gap: 0.5rem;">
            üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram
          </a>
          <button class="btn btn-secondary" onclick="this.saveCalculation()">
            üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç
          </button>
          <button class="btn btn-outline" onclick="window.print()">
            üñ®Ô∏è –†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å
          </button>
        </div>

        <div class="result-note">
          <div class="note-content">
            <div class="note-icon">‚ÑπÔ∏è</div>
            <div class="note-text">
              <strong>–í–∞–∂–Ω–æ:</strong> –†–∞—Å—á–µ—Ç –Ω–æ—Å–∏—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. 
              –¢–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ—Å–º–æ—Ç—Ä–∞ –≥—Ä—É–∑–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞.
            </div>
          </div>
        </div>
      </div>
    `;

    resultContainer.innerHTML = resultHTML;
    resultContainer.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—á–µ—Ç
    this.lastCalculation = calculation;
  }

  sendLeadToTelegram(calculation) {
    const message = `
üöõ –ù–û–í–´–ô –†–ê–°–ß–ï–¢ –õ–û–ì–ò–°–¢–ò–ö–ò

üìç –ú–∞—Ä—à—Ä—É—Ç: ${calculation.fromCity} ‚Üí ${calculation.toCity}
üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${calculation.distance} ${typeof calculation.distance === 'number' ? '–∫–º' : ''}
‚öñÔ∏è –ì—Ä—É–∑: ${calculation.weight} –∫–≥, ${calculation.volume} –º¬≥ (${calculation.cargoType})
üöö –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${calculation.vehicleType}
‚è±Ô∏è –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ${calculation.deliveryTime}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${calculation.totalPrice.toLocaleString('ru-RU')} ‚ÇΩ

${calculation.services.length ? `üõ†Ô∏è –£—Å–ª—É–≥–∏:\n${calculation.services.map(s => `‚Ä¢ ${s.name}: +${s.cost.toLocaleString('ru-RU')} ‚ÇΩ`).join('\n')}` : ''}

üíπ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:
‚Ä¢ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${calculation.breakdown.transport.toLocaleString('ru-RU')} ‚ÇΩ
${calculation.breakdown.services ? `‚Ä¢ –£—Å–ª—É–≥–∏: ${calculation.breakdown.services.toLocaleString('ru-RU')} ‚ÇΩ` : ''}

#—Ä–∞—Å—á–µ—Ç #–ª–æ–≥–∏—Å—Ç–∏–∫–∞ #avtogost
`;

    fetch('https://api.telegram.org/bot7999458907:AAHAnyTyvfteW1WNKpns8w35jl14f0wn5es/sendMessage', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: 399711406,
        text: message
      })
    }).catch(() => {
      console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram');
    });
  }

  initAnimations() {
    // Intersection Observer –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('revealed');
        }
      });
    });

    document.querySelectorAll('.reveal').forEach(el => {
      observer.observe(el);
    });
  }

  updateCalculationPreview() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —Ä–∞—Å—á–µ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const distance = this.calculateDistance();
    if (distance > 0) {
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–≤—å—é —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  updateVehicleRecommendation() {
    const weight = parseFloat(document.getElementById('weight').value);
    const volume = parseFloat(document.getElementById('volume').value);
    const cargoType = document.querySelector('input[name="cargo-type"]:checked').value;

    let recommendedVehicle = null;
    let maxCapacity = -1;

    for (const [vehicleKey, vehicle] of Object.entries(this.vehicleTypes)) {
      if (weight <= vehicle.capacity && volume <= vehicle.volumeLimit) {
        if (vehicle.capacity > maxCapacity) {
          maxCapacity = vehicle.capacity;
          recommendedVehicle = vehicle;
        }
      }
    }

    const recommendationContainer = document.getElementById('vehicle-recommendation');
    if (recommendedVehicle) {
      recommendationContainer.innerHTML = `
        <div class="recommendation-card">
          <h5>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:</h5>
          <div class="recommendation-content">
            <div class="recommendation-icon">${recommendedVehicle.icon}</div>
            <div class="recommendation-details">
              <p>${recommendedVehicle.name}</p>
              <p>–ì—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å: ${recommendedVehicle.capacity} —Ç</p>
              <p>–û–±—ä–µ–º: ${recommendedVehicle.volumeLimit} –º¬≥</p>
            </div>
          </div>
        </div>
      `;
    } else {
      recommendationContainer.innerHTML = `
        <div class="recommendation-card">
          <h5>–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:</h5>
          <div class="recommendation-content">
            <p>–í–∞—à –≥—Ä—É–∑ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.</p>
            <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.</p>
          </div>
        </div>
      `;
    }
  }

  initRealTimeCalculation() {
    let lastCalculationTime = 0;
    const form = document.getElementById('smart-calc-form');
    const loader = document.getElementById('calculation-loader');

    form.addEventListener('submit', (e) => {
      if (this.config.animationsEnabled) {
        e.preventDefault();
        loader.classList.remove('hidden');
        setTimeout(() => {
          this.handleCalculation(e);
          loader.classList.add('hidden');
        }, this.config.calculateDelay);
      }
    });
  }

  initMicroAnimations() {
    // –ú–∏–∫—Ä–æ–∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫
    const sliders = document.querySelectorAll('.custom-slider');
    const checkboxes = document.querySelectorAll('.modern-checkbox input[type="checkbox"]');
    const calculateBtn = document.querySelector('.calculate-btn');

    sliders.forEach(slider => {
      const labels = slider.nextElementSibling?.querySelectorAll('.slider-labels span');
      if (!labels || labels.length < 2) return;
      
      const minValue = parseFloat(labels[0].textContent.replace(/ –∫–≥| –º¬≥/g, ''));
      const maxValue = parseFloat(labels[1].textContent.replace(/ –∫–≥| –º¬≥/g, ''));

      slider.addEventListener('input', () => {
        const value = Math.min(slider.value, slider.max);
        slider.value = value;
        this.updateSliderLabels(slider, labels, minValue, maxValue);
      });

      slider.addEventListener('change', () => {
        this.updateSliderLabels(slider, labels, minValue, maxValue);
      });
    });

    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', () => {
        const checkmark = checkbox.nextElementSibling?.querySelector('.check-icon');
        if (checkmark) {
          if (checkbox.checked) {
            checkmark.parentElement.classList.add('checked');
          } else {
            checkmark.parentElement.classList.remove('checked');
          }
        }
      });
    });

    if (calculateBtn) {
      calculateBtn.addEventListener('click', (e) => {
        const ripple = calculateBtn.querySelector('.btn-ripple');
        if (ripple) {
          const rect = calculateBtn.getBoundingClientRect();
          ripple.style.left = `${e.clientX - rect.left}px`;
          ripple.style.top = `${e.clientY - rect.top}px`;
          ripple.classList.add('active');
          setTimeout(() => ripple.classList.remove('active'), 500);
        }
      });
    }
  }

  updateSliderLabels(slider, labels, minValue, maxValue) {
    const value = parseFloat(slider.value);
    let currentLabel = labels[0];
    if (value > minValue + (maxValue - minValue) / 2) {
      currentLabel = labels[1];
    }
    currentLabel.style.color = 'var(--primary-600)';
    currentLabel.style.fontWeight = 'bold';
    labels.forEach(label => {
      if (label !== currentLabel) {
        label.style.color = 'var(--text-color)';
        label.style.fontWeight = 'normal';
      }
    });
  }

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  openLeadModal() {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞—è–≤–∫–∏
    const leadModal = document.getElementById('lead-modal');
    if (leadModal) {
      leadModal.style.display = 'flex';
      
      // –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ä–∞—Å—á–µ—Ç–∞
      if (this.lastCalculation) {
        const form = leadModal.querySelector('form');
        if (form) {
          // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–∞–Ω–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞
          const commentField = form.querySelector('textarea[name="comment"]');
          if (commentField) {
            commentField.value = `–†–∞—Å—á–µ—Ç –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:
–ú–∞—Ä—à—Ä—É—Ç: ${this.lastCalculation.fromCity} ‚Üí ${this.lastCalculation.toCity}
–ì—Ä—É–∑: ${this.lastCalculation.weight} –∫–≥, ${this.lastCalculation.volume} –º¬≥
–¢–∏–ø: ${this.lastCalculation.cargoType}
–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${this.lastCalculation.vehicleType}
–°—Ç–æ–∏–º–æ—Å—Ç—å: ${this.lastCalculation.totalPrice.toLocaleString('ru-RU')} ‚ÇΩ`;
          }
        }
      }
    } else {
      // –ï—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–ª–µ—Ä—Ç
      alert('–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7 (999) 123-45-67');
    }
  }

  saveCalculation() {
    if (!this.lastCalculation) {
      alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞
    const calculationText = `
–†–ê–°–ß–ï–¢ –î–û–°–¢–ê–í–ö–ò –ê–í–¢–û–ì–û–°–¢
========================

–ú–∞—Ä—à—Ä—É—Ç: ${this.lastCalculation.fromCity} ‚Üí ${this.lastCalculation.toCity}
–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${this.lastCalculation.distance} ${typeof this.lastCalculation.distance === 'number' ? '–∫–º' : ''}
–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ${this.lastCalculation.deliveryTime}

–ü–ê–†–ê–ú–ï–¢–†–´ –ì–†–£–ó–ê:
–í–µ—Å: ${this.lastCalculation.weight} –∫–≥
–û–±—ä–µ–º: ${this.lastCalculation.volume} –º¬≥
–¢–∏–ø: ${this.lastCalculation.cargoType}

–¢–†–ê–ù–°–ü–û–†–¢:
${this.lastCalculation.vehicleType}

–°–¢–û–ò–ú–û–°–¢–¨:
–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: ${this.lastCalculation.breakdown.transport.toLocaleString('ru-RU')} ‚ÇΩ
${this.lastCalculation.breakdown.services > 0 ? `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏: ${this.lastCalculation.breakdown.services.toLocaleString('ru-RU')} ‚ÇΩ` : ''}
–ò–¢–û–ì–û: ${this.lastCalculation.totalPrice.toLocaleString('ru-RU')} ‚ÇΩ

${this.lastCalculation.services.length > 0 ? `\n–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–°–õ–£–ì–ò:\n${this.lastCalculation.services.map(s => `‚Ä¢ ${s.name}: +${s.cost.toLocaleString('ru-RU')} ‚ÇΩ`).join('\n')}` : ''}

–í–ê–ñ–ù–û: –†–∞—Å—á–µ—Ç –Ω–æ—Å–∏—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä.
–¢–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ—Å–º–æ—Ç—Ä–∞ –≥—Ä—É–∑–∞.

–ö–æ–Ω—Ç–∞–∫—Ç—ã AvtoGOST:
–¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67
Email: info@avtogost.ru
–°–∞–π—Ç: https://avtogost.ru

–î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞: ${new Date().toLocaleString('ru-RU')}
`;

    // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–µ–∑ File API (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã)
    if ('showSaveFilePicker' in window) {
      try {
        this.saveCalculationModern(calculationText);
      } catch (error) {
        this.saveCalculationFallback(calculationText);
      }
    } else {
      this.saveCalculationFallback(calculationText);
    }
  }

  async saveCalculationModern(text) {
    try {
      const fileHandle = await window.showSaveFilePicker({
        suggestedName: `avtogost_calculation_${Date.now()}.txt`,
        types: [{
          description: '–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã',
          accept: { 'text/plain': ['.txt'] }
        }]
      });
      
      const writable = await fileHandle.createWritable();
      await writable.write(text);
      await writable.close();
      
      this.showNotification('‚úÖ –†–∞—Å—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success');
    } catch (error) {
      if (error.name !== 'AbortError') {
        this.saveCalculationFallback(text);
      }
    }
  }

  saveCalculationFallback(text) {
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const blob = new Blob([text], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `avtogost_calculation_${Date.now()}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    this.showNotification('üì• –†–∞—Å—á–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!', 'success');
  }

  showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
      color: white;
      padding: 1rem 1.5rem;
      border-radius: 8px;
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
      z-index: 10000;
      opacity: 0;
      transform: translateX(100%);
      transition: all 0.3s ease-out;
      font-weight: 600;
      max-width: 300px;
    `;
    
    document.body.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
      notification.style.opacity = '1';
      notification.style.transform = 'translateX(0)';
    }, 100);
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      notification.style.opacity = '0';
      notification.style.transform = 'translateX(100%)';
      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 300);
    }, 3000);
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
window.openLeadModal = function() {
  if (window.calculatorInstance && window.calculatorInstance.openLeadModal) {
    window.calculatorInstance.openLeadModal();
  }
};

window.saveCalculation = function() {
  if (window.calculatorInstance && window.calculatorInstance.saveCalculation) {
    window.calculatorInstance.saveCalculation();
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
  window.calculatorInstance = new SmartLogisticsCalculator();
  console.log('‚úÖ –£–º–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ª–æ–≥–∏—Å—Ç–∏–∫–∏ v3.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
});
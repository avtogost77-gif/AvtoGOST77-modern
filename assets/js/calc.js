// ===============================================
// –£–ú–ù–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –õ–û–ì–ò–°–¢–ò–ö–ò v2.0
// –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
// ===============================================

class SmartLogisticsCalculator {
  constructor() {
    this.zones = {
      'moscow-center': { name: '–¶–µ–Ω—Ç—Ä –ú–æ—Å–∫–≤—ã', baseRate: 120, coefficient: 1.2 },
      'moscow-region': { name: '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', baseRate: 95, coefficient: 1.0 },
      'central': { name: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –§–û', baseRate: 85, coefficient: 0.9 },
      'northwest': { name: '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π –§–û', baseRate: 90, coefficient: 0.95 },
      'south': { name: '–Æ–∂–Ω—ã–π –§–û', baseRate: 75, coefficient: 0.85 },
      'volga': { name: '–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π –§–û', baseRate: 80, coefficient: 0.88 },
      'ural': { name: '–£—Ä–∞–ª—å—Å–∫–∏–π –§–û', baseRate: 100, coefficient: 1.1 },
      'siberia': { name: '–°–∏–±–∏—Ä—Å–∫–∏–π –§–û', baseRate: 110, coefficient: 1.15 },
      'far-east': { name: '–î–∞–ª—å–Ω–µ–≤–æ—Å—Ç–æ—á–Ω—ã–π –§–û', baseRate: 130, coefficient: 1.3 }
    };

    this.cargoTypes = {
      'general': { name: '–û–±—ã—á–Ω—ã–π –≥—Ä—É–∑', multiplier: 1.0, description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –º–µ–±–µ–ª—å, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ' },
      'fragile': { name: '–•—Ä—É–ø–∫–∏–π –≥—Ä—É–∑', multiplier: 1.3, description: '–°—Ç–µ–∫–ª–æ, –∫–µ—Ä–∞–º–∏–∫–∞, —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞' },
      'dangerous': { name: '–û–ø–∞—Å–Ω—ã–π –≥—Ä—É–∑', multiplier: 1.8, description: '–•–∏–º–∏–∫–∞—Ç—ã, –≥–∞–∑—ã, –≤–∑—Ä—ã–≤—á–∞—Ç—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞' },
      'oversized': { name: '–ù–µ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã–π –≥—Ä—É–∑', multiplier: 1.5, description: '–ö—Ä—É–ø–Ω–æ–≥–∞–±–∞—Ä–∏—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ' },
      'food': { name: '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è', multiplier: 1.2, description: '–¢—Ä–µ–±—É–µ—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞' },
      'medical': { name: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã', multiplier: 1.4, description: '–õ–µ–∫–∞—Ä—Å—Ç–≤–∞, –º–µ–¥–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ' }
    };

    this.vehicleTypes = {
      'gazelle': { name: '–ì–∞–∑–µ–ª—å (–¥–æ 1.5—Ç)', capacity: 1.5, basePrice: 2500, kmRate: 35 },
      'small-truck': { name: '–ú–∞–ª—ã–π –≥—Ä—É–∑–æ–≤–∏–∫ (–¥–æ 3—Ç)', capacity: 3, basePrice: 3500, kmRate: 45 },
      'medium-truck': { name: '–°—Ä–µ–¥–Ω–∏–π –≥—Ä—É–∑–æ–≤–∏–∫ (–¥–æ 5—Ç)', capacity: 5, basePrice: 4500, kmRate: 55 },
      'large-truck': { name: '–ë–æ–ª—å—à–æ–π –≥—Ä—É–∑–æ–≤–∏–∫ (–¥–æ 10—Ç)', capacity: 10, basePrice: 6500, kmRate: 75 },
      'semi-truck': { name: '–§—É—Ä–∞ (–¥–æ 20—Ç)', capacity: 20, basePrice: 9500, kmRate: 95 }
    };

    this.init();
  }

  init() {
    this.createCalculatorUI();
    this.bindEvents();
    this.initAnimations();
  }

  createCalculatorUI() {
    const calculatorHTML = `
      <div class="smart-calculator card-neumorphic">
        <div class="calculator-header">
          <h3>üöõ –£–º–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ª–æ–≥–∏—Å—Ç–∏–∫–∏</h3>
          <p class="text-muted">–¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –†–æ—Å—Å–∏–∏</p>
        </div>

        <form id="smart-calc-form" class="calculator-form">
          <!-- –ú–∞—Ä—à—Ä—É—Ç -->
          <div class="form-section">
            <label class="form-label">üìç –ú–∞—Ä—à—Ä—É—Ç –¥–æ—Å—Ç–∞–≤–∫–∏</label>
            <div class="route-inputs grid-2">
              <div class="input-group">
                <input type="text" id="from-city" placeholder="–û—Ç–∫—É–¥–∞" required>
                <div class="input-suggestions" id="from-suggestions"></div>
              </div>
              <div class="input-group">
                <input type="text" id="to-city" placeholder="–ö—É–¥–∞" required>
                <div class="input-suggestions" id="to-suggestions"></div>
              </div>
            </div>
            <div class="distance-display">
              <span id="route-distance">–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è</span>
            </div>
          </div>

          <!-- –¢–∏–ø –≥—Ä—É–∑–∞ -->
          <div class="form-section">
            <label class="form-label">üì¶ –¢–∏–ø –≥—Ä—É–∑–∞</label>
            <div class="cargo-types grid-3">
              ${Object.entries(this.cargoTypes).map(([key, type]) => `
                <label class="cargo-type-card">
                  <input type="radio" name="cargo-type" value="${key}" ${key === 'general' ? 'checked' : ''}>
                  <div class="card-content">
                    <div class="type-name">${type.name}</div>
                    <div class="type-description">${type.description}</div>
                    <div class="type-multiplier">√ó${type.multiplier}</div>
                  </div>
                </label>
              `).join('')}
            </div>
          </div>

          <!-- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–∑–∞ -->
          <div class="form-section">
            <label class="form-label">‚öñÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–∑–∞</label>
            <div class="cargo-params grid-2">
              <div class="input-group">
                <label for="weight">–í–µ—Å (–∫–≥)</label>
                <input type="number" id="weight" min="1" max="20000" required>
                <div class="input-slider">
                  <input type="range" id="weight-slider" min="1" max="1000" value="100">
                </div>
              </div>
              <div class="input-group">
                <label for="volume">–û–±—ä–µ–º (–º¬≥)</label>
                <input type="number" id="volume" min="0.1" max="100" step="0.1" required>
                <div class="input-slider">
                  <input type="range" id="volume-slider" min="1" max="50" value="5">
                </div>
              </div>
            </div>
          </div>

          <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ -->
          <div class="form-section">
            <label class="form-label">üõ†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏</label>
            <div class="additional-services">
              <label class="service-checkbox">
                <input type="checkbox" name="services" value="loading">
                <span class="checkmark"></span>
                <div class="service-info">
                  <span class="service-name">–ü–æ–≥—Ä—É–∑–∫–∞/—Ä–∞–∑–≥—Ä—É–∑–∫–∞</span>
                  <span class="service-price">+1500‚ÇΩ</span>
                </div>
              </label>
              <label class="service-checkbox">
                <input type="checkbox" name="services" value="packing">
                <span class="checkmark"></span>
                <div class="service-info">
                  <span class="service-name">–£–ø–∞–∫–æ–≤–∫–∞</span>
                  <span class="service-price">+800‚ÇΩ</span>
                </div>
              </label>
              <label class="service-checkbox">
                <input type="checkbox" name="services" value="insurance">
                <span class="checkmark"></span>
                <div class="service-info">
                  <span class="service-name">–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ</span>
                  <span class="service-price">+3% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏</span>
                </div>
              </label>
              <label class="service-checkbox">
                <input type="checkbox" name="services" value="express">
                <span class="checkmark"></span>
                <div class="service-info">
                  <span class="service-name">–≠–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–∞</span>
                  <span class="service-price">+50% –∫ —Ç–∞—Ä–∏—Ñ—É</span>
                </div>
              </label>
            </div>
          </div>

          <button type="submit" class="btn btn-primary btn-lg calculate-btn">
            <i class="bi bi-calculator"></i>
            –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å
          </button>
        </form>

        <div id="calculation-result" class="calculation-result"></div>
      </div>
    `;

    // –ù–∞–π–¥–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    let calcContainer = document.getElementById('smart-calculator');
    if (!calcContainer) {
      calcContainer = document.createElement('div');
      calcContainer.id = 'smart-calculator';
      calcContainer.className = 'section';
      
      // –í—Å—Ç–∞–≤–∏–º –ø–æ—Å–ª–µ hero —Å–µ–∫—Ü–∏–∏
      const hero = document.querySelector('.hero');
      if (hero && hero.nextElementSibling) {
        hero.parentNode.insertBefore(calcContainer, hero.nextElementSibling);
      } else {
        document.body.appendChild(calcContainer);
      }
    }

    calcContainer.innerHTML = `
      <div class="container">
        ${calculatorHTML}
      </div>
    `;
  }

  bindEvents() {
    const form = document.getElementById('smart-calc-form');
    if (!form) return;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
    form.addEventListener('submit', (e) => this.handleCalculation(e));

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–µ—Ä–æ–≤ —Å –ø–æ–ª—è–º–∏ –≤–≤–æ–¥–∞
    this.syncSliderWithInput('weight', 'weight-slider');
    this.syncSliderWithInput('volume', 'volume-slider');

    // –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤
    this.initCityAutocomplete();

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    form.addEventListener('input', () => this.updateCalculationPreview());
  }

  syncSliderWithInput(inputId, sliderId) {
    const input = document.getElementById(inputId);
    const slider = document.getElementById(sliderId);

    if (!input || !slider) return;

    input.addEventListener('input', () => {
      const value = Math.min(input.value, slider.max);
      slider.value = value;
    });

    slider.addEventListener('input', () => {
      input.value = slider.value;
    });
  }

  initCityAutocomplete() {
    const cities = [
      '–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å',
      '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ß–µ–ª—è–±–∏–Ω—Å–∫', '–°–∞–º–∞—Ä–∞', '–û–º—Å–∫', '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É',
      '–£—Ñ–∞', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–í–æ—Ä–æ–Ω–µ–∂', '–ü–µ—Ä–º—å', '–í–æ–ª–≥–æ–≥—Ä–∞–¥', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä',
      '–°–∞—Ä–∞—Ç–æ–≤', '–¢—é–º–µ–Ω—å', '–¢–æ–ª—å—è—Ç—Ç–∏', '–ò–∂–µ–≤—Å–∫', '–ë–∞—Ä–Ω–∞—É–ª', '–£–ª—å—è–Ω–æ–≤—Å–∫',
      '–ò—Ä–∫—É—Ç—Å–∫', '–•–∞–±–∞—Ä–æ–≤—Å–∫', '–Ø—Ä–æ—Å–ª–∞–≤–ª—å', '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', '–ú–∞—Ö–∞—á–∫–∞–ª–∞',
      '–¢–æ–º—Å–∫', '–û—Ä–µ–Ω–±—É—Ä–≥', '–ö–µ–º–µ—Ä–æ–≤–æ', '–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫', '–†—è–∑–∞–Ω—å', '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å'
    ];

    this.setupAutocomplete('from-city', 'from-suggestions', cities);
    this.setupAutocomplete('to-city', 'to-suggestions', cities);
  }

  setupAutocomplete(inputId, suggestionsId, cities) {
    const input = document.getElementById(inputId);
    const suggestions = document.getElementById(suggestionsId);

    input.addEventListener('input', () => {
      const value = input.value.toLowerCase();
      const filtered = cities.filter(city => 
        city.toLowerCase().includes(value)
      ).slice(0, 5);

      if (value && filtered.length) {
        suggestions.innerHTML = filtered.map(city => 
          `<div class="suggestion" data-city="${city}">${city}</div>`
        ).join('');
        suggestions.style.display = 'block';
      } else {
        suggestions.style.display = 'none';
      }
    });

    suggestions.addEventListener('click', (e) => {
      if (e.target.classList.contains('suggestion')) {
        input.value = e.target.dataset.city;
        suggestions.style.display = 'none';
        this.calculateDistance();
      }
    });
  }

  calculateDistance() {
    const fromCity = document.getElementById('from-city').value;
    const toCity = document.getElementById('to-city').value;
    
    if (fromCity && toCity) {
      // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ API)
      const distance = this.getDistanceBetweenCities(fromCity, toCity);
      document.getElementById('route-distance').innerHTML = 
        `üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: <strong>${distance} –∫–º</strong>`;
      return distance;
    }
    return 0;
  }

  getDistanceBetweenCities(from, to) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –±–∞–∑–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - API –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç –∏–ª–∏ Google Maps)
    const distances = {
      '–ú–æ—Å–∫–≤–∞-–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 635,
      '–ú–æ—Å–∫–≤–∞-–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 1416,
      '–ú–æ—Å–∫–≤–∞-–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 3303,
      '–ú–æ—Å–∫–≤–∞-–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä': 1200,
      '–ú–æ—Å–∫–≤–∞-–ö–∞–∑–∞–Ω—å': 815
    };

    const key1 = `${from}-${to}`;
    const key2 = `${to}-${from}`;
    
    return distances[key1] || distances[key2] || Math.floor(Math.random() * 2000) + 200;
  }

  handleCalculation(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const calculation = this.performCalculation(formData);
    this.displayResult(calculation);
    this.sendLeadToTelegram(calculation);
  }

  performCalculation(formData) {
    const distance = this.calculateDistance();
    const weight = parseFloat(formData.get('weight') || 0);
    const volume = parseFloat(formData.get('volume') || 0);
    const cargoType = formData.get('cargo-type') || 'general';
    const services = formData.getAll('services');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø–æ –≤–µ—Å—É
    const vehicleType = this.selectVehicleType(weight);
    const vehicle = this.vehicleTypes[vehicleType];

    // –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    let basePrice = vehicle.basePrice + (distance * vehicle.kmRate);

    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–∏–ø–∞ –≥—Ä—É–∑–∞
    const cargoMultiplier = this.cargoTypes[cargoType].multiplier;
    basePrice *= cargoMultiplier;

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
    let additionalCost = 0;
    services.forEach(service => {
      switch(service) {
        case 'loading': additionalCost += 1500; break;
        case 'packing': additionalCost += 800; break;
        case 'insurance': additionalCost += basePrice * 0.03; break;
        case 'express': basePrice *= 1.5; break;
      }
    });

    const totalPrice = Math.round(basePrice + additionalCost);

    return {
      distance,
      weight,
      volume,
      cargoType: this.cargoTypes[cargoType].name,
      vehicleType: vehicle.name,
      basePrice: Math.round(basePrice),
      additionalCost: Math.round(additionalCost),
      totalPrice,
      services: services.map(s => this.getServiceName(s)),
      breakdown: this.getPriceBreakdown(basePrice, additionalCost, services)
    };
  }

  selectVehicleType(weight) {
    if (weight <= 1.5) return 'gazelle';
    if (weight <= 3) return 'small-truck';
    if (weight <= 5) return 'medium-truck';
    if (weight <= 10) return 'large-truck';
    return 'semi-truck';
  }

  getServiceName(service) {
    const names = {
      'loading': '–ü–æ–≥—Ä—É–∑–∫–∞/—Ä–∞–∑–≥—Ä—É–∑–∫–∞',
      'packing': '–£–ø–∞–∫–æ–≤–∫–∞',
      'insurance': '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ',
      'express': '–≠–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–∞'
    };
    return names[service] || service;
  }

  getPriceBreakdown(basePrice, additionalCost, services) {
    return {
      transport: Math.round(basePrice),
      services: Math.round(additionalCost),
      total: Math.round(basePrice + additionalCost)
    };
  }

  displayResult(calculation) {
    const resultContainer = document.getElementById('calculation-result');
    
    const resultHTML = `
      <div class="result-card card animate-fade-in-up">
        <div class="result-header">
          <h4>üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞</h4>
          <div class="total-price">${calculation.totalPrice.toLocaleString('ru-RU')} ‚ÇΩ</div>
        </div>
        
        <div class="result-details">
          <div class="detail-row">
            <span>–ú–∞—Ä—à—Ä—É—Ç:</span>
            <span>${calculation.distance} –∫–º</span>
          </div>
          <div class="detail-row">
            <span>–ì—Ä—É–∑:</span>
            <span>${calculation.weight} –∫–≥, ${calculation.cargoType}</span>
          </div>
          <div class="detail-row">
            <span>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:</span>
            <span>${calculation.vehicleType}</span>
          </div>
          ${calculation.services.length ? `
            <div class="detail-row">
              <span>–£—Å–ª—É–≥–∏:</span>
              <span>${calculation.services.join(', ')}</span>
            </div>
          ` : ''}
        </div>

        <div class="price-breakdown">
          <div class="breakdown-row">
            <span>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</span>
            <span>${calculation.breakdown.transport.toLocaleString('ru-RU')} ‚ÇΩ</span>
          </div>
          ${calculation.breakdown.services ? `
            <div class="breakdown-row">
              <span>–î–æ–ø. —É—Å–ª—É–≥–∏:</span>
              <span>${calculation.breakdown.services.toLocaleString('ru-RU')} ‚ÇΩ</span>
            </div>
          ` : ''}
          <div class="breakdown-total">
            <span>–ò—Ç–æ–≥–æ:</span>
            <span>${calculation.totalPrice.toLocaleString('ru-RU')} ‚ÇΩ</span>
          </div>
        </div>

        <div class="result-actions">
          <button class="btn btn-primary" onclick="this.openLeadModal()">
            üìû –ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É
          </button>
          <button class="btn btn-secondary" onclick="this.saveCalculation()">
            üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç
          </button>
        </div>

        <div class="result-note">
          <small>* –†–∞—Å—á–µ—Ç –Ω–æ—Å–∏—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –¢–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ—Å–º–æ—Ç—Ä–∞ –≥—Ä—É–∑–∞.</small>
        </div>
      </div>
    `;

    resultContainer.innerHTML = resultHTML;
    resultContainer.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
  }

  sendLeadToTelegram(calculation) {
    const message = `
üöõ –ù–û–í–´–ô –†–ê–°–ß–ï–¢ –õ–û–ì–ò–°–¢–ò–ö–ò

üìç –ú–∞—Ä—à—Ä—É—Ç: ${calculation.distance} –∫–º
‚öñÔ∏è –ì—Ä—É–∑: ${calculation.weight} –∫–≥ (${calculation.cargoType})
üöö –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${calculation.vehicleType}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${calculation.totalPrice.toLocaleString('ru-RU')} ‚ÇΩ

${calculation.services.length ? `üõ†Ô∏è –£—Å–ª—É–≥–∏: ${calculation.services.join(', ')}` : ''}

–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:
‚Ä¢ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${calculation.breakdown.transport.toLocaleString('ru-RU')} ‚ÇΩ
${calculation.breakdown.services ? `‚Ä¢ –£—Å–ª—É–≥–∏: ${calculation.breakdown.services.toLocaleString('ru-RU')} ‚ÇΩ` : ''}
`;

    fetch('https://api.telegram.org/bot7999458907:AAHAnyTyvfteW1WNKpns8w35jl14f0wn5es/sendMessage', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: 399711406,
        text: message
      })
    }).catch(() => {
      console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram');
    });
  }

  initAnimations() {
    // Intersection Observer –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('revealed');
        }
      });
    });

    document.querySelectorAll('.reveal').forEach(el => {
      observer.observe(el);
    });
  }

  updateCalculationPreview() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —Ä–∞—Å—á–µ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const distance = this.calculateDistance();
    if (distance > 0) {
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–≤—å—é —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    }
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
  window.smartCalculator = new SmartLogisticsCalculator();
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function openLeadModal() {
  // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –∑–∞—è–≤–∫–∏
  const modal = document.getElementById('lead-modal');
  if (modal) {
    modal.classList.add('open');
  }
}

function saveCalculation() {
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –≤ localStorage
  const calculation = window.smartCalculator.lastCalculation;
  if (calculation) {
    localStorage.setItem('lastCalculation', JSON.stringify(calculation));
    alert('–†–∞—Å—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
  }
}
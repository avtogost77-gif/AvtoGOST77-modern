// ===============================================
// –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –ö–ê–†–¢–ê –õ–û–ì–ò–°–¢–ò–ö–ò v2.0
// –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ –∑–æ–Ω –ø–æ–∫—Ä—ã—Ç–∏—è
// ===============================================

class InteractiveLogisticsMap {
  constructor() {
    this.map = null;
    this.routeLayer = null;
    this.coverageZones = [];
    this.markers = [];
    this.isInitialized = false;
    
    // –ó–æ–Ω—ã –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
    this.zones = {
      moscow: {
        name: '–ú–æ—Å–∫–≤–∞ –∏ –ú–û',
        center: [55.7558, 37.6176],
        radius: 150000, // 150 –∫–º
        color: '#2563eb',
        services: ['–≠–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–∞', '–ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥', '–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏']
      },
      spb: {
        name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –∏ –õ–û',
        center: [59.9311, 30.3609],
        radius: 100000,
        color: '#7c3aed',
        services: ['–ú–µ–∂—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏', '–°–∫–ª–∞–¥—Å–∫–∞—è –ª–æ–≥–∏—Å—Ç–∏–∫–∞']
      },
      central: {
        name: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –†–æ—Å—Å–∏—è',
        center: [54.7431, 35.2675],
        radius: 300000,
        color: '#059669',
        services: ['–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏', '–î–∏—Å—Ç—Ä–∏–±—É—Ü–∏—è']
      }
    };

    this.offices = [
      {
        name: '–ì–ª–∞–≤–Ω—ã–π –æ—Ñ–∏—Å',
        coords: [55.7558, 37.6176],
        address: '–ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 1',
        phone: '+7 (495) 123-45-67',
        services: ['–í—Å–µ –≤–∏–¥—ã —É—Å–ª—É–≥'],
        type: 'main'
      },
      {
        name: '–§–∏–ª–∏–∞–ª –°–ü–±',
        coords: [59.9311, 30.3609],
        address: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ø—Ä. –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π, 25',
        phone: '+7 (812) 987-65-43',
        services: ['–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏—Å—Ç–∏–∫–∞'],
        type: 'branch'
      },
      {
        name: '–°–∫–ª–∞–¥ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
        coords: [56.8431, 60.6454],
        address: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, —É–ª. –°–∫–ª–∞–¥—Å–∫–∞—è, 15',
        phone: '+7 (343) 555-12-34',
        services: ['–°–∫–ª–∞–¥—Å–∫–∏–µ —É—Å–ª—É–≥–∏', '–ö—Ä–æ—Å—Å-–¥–æ–∫–∏–Ω–≥'],
        type: 'warehouse'
      }
    ];

    this.init();
  }

  async init() {
    try {
      await this.loadYandexMapsAPI();
      this.createMapContainer();
      this.initializeMap();
      this.addControls();
      this.bindEvents();
      this.isInitialized = true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:', error);
      this.showFallback();
    }
  }

  async loadYandexMapsAPI() {
    return new Promise((resolve, reject) => {
      if (window.ymaps) {
        resolve();
        return;
      }

      const script = document.createElement('script');
      script.src = 'https://api-maps.yandex.ru/2.1/?apikey=–≤–∞—à-api-–∫–ª—é—á&lang=ru_RU';
      script.onload = () => {
        ymaps.ready(() => resolve());
      };
      script.onerror = () => reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Yandex Maps API'));
      document.head.appendChild(script);
    });
  }

  createMapContainer() {
    const mapHTML = `
      <section class="interactive-map-section section">
        <div class="container">
          <div class="map-header text-center">
            <h2 class="reveal">üó∫Ô∏è –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –Ω–∞—à–∏—Ö —É—Å–ª—É–≥</h2>
            <p class="text-lg text-muted reveal">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤</p>
          </div>

          <div class="map-container reveal">
            <div class="map-sidebar">
              <div class="map-controls">
                <h4>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ–π</h4>
                
                <div class="control-group">
                  <label class="control-label">–ü–æ–∫–∞–∑–∞—Ç—å –∑–æ–Ω—ã –ø–æ–∫—Ä—ã—Ç–∏—è</label>
                  <div class="control-buttons">
                    <button class="btn btn-sm zone-btn" data-zone="moscow">–ú–æ—Å–∫–≤–∞</button>
                    <button class="btn btn-sm zone-btn" data-zone="spb">–°–ü–±</button>
                    <button class="btn btn-sm zone-btn" data-zone="central">–¶–µ–Ω—Ç—Ä</button>
                    <button class="btn btn-sm btn-secondary" id="clear-zones">–û—á–∏—Å—Ç–∏—Ç—å</button>
                  </div>
                </div>

                <div class="control-group">
                  <label class="control-label">–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</label>
                  <div class="route-builder">
                    <input type="text" id="route-from" placeholder="–û—Ç–∫—É–¥–∞" class="route-input">
                    <input type="text" id="route-to" placeholder="–ö—É–¥–∞" class="route-input">
                    <button class="btn btn-primary btn-sm" id="build-route">
                      <i class="bi bi-arrow-right"></i> –ü–æ—Å—Ç—Ä–æ–∏—Ç—å
                    </button>
                    <button class="btn btn-secondary btn-sm" id="clear-route">–û—á–∏—Å—Ç–∏—Ç—å</button>
                  </div>
                </div>

                <div class="control-group">
                  <label class="control-label">–ù–∞—à–∏ –æ—Ñ–∏—Å—ã</label>
                  <div class="offices-list">
                    ${this.offices.map((office, index) => `
                      <div class="office-item" data-office="${index}">
                        <div class="office-icon ${office.type}"></div>
                        <div class="office-info">
                          <div class="office-name">${office.name}</div>
                          <div class="office-address">${office.address}</div>
                        </div>
                      </div>
                    `).join('')}
                  </div>
                </div>
              </div>

              <div class="map-legend">
                <h5>–õ–µ–≥–µ–Ω–¥–∞</h5>
                <div class="legend-item">
                  <div class="legend-color" style="background: #2563eb;"></div>
                  <span>–ó–æ–Ω–∞ —ç–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–∏</span>
                </div>
                <div class="legend-item">
                  <div class="legend-color" style="background: #7c3aed;"></div>
                  <span>–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ</span>
                </div>
                <div class="legend-item">
                  <div class="legend-color" style="background: #059669;"></div>
                  <span>–§–µ–¥–µ—Ä–∞–ª—å–Ω–∞—è —Å–µ—Ç—å</span>
                </div>
              </div>
            </div>

            <div class="map-wrapper">
              <div id="yandex-map" class="map-canvas"></div>
              
              <div class="map-overlay">
                <div class="map-stats">
                  <div class="stat-item">
                    <div class="stat-number" id="covered-cities">150+</div>
                    <div class="stat-label">–≥–æ—Ä–æ–¥–æ–≤ –ø–æ–∫—Ä—ã—Ç–∏—è</div>
                  </div>
                  <div class="stat-item">
                    <div class="stat-number" id="total-distance">50000+</div>
                    <div class="stat-label">–∫–º –º–∞—Ä—à—Ä—É—Ç–æ–≤</div>
                  </div>
                  <div class="stat-item">
                    <div class="stat-number" id="delivery-time">24—á</div>
                    <div class="stat-label">—Å—Ä–µ–¥–Ω—è—è –¥–æ—Å—Ç–∞–≤–∫–∞</div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="route-info" id="route-info" style="display: none;">
            <div class="route-card card">
              <h4>üìç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ</h4>
              <div class="route-details" id="route-details"></div>
              <div class="route-actions">
                <button class="btn btn-primary" onclick="window.smartCalculator && window.smartCalculator.prefillRoute()">
                  üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å
                </button>
              </div>
            </div>
          </div>
        </div>
      </section>
    `;

    // –ù–∞–π–¥–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∫–∞—Ä—Ç—ã (–ø–æ—Å–ª–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞)
    const calcSection = document.getElementById('smart-calculator');
    if (calcSection && calcSection.nextElementSibling) {
      calcSection.parentNode.insertBefore(
        this.createElementFromHTML(mapHTML), 
        calcSection.nextElementSibling
      );
    } else {
      document.body.appendChild(this.createElementFromHTML(mapHTML));
    }
  }

  createElementFromHTML(htmlString) {
    const div = document.createElement('div');
    div.innerHTML = htmlString.trim();
    return div.firstChild;
  }

  initializeMap() {
    this.map = new ymaps.Map('yandex-map', {
      center: [55.7558, 37.6176], // –ú–æ—Å–∫–≤–∞
      zoom: 5,
      controls: ['zoomControl', 'typeSelector', 'fullscreenControl']
    }, {
      searchControlProvider: 'yandex#search'
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ñ–∏—Å—ã –Ω–∞ –∫–∞—Ä—Ç—É
    this.addOfficesToMap();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
    this.clusterer = new ymaps.Clusterer({
      preset: 'islands#blueClusterIcons',
      groupByCoordinates: false,
      clusterDisableClickZoom: false,
      clusterHideIconOnBalloonOpen: false,
      geoObjectHideIconOnBalloonOpen: false
    });

    this.map.geoObjects.add(this.clusterer);
  }

  addOfficesToMap() {
    this.offices.forEach((office, index) => {
      const iconType = this.getOfficeIcon(office.type);
      
      const placemark = new ymaps.Placemark(office.coords, {
        balloonContentHeader: office.name,
        balloonContentBody: `
          <div class="balloon-content">
            <p><strong>–ê–¥—Ä–µ—Å:</strong> ${office.address}</p>
            <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${office.phone}</p>
            <p><strong>–£—Å–ª—É–≥–∏:</strong> ${office.services.join(', ')}</p>
            <div class="balloon-actions">
              <button class="btn btn-sm btn-primary" onclick="window.interactiveMap.showOfficeRoute(${index})">
                –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç
              </button>
            </div>
          </div>
        `,
        hintContent: office.name
      }, {
        preset: iconType,
        iconColor: office.type === 'main' ? '#2563eb' : office.type === 'branch' ? '#7c3aed' : '#059669'
      });

      this.map.geoObjects.add(placemark);
      this.markers.push(placemark);
    });
  }

  getOfficeIcon(type) {
    switch(type) {
      case 'main': return 'islands#blueStarIcon';
      case 'branch': return 'islands#purpleHomeIcon';
      case 'warehouse': return 'islands#greenDotIconWithCaption';
      default: return 'islands#grayDotIcon';
    }
  }

  addControls() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–æ–Ω –ø–æ–∫—Ä—ã—Ç–∏—è
    document.querySelectorAll('.zone-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const zone = e.target.dataset.zone;
        this.toggleZone(zone);
        btn.classList.toggle('active');
      });
    });

    // –û—á–∏—Å—Ç–∫–∞ –∑–æ–Ω
    document.getElementById('clear-zones').addEventListener('click', () => {
      this.clearZones();
      document.querySelectorAll('.zone-btn').forEach(btn => btn.classList.remove('active'));
    });

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
    document.getElementById('build-route').addEventListener('click', () => {
      this.buildRoute();
    });

    // –û—á–∏—Å—Ç–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
    document.getElementById('clear-route').addEventListener('click', () => {
      this.clearRoute();
    });

    // –ö–ª–∏–∫–∏ –ø–æ –æ—Ñ–∏—Å–∞–º
    document.querySelectorAll('.office-item').forEach((item, index) => {
      item.addEventListener('click', () => {
        this.focusOnOffice(index);
      });
    });
  }

  toggleZone(zoneKey) {
    const zone = this.zones[zoneKey];
    if (!zone) return;

    const existingZone = this.coverageZones.find(z => z.key === zoneKey);
    
    if (existingZone) {
      // –£–¥–∞–ª—è–µ–º –∑–æ–Ω—É
      this.map.geoObjects.remove(existingZone.circle);
      this.coverageZones = this.coverageZones.filter(z => z.key !== zoneKey);
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–Ω—É
      const circle = new ymaps.Circle([zone.center, zone.radius], {
        balloonContent: `
          <div class="zone-balloon">
            <h4>${zone.name}</h4>
            <p><strong>–£—Å–ª—É–≥–∏:</strong></p>
            <ul>
              ${zone.services.map(service => `<li>${service}</li>`).join('')}
            </ul>
          </div>
        `
      }, {
        fillColor: zone.color + '30',
        strokeColor: zone.color,
        strokeOpacity: 0.8,
        strokeWidth: 2
      });

      this.map.geoObjects.add(circle);
      this.coverageZones.push({ key: zoneKey, circle, zone });
    }
  }

  clearZones() {
    this.coverageZones.forEach(({ circle }) => {
      this.map.geoObjects.remove(circle);
    });
    this.coverageZones = [];
  }

  async buildRoute() {
    const fromValue = document.getElementById('route-from').value;
    const toValue = document.getElementById('route-to').value;

    if (!fromValue || !toValue) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è');
      return;
    }

    try {
      // –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤
      const fromCoords = await this.geocodeAddress(fromValue);
      const toCoords = await this.geocodeAddress(toValue);

      if (!fromCoords || !toCoords) {
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–¥–∏–Ω –∏–∑ –∞–¥—Ä–µ—Å–æ–≤');
        return;
      }

      // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
      const route = await this.createRoute(fromCoords, toCoords);
      this.displayRoute(route, fromValue, toValue);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç');
    }
  }

  async geocodeAddress(address) {
    return new Promise((resolve) => {
      ymaps.geocode(address).then((result) => {
        const firstGeoObject = result.geoObjects.get(0);
        if (firstGeoObject) {
          resolve(firstGeoObject.geometry.getCoordinates());
        } else {
          resolve(null);
        }
      });
    });
  }

  async createRoute(fromCoords, toCoords) {
    return new Promise((resolve, reject) => {
      ymaps.route([fromCoords, toCoords], {
        mapStateAutoApply: true
      }).then((route) => {
        resolve(route);
      }, (error) => {
        reject(error);
      });
    });
  }

  displayRoute(route, fromAddress, toAddress) {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç
    this.clearRoute();

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
    this.routeLayer = route;
    this.map.geoObjects.add(route);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ
    const distance = route.getLength();
    const duration = route.getJamsTime();

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    this.showRouteInfo({
      from: fromAddress,
      to: toAddress,
      distance: Math.round(distance / 1000), // –≤ –∫–º
      duration: Math.round(duration / 60) // –≤ –º–∏–Ω—É—Ç–∞—Ö
    });

    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ
    this.map.setBounds(route.getBounds());
  }

  showRouteInfo(routeData) {
    const routeInfo = document.getElementById('route-info');
    const routeDetails = document.getElementById('route-details');

    routeDetails.innerHTML = `
      <div class="route-summary">
        <div class="route-endpoints">
          <div class="endpoint">
            <i class="bi bi-geo-alt-fill" style="color: #10b981;"></i>
            <span>${routeData.from}</span>
          </div>
          <div class="route-arrow">
            <i class="bi bi-arrow-down"></i>
          </div>
          <div class="endpoint">
            <i class="bi bi-geo-alt-fill" style="color: #ef4444;"></i>
            <span>${routeData.to}</span>
          </div>
        </div>
        
        <div class="route-metrics">
          <div class="metric">
            <i class="bi bi-speedometer2"></i>
            <span>${routeData.distance} –∫–º</span>
          </div>
          <div class="metric">
            <i class="bi bi-clock"></i>
            <span>${Math.floor(routeData.duration / 60)}—á ${routeData.duration % 60}–º</span>
          </div>
          <div class="metric">
            <i class="bi bi-fuel-pump"></i>
            <span>~${Math.round(routeData.distance * 0.1)} –ª</span>
          </div>
        </div>
      </div>
    `;

    routeInfo.style.display = 'block';
    routeInfo.scrollIntoView({ behavior: 'smooth', block: 'nearest' });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    this.lastRoute = routeData;
  }

  clearRoute() {
    if (this.routeLayer) {
      this.map.geoObjects.remove(this.routeLayer);
      this.routeLayer = null;
    }
    document.getElementById('route-info').style.display = 'none';
    this.lastRoute = null;
  }

  focusOnOffice(index) {
    const office = this.offices[index];
    if (office) {
      this.map.setCenter(office.coords, 12);
      this.markers[index].balloon.open();
    }
  }

  showOfficeRoute(officeIndex) {
    const office = this.offices[officeIndex];
    document.getElementById('route-to').value = office.address;
  }

  // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º
  prefillCalculator() {
    if (this.lastRoute && window.smartCalculator) {
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞
      const fromInput = document.getElementById('from-city');
      const toInput = document.getElementById('to-city');
      
      if (fromInput && toInput) {
        fromInput.value = this.lastRoute.from;
        toInput.value = this.lastRoute.to;
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É
        document.getElementById('smart-calculator').scrollIntoView({ 
          behavior: 'smooth' 
        });
      }
    }
  }

  showFallback() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—É—é –∫–∞—Ä—Ç—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    const mapContainer = document.getElementById('yandex-map');
    if (mapContainer) {
      mapContainer.innerHTML = `
        <div class="map-fallback">
          <div class="fallback-content">
            <i class="bi bi-map" style="font-size: 3rem; color: var(--neutral-400);"></i>
            <h4>–ö–∞—Ä—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</h4>
            <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö</p>
            <button class="btn btn-primary" onclick="location.reload()">
              –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
            </button>
          </div>
        </div>
      `;
    }
  }

  bindEvents() {
    // –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–µ–π –º–∞—Ä—à—Ä—É—Ç–∞
    this.setupRouteAutocomplete();
    
    // –ê–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
    this.initScrollAnimations();
  }

  setupRouteAutocomplete() {
    const cities = [
      '–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å',
      '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ß–µ–ª—è–±–∏–Ω—Å–∫', '–°–∞–º–∞—Ä–∞', '–û–º—Å–∫', '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É'
    ];

    [{ id: 'route-from' }, { id: 'route-to' }].forEach(({ id }) => {
      const input = document.getElementById(id);
      if (!input) return;

      input.addEventListener('input', (e) => {
        const value = e.target.value.toLowerCase();
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
      });
    });
  }

  initScrollAnimations() {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('revealed');
        }
      });
    });

    document.querySelectorAll('.reveal').forEach(el => {
      observer.observe(el);
    });
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
  window.interactiveMap = new InteractiveLogisticsMap();
});
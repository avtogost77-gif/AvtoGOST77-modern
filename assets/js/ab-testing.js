// A/B Testing System for Avtogost77
class ABTesting {
    constructor() {
        this.tests = {
            'cta-button-text': {
                variants: [
                    '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å 30 —Å–µ–∫',
                    '–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É —Å–µ–π—á–∞—Å',
                    '–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç'
                ],
                element: '.btn-primary'
            },
            'hero-subtitle': {
                variants: [
                    '–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –±–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞: –ø–æ–¥–∞—á–∞ –æ—Ç 2 —á–∞—Å–æ–≤, –∫–æ–Ω—Ç—Ä–æ–ª—å 24/7, –≤—Å—ë –ø–æ–¥ –∫–ª—é—á. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äî –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–¥–µ–ª–∞–µ–º –º—ã',
                    '–ù–∞–¥–µ–∂–Ω—ã–µ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏ –ø–æ –†–æ—Å—Å–∏–∏. –ü–æ–¥–∞—á–∞ –∑–∞ 2 —á–∞—Å–∞, —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–Ω–ª–∞–π–Ω.',
                    '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –ë—ã—Å—Ç—Ä–∞—è –ø–æ–¥–∞—á–∞, –≤—ã–≥–æ–¥–Ω—ã–µ —Ü–µ–Ω—ã.'
                ],
                element: '.hero-subtitle'
            },
            'calculator-cta': {
                variants: [
                    '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å',
                    '–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É',
                    '–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç'
                ],
                element: '#calculateButton'
            }
        };
        
        this.init();
    }
    
    init() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        this.loadVariants();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        this.applyVariants();
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–ª–∏–∫–∏
        this.trackClicks();
    }
    
    loadVariants() {
        this.currentVariants = {};
        
        Object.keys(this.tests).forEach(testName => {
            const saved = localStorage.getItem(`ab_test_${testName}`);
            if (saved) {
                this.currentVariants[testName] = parseInt(saved);
            } else {
                // –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞
                const variant = Math.floor(Math.random() * this.tests[testName].variants.length);
                this.currentVariants[testName] = variant;
                localStorage.setItem(`ab_test_${testName}`, variant.toString());
            }
        });
    }
    
    applyVariants() {
        Object.keys(this.tests).forEach(testName => {
            const test = this.tests[testName];
            const variant = this.currentVariants[testName];
            const newText = test.variants[variant];
            
            const elements = document.querySelectorAll(test.element);
            elements.forEach(element => {
                if (element.tagName === 'BUTTON' || element.tagName === 'A') {
                    element.textContent = newText;
                } else if (element.tagName === 'P') {
                    element.textContent = newText;
                }
            });
            
            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–∫–∞–∑ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            this.trackImpression(testName, variant);
        });
    }
    
    trackClicks() {
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º
        document.addEventListener('click', (e) => {
            if (e.target.matches('.btn-primary, #calculateButton')) {
                Object.keys(this.tests).forEach(testName => {
                    const test = this.tests[testName];
                    if (e.target.matches(test.element)) {
                        const variant = this.currentVariants[testName];
                        this.trackClick(testName, variant, e.target.textContent);
                    }
                });
            }
        });
    }
    
    trackImpression(testName, variant) {
        if (typeof ym !== 'undefined') {
            ym(103413788, 'reachGoal', 'ab_test_impression', {
                test: testName,
                variant: variant,
                page: window.location.pathname
            });
        }
        
        console.log(`üìä A/B Test Impression: ${testName} - variant ${variant}`);
    }
    
    trackClick(testName, variant, buttonText) {
        if (typeof ym !== 'undefined') {
            ym(103413788, 'reachGoal', 'ab_test_click', {
                test: testName,
                variant: variant,
                button_text: buttonText,
                page: window.location.pathname
            });
        }
        
        console.log(`üìä A/B Test Click: ${testName} - variant ${variant} - "${buttonText}"`);
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    getStats() {
        const stats = {};
        Object.keys(this.tests).forEach(testName => {
            const variant = this.currentVariants[testName];
            stats[testName] = {
                current_variant: variant,
                text: this.tests[testName].variants[variant]
            };
        });
        return stats;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    window.abTesting = new ABTesting();
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üéØ A/B Testing Stats:', window.abTesting.getStats());
});

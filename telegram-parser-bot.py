#!/usr/bin/env python3
"""
ü§ñ TELEGRAM –ü–ê–†–°–ï–† –î–õ–Ø –¢–†–≠–®-–ú–ê–†–ö–ï–¢–ò–ù–ì–ê
–ü–∞—Ä—Å–∏—Ç —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏–∑ —á–∞—Ç–æ–≤/–∫–∞–Ω–∞–ª–æ–≤
"""

import asyncio
import random
import json
import time
from datetime import datetime
from telethon import TelegramClient, functions, types
from telethon.errors import FloodWaitError, UserPrivacyRestrictedError
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_ID = 123456  # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞ my.telegram.org
API_HASH = 'your_api_hash'
PHONE = '+7916XXXXXXX'
TARGET_CHANNEL = '@your_trash_channel'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TrashMarketingBot:
    def __init__(self):
        self.client = TelegramClient('trash_marketing_session', API_ID, API_HASH)
        self.parsed_users = set()
        self.invited_count = 0
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞"""
        await self.client.start(PHONE)
        logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")
        
    async def parse_channel_members(self, channel_username, limit=200):
        """–ü–∞—Ä—Å–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞"""
        logger.info(f"üîç –ü–∞—Ä—Å–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {channel_username}")
        
        try:
            channel = await self.client.get_entity(channel_username)
            users = []
            
            async for user in self.client.iter_participants(channel, limit=limit):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤ –∏ —é–∑–µ—Ä–æ–≤ –±–µ–∑ username
                if user.bot or not user.username:
                    continue
                    
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö
                if user.id in self.parsed_users:
                    continue
                    
                user_data = {
                    'id': user.id,
                    'username': user.username,
                    'first_name': user.first_name or '',
                    'last_name': user.last_name or '',
                    'phone': user.phone if hasattr(user, 'phone') else None,
                    'parsed_from': channel_username,
                    'parsed_at': datetime.now().isoformat()
                }
                
                users.append(user_data)
                self.parsed_users.add(user.id)
                
            logger.info(f"‚úÖ –°–ø–∞—Ä—Å–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return users
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return []
    
    async def smart_invite_users(self, users, max_per_day=40):
        """–£–º–Ω—ã–π –∏–Ω–≤–∞–π—Ç —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–∞–Ω–∞"""
        logger.info(f"üì® –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–≤–∞–π—Ç {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        invited_today = 0
        
        for user in users:
            if invited_today >= max_per_day:
                logger.info(f"‚è∏Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ({max_per_day})")
                break
                
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
                await self.client(functions.channels.InviteToChannelRequest(
                    TARGET_CHANNEL,
                    [user['username']]
                ))
                
                invited_today += 1
                self.invited_count += 1
                logger.info(f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω @{user['username']} ({invited_today}/{max_per_day})")
                
                # –†–∞–Ω–¥–æ–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 30-90 —Å–µ–∫—É–Ω–¥
                delay = random.randint(30, 90)
                await asyncio.sleep(delay)
                
            except UserPrivacyRestrictedError:
                logger.warning(f"üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å: @{user['username']}")
                
            except FloodWaitError as e:
                logger.warning(f"‚è∞ Flood wait: {e.seconds} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(e.seconds)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–≤–∞–π—Ç–∞ @{user['username']}: {e}")
                
        return invited_today
    
    async def send_content_post(self, post_type='price'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        posts = {
            'price': self.generate_price_post(),
            'traffic': self.generate_traffic_post(),
            'lifehack': self.generate_lifehack_post(),
            'case': self.generate_case_post()
        }
        
        post = posts.get(post_type, posts['price'])
        
        try:
            await self.client.send_message(TARGET_CHANNEL, post)
            logger.info(f"üìù –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç: {post_type}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
    
    def generate_price_post(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —Å —Ü–µ–Ω–∞–º–∏"""
        date = datetime.now().strftime('%d.%m')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–¥–æ–º –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        prices = {
            'msk_spb_gazel': random.randint(3200, 3800),
            'moscow_gazel': random.randint(500, 600),
            'mkad_price': random.randint(30, 40),
            'msk_spb_fura': random.randint(25000, 30000),
            'msk_ekb_fura': random.randint(45000, 55000)
        }
        
        return f"""üöõ **–ê–ö–¢–£–ê–õ–¨–ù–´–ï –¶–ï–ù–´ –ù–ê {date}**

**–ì–∞–∑–µ–ª—å (–¥–æ 1.5—Ç):**
üìç –ú–æ—Å–∫–≤–∞ - –°–ü–±: {prices['msk_spb_gazel']}‚ÇΩ
üìç –ü–æ –ú–æ—Å–∫–≤–µ: {prices['moscow_gazel']}‚ÇΩ/—á–∞—Å
üìç –ó–∞ –ú–ö–ê–î: +{prices['mkad_price']}‚ÇΩ/–∫–º

**–§—É—Ä–∞ 20—Ç:**
üìç –ú–æ—Å–∫–≤–∞ - –°–ü–±: {prices['msk_spb_fura']}‚ÇΩ
üìç –ú–æ—Å–∫–≤–∞ - –ï–∫–±: {prices['msk_ekb_fura']}‚ÇΩ

üí° **–õ–∞–π—Ñ—Ö–∞–∫:** –ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ –Ω–∞ –±—É–¥–Ω–∏ - –¥–µ—à–µ–≤–ª–µ –Ω–∞ 15%!

‚ö° **–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç:** @father_bot
‚òéÔ∏è **–ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è:** +7 (916) 272-09-32

#—Ü–µ–Ω—ã #–≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏ #–º–æ—Å–∫–≤–∞"""
    
    def generate_traffic_post(self):
        """–ü–æ—Å—Ç –ø—Ä–æ –ø—Ä–æ–±–∫–∏"""
        traffic_level = random.randint(3, 9)
        
        if traffic_level <= 4:
            status = "üü¢ –î–æ—Ä–æ–≥–∏ —Å–≤–æ–±–æ–¥–Ω—ã!"
            advice = "–û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏"
        elif traffic_level <= 7:
            status = "üü° –£–º–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–∫–∏"
            advice = "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ +30 –º–∏–Ω—É—Ç –∫ –ø–æ–µ–∑–¥–∫–µ"
        else:
            status = "üî¥ –ê–î–°–ö–ò–ï –ü–†–û–ë–ö–ò!"
            advice = "–ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –Ω–∞ –≤–µ—á–µ—Ä"
            
        return f"""üö¶ **–ü–†–û–ë–ö–ò –í –ú–û–°–ö–í–ï –°–ï–ô–ß–ê–°**

{status}
–£—Ä–æ–≤–µ–Ω—å –∑–∞–≥—Ä—É–∑–∫–∏: {traffic_level}/10

üìç **–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏:**
‚Ä¢ –¢–¢–ö: —Å—Ç–æ–∏—Ç –Ω–∞–≥–ª—É—Ö–æ
‚Ä¢ –ú–ö–ê–î —Å–µ–≤–µ—Ä: 5 –∫–º/—á
‚Ä¢ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥–∫–∞: –≤—Å—Ç–∞–ª–∞

üí° **–°–æ–≤–µ—Ç –¥–Ω—è:** {advice}

üöõ –ù–∞—à–∏ –≤–æ–¥–∏—Ç–µ–ª–∏ –∑–Ω–∞—é—Ç –æ–±—ä–µ–∑–¥—ã!
üì± –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞: @father_bot

#–ø—Ä–æ–±–∫–∏ #–º–æ—Å–∫–≤–∞ #–¥–æ—Å—Ç–∞–≤–∫–∞"""
    
    def generate_lifehack_post(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∞–π—Ñ—Ö–∞–∫–∞"""
        lifehacks = [
            "–ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ –≥–∞–∑–µ–ª—å —Å –≥—Ä—É–∑—á–∏–∫–∞–º–∏ –∑–∞—Ä–∞–Ω–µ–µ - —ç–∫–æ–Ω–æ–º–∏—è –¥–æ 30%",
            "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –≥—Ä—É–∑ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π - –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–æ—Ä–æ–≤",
            "–£–ø–∞–∫–æ–≤—ã–≤–∞–π—Ç–µ —Ö—Ä—É–ø–∫–æ–µ –≤ —Ü–µ–Ω—Ç—Ä –∫—É–∑–æ–≤–∞ - –º–µ–Ω—å—à–µ —Ç—Ä—è—Å–∫–∏",
            "–ì—Ä—É–∑–∏—Ç–µ —Ç—è–∂–µ–ª–æ–µ –≤–Ω–∏–∑ - –º–∞—à–∏–Ω–∞ —É—Å—Ç–æ–π—á–∏–≤–µ–µ",
            "–°—Ç—Ä–∞—Ö—É–π—Ç–µ —Ü–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã - —Å–ø–æ–∫–æ–π–Ω–µ–µ —Å–ø–∏—Ç—Å—è"
        ]
        
        return f"""üí° **–õ–ê–ô–§–•–ê–ö –î–ù–Ø**

{random.choice(lifehacks)}

–ë–æ–ª—å—à–µ —Å–æ–≤–µ—Ç–æ–≤ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ: @father_bot

#–ª–∞–π—Ñ—Ö–∞–∫ #—Å–æ–≤–µ—Ç #–≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏"""
    
    def generate_case_post(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–µ–π—Å–∞"""
        cases = [
            {
                'title': '–ü–µ—Ä–µ–µ–∑–¥ –æ—Ñ–∏—Å–∞ –∑–∞ 1 –Ω–æ—á—å',
                'problem': 'IT-–∫–æ–º–ø–∞–Ω–∏—è, 50 —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç, –¥–µ–¥–ª–∞–π–Ω',
                'solution': '3 –≥–∞–∑–µ–ª–∏, –Ω–æ—á–Ω–∞—è —Å–º–µ–Ω–∞, –≤—Å—ë —É—Å–ø–µ–ª–∏',
                'result': '–ö–ª–∏–µ–Ω—Ç –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ, –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ –≥–æ–¥'
            },
            {
                'title': '–î–æ—Å—Ç–∞–≤–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–≥–∏–æ–Ω',
                'problem': '–°—Ç–∞–Ω–æ–∫ 5 —Ç–æ–Ω–Ω, —Å—Ä–æ—á–Ω–æ –≤ –ö–∞–∑–∞–Ω—å',
                'solution': '–°–ø–µ—Ü—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –æ–ø—ã—Ç–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å',
                'result': '–î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ 12 —á–∞—Å–æ–≤, –±–µ–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π'
            }
        ]
        
        case = random.choice(cases)
        
        return f"""üìã **–ö–ï–ô–°: {case['title']}**

**–ó–∞–¥–∞—á–∞:** {case['problem']}
**–†–µ—à–µ–Ω–∏–µ:** {case['solution']}
**–†–µ–∑—É–ª—å—Ç–∞—Ç:** {case['result']}

üöõ –î–æ–≤–µ—Ä—å—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞–º!
üìû +7 (916) 272-09-32

#–∫–µ–π—Å #–æ—Ç–∑—ã–≤ #–æ–ø—ã—Ç"""
    
    async def run_daily_routine(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä—É—Ç–∏–Ω–∞"""
        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        sources = [
            '@gruzoperevozki_moscow',
            '@gazel_msk_chat',
            '@stroyka_remont_moscow',
            '@moscow_business_chat'
        ]
        
        # –ü–∞—Ä—Å–∏–º –ø–æ –æ—á–µ—Ä–µ–¥–∏
        all_users = []
        for source in sources:
            users = await self.parse_channel_members(source, limit=50)
            all_users.extend(users)
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            await asyncio.sleep(random.randint(300, 600))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö —é–∑–µ—Ä–æ–≤
        with open('parsed_users.json', 'w', encoding='utf-8') as f:
            json.dump(all_users, f, ensure_ascii=False, indent=2)
        
        # –ò–Ω–≤–∞–π—Ç–∏–º
        await self.smart_invite_users(all_users)
        
        # –ü—É–±–ª–∏–∫—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        await self.send_content_post('price')
        await asyncio.sleep(3600)  # –ß–∞—Å –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
        await self.send_content_post('traffic')
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è: —Å–ø–∞—Ä—Å–µ–Ω–æ {len(all_users)}, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ {self.invited_count}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TrashMarketingBot()
    await bot.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä—É—Ç–∏–Ω—É
    while True:
        try:
            await bot.run_daily_routine()
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
            await asyncio.sleep(86400)  # 24 —á–∞—Å–∞
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(3600)  # –ü–∞—É–∑–∞ —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ


if __name__ == '__main__':
    asyncio.run(main())
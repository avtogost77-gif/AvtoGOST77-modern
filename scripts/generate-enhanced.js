#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');
const nunjucks = require('nunjucks');
const { generateRouteContent } = require('./content-generator');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nunjucks
nunjucks.configure(path.join(__dirname, '..', 'templates'), { 
  autoescape: true,
  trimBlocks: true,
  lstripBlocks: true
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
const cities = yaml.load(fs.readFileSync(path.join(__dirname, '..', 'data', 'cities.yaml'), 'utf8'));
const services = yaml.load(fs.readFileSync(path.join(__dirname, '..', 'data', 'services.yaml'), 'utf8'));
const routes = yaml.load(fs.readFileSync(path.join(__dirname, '..', 'data', 'routes.yaml'), 'utf8'));

// –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
const modifiers = ['', 'nedorogo', 'srochno'];

// –°—á–µ—Ç—á–∏–∫–∏
let generatedCount = 0;
const startTime = Date.now();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –º–∞—Ä—à—Ä—É—Ç–æ–≤
function generateAllRoutes() {
  const allRoutes = [];
  
  // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
  cities.forEach(fromCity => {
    cities.forEach(toCity => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≥–æ—Ä–æ–¥–∞
      if (fromCity.slug === toCity.slug) return;
      
      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏
      services.forEach(service => {
        // –¢–æ–ª—å–∫–æ —Å–±–æ—Ä–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è –º–µ–∂—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö
        if (service.slug === 'sbornye-gruzy' && fromCity.region === toCity.region) {
          return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–∏—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–ª—è —Å–±–æ—Ä–Ω—ã—Ö
        }
        
        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
        modifiers.forEach(modifier => {
          const route = {
            service: service.slug,
            service_ru: service.name,
            from_city: fromCity.name,
            to_city: toCity.name,
            from_slug: fromCity.slug,
            to_slug: toCity.slug,
            modifier: modifier,
            payload: service.payload || '–æ—Ç 1 –º¬≥'
          };
          
          // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
          const urlParts = [service.slug, fromCity.slug, toCity.slug];
          if (modifier) urlParts.push(modifier);
          route.output_path = urlParts.join('-') + '.html';
          
          // –ó–∞–≥–æ–ª–æ–≤–æ–∫ H1
          const modifierText = modifier === 'nedorogo' ? ' –Ω–µ–¥–æ—Ä–æ–≥–æ' : modifier === 'srochno' ? ' —Å—Ä–æ—á–Ω–æ' : '';
          route.h1 = `${service.name} ${fromCity.name} ‚Äî ${toCity.name}${modifierText}`;
          
          // Title
          route.title = `${route.h1} | –ê–≤—Ç–æ–ì–û–°–¢`;
          
          // Description
          const modifierDesc = modifier === 'nedorogo' ? ' –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ' : modifier === 'srochno' ? ' —Å —ç–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–æ–π' : '';
          route.description = `${service.name} –ø–æ –º–∞—Ä—à—Ä—É—Ç—É ${fromCity.name} ‚Äî ${toCity.name}${modifierDesc}. –ù–∞–¥–µ–∂–Ω–æ, –±—ã—Å—Ç—Ä–æ, —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π ‚Ä¢ ${service.payload}`;
          
          // Subtitle
          route.subtitle = `${fromCity.name} ‚Üí ${toCity.name} ‚Ä¢ ${service.payload}`;
          
          allRoutes.push(route);
        });
      });
    });
  });
  
  return allRoutes;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
function generateRoutePage(route) {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
  const enrichedRoute = generateRouteContent(route);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ö–æ–∂–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
  enrichedRoute.related_routes = [
    {
      url: `${route.service}-${route.to_slug}-${route.from_slug}.html`,
      title: `${route.service_ru} ${route.to_city} ‚Äî ${route.from_city}`
    },
    {
      url: `${route.service}-moskva-${route.to_slug}.html`,
      title: `${route.service_ru} –ú–æ—Å–∫–≤–∞ ‚Äî ${route.to_city}`
    },
    {
      url: `${route.service}-${route.from_slug}-spb.html`,
      title: `${route.service_ru} ${route.from_city} ‚Äî –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥`
    }
  ].filter(r => r.url !== route.output_path).slice(0, 3);
  
  // –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω
  const html = nunjucks.render('landing-enhanced.njk', enrichedRoute);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
  const outputPath = path.join(__dirname, '..', enrichedRoute.output_path);
  fs.writeFileSync(outputPath, html);
  
  generatedCount++;
  
  // –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —Å—Ç—Ä–∞–Ω–∏—Ü
  if (generatedCount % 100 === 0) {
    console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${generatedCount} —Å—Ç—Ä–∞–Ω–∏—Ü...`);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ sitemap
function updateSitemap(routes) {
  const sitemapPath = path.join(__dirname, '..', 'sitemap.xml');
  let sitemap = fs.readFileSync(sitemapPath, 'utf8');
  
  // –£–¥–∞–ª—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
  sitemap = sitemap.replace('</urlset>', '');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ URL
  routes.forEach(route => {
    const priority = route.modifier === '' ? '0.8' : '0.7';
    const url = `
  <url>
    <loc>https://avtogost77.ru/${route.output_path}</loc>
    <lastmod>${new Date().toISOString().split('T')[0]}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>${priority}</priority>
  </url>`;
    sitemap += url;
  });
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º sitemap
  sitemap += '\n</urlset>';
  
  fs.writeFileSync(sitemapPath, sitemap);
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –ó–ê–ü–£–°–ö–ê–Æ –ì–ï–ù–ï–†–ê–¶–ò–Æ –õ–ï–ù–î–ò–ù–ì–û–í –° –ü–û–õ–ù–´–ú –ö–û–ù–¢–ï–ù–¢–û–ú!\n');
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã
  const allRoutes = generateAllRoutes();
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${allRoutes.length} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –º–∞—Ä—à—Ä—É—Ç–æ–≤\n`);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞—Ä—Ç–∏—è–º–∏
  const batchSize = 400;
  for (let i = 0; i < allRoutes.length; i += batchSize) {
    const batch = allRoutes.slice(i, i + batchSize);
    
    console.log(`\nüîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–∞—Ä—Ç–∏—é ${Math.floor(i/batchSize) + 1} (${batch.length} —Å—Ç—Ä–∞–Ω–∏—Ü)...`);
    
    batch.forEach(route => {
      try {
        generateRoutePage(route);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${route.output_path}:`, error.message);
      }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º sitemap –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—Ç–∏–∏
    updateSitemap(batch);
  }
  
  const endTime = Date.now();
  const duration = ((endTime - startTime) / 1000).toFixed(1);
  
  console.log(`\n‚úÖ –ì–û–¢–û–í–û! –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${generatedCount} —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞ ${duration} —Å–µ–∫—É–Ω–¥`);
  console.log(`üìç Sitemap –æ–±–Ω–æ–≤–ª–µ–Ω`);
  console.log(`\nüí° –¢–µ–ø–µ—Ä—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–¥–µ—Ä–∂–∞—Ç:`);
  console.log(`   - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (30-50% —Ä–∞–∑–ª–∏—á–∏–π)`);
  console.log(`   - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ`);
  console.log(`   - FAQ —Å –æ—Ç–≤–µ—Ç–∞–º–∏`);
  console.log(`   - –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞`);
  console.log(`   - CTA –±–ª–æ–∫–∏`);
  console.log(`   - –í–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫—É`);
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);
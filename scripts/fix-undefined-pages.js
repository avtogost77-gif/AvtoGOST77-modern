#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å undefined...\n');

// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å –¥–µ—Ñ–∏—Å–æ–º –≤ –Ω–∞—á–∞–ª–µ
const files = fs.readdirSync('.').filter(f => f.startsWith('-') && f.endsWith('.html'));

console.log(`–ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è`);

let fixed = 0;
let errors = 0;

files.forEach((file, index) => {
  try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    let content = fs.readFileSync(file, 'utf8');
    
    // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ undefined –Ω–∞ "–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏"
    const originalLength = content.length;
    content = content.replace(/undefined/g, '–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏');
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º serviceType –≤ Schema.org
    content = content.replace(/"serviceType": ""/, '"serviceType": "–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏"');
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    fs.writeFileSync(file, content);
    
    if (content.length !== originalLength) {
      fixed++;
      if (fixed % 100 === 0) {
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixed} —Ñ–∞–π–ª–æ–≤...`);
      }
    }
  } catch (error) {
    errors++;
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ ${file}:`, error.message);
  }
});

console.log(`\n‚úÖ –ì–æ—Ç–æ–≤–æ!`);
console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
console.log(`   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${files.length}`);
console.log(`   - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixed}`);
console.log(`   - –û—à–∏–±–æ–∫: ${errors}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –ø–µ—Ä–≤–æ–º —Ñ–∞–π–ª–µ
if (files.length > 0) {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞:');
  const checkContent = fs.readFileSync(files[0], 'utf8');
  const titleMatch = checkContent.match(/<title>(.*?)<\/title>/);
  if (titleMatch) {
    console.log(`   Title: ${titleMatch[1]}`);
  }
}